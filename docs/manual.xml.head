<?xml version="1.0" standalone="no"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
 "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<!--
vim: ts=2 sw=2 sts=2 expandtab:
-->
<book>
  <bookinfo>
    <title>The NeoMutt E-Mail Client</title>
    <author>
      <firstname>Richard</firstname>
      <surname>Russon</surname>
      <email>rich@flatcap.org</email>
    </author>
    <releaseinfo>version @VERSION@</releaseinfo>
    <abstract>
      <para>
        <quote>Teaching an old dog new tricks</quote>
      </para>
    </abstract>
  </bookinfo>

  <chapter id="intro">
    <title>Introduction</title>
    <para>
      <emphasis role="bold">NeoMutt</emphasis> is a small but very powerful
      text-based MIME mail client. NeoMutt is highly configurable, and is well
      suited to the mail power user with advanced features like key bindings,
      keyboard macros, mail threading, regular expression searches and
      a powerful pattern matching language for selecting groups of messages.
    </para>

    <sect1 id="homepage">
      <title>NeoMutt Home Page</title>
      <para>
        The homepage can be found at
        <ulink url="https://neomutt.org">https://neomutt.org</ulink>.
      </para>
    </sect1>

    <sect1 id="mailinglists">
      <title>Mailing Lists</title>
      <itemizedlist>
        <listitem>
          <para>
            <email>neomutt-users@neomutt.org</email> – help, bug reports and
            feature requests. To subscribe to this list, please send a mail to
            <email>neomutt-users-request@neomutt.org</email> with the subject
            "subscribe".
          </para>
        </listitem>
        <listitem>
          <para>
            <email>neomutt-devel@neomutt.org</email> – development mailing
            list. To subscribe to this list, please send a mail to
            <email>neomutt-devel-request@neomutt.org</email> with the subject
            "subscribe".
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="irc">
      <title>NeoMutt Online Resources</title>
      <variablelist>
        <varlistentry>
          <term>Issue Tracking System</term>
          <listitem>
            <para>
              Bugs may be reported on the devel mailing list, or on GitHub:
              <ulink url="https://github.com/neomutt/neomutt/issues">https://github.com/neomutt/neomutt/issues</ulink>
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>IRC</term>
          <listitem>
            <para>
              For the IRC user community, visit channel
              <emphasis>#neomutt</emphasis> on
              <ulink url="https://web.libera.chat/#neomutt">irc.libera.chat</ulink>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>

    <sect1 id="contrib">
      <title>Contributing to NeoMutt</title>
      <para>
        There are various ways to contribute to the NeoMutt project.
      </para>
      <para>
        Especially for new users it may be helpful to meet other new and
        experienced users to chat about NeoMutt, talk about problems and share
        tricks.
      </para>
      <para>
        Since translations of NeoMutt into other languages are highly
        appreciated, the NeoMutt developers always look for skilled translators
        that help improve and continue to maintain stale translations.
      </para>
      <para>
        For contributing code patches for new features and bug fixes,
        please refer to the developer pages at
        <ulink url="https://neomutt.org/dev.html">https://neomutt.org/dev.html</ulink>
        for more details.
      </para>
    </sect1>

    <sect1 id="typo">
      <title>Typographical Conventions</title>
      <para>
        This section lists typographical conventions followed throughout this
        manual. See table <xref linkend="tab-typo" /> for typographical
        conventions for special terms.
      </para>

      <table id="tab-typo">
        <title>Typographical conventions for special terms</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Item</entry>
              <entry>Refers to...</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>printf(3)</literal></entry>
              <entry>
                UNIX manual pages, execute <literal>man 3 printf</literal>
              </entry>
            </row>
            <row>
              <entry><literal>&lt;PageUp&gt;</literal></entry>
              <entry>
                named keys
              </entry>
            </row>
            <row>
              <entry><literal>&lt;create-alias&gt;</literal></entry>
              <entry>
                named NeoMutt function
              </entry>
            </row>
            <row>
              <entry><literal>^G</literal></entry>
              <entry>
                Control+G key combination
              </entry>
            </row>
            <row>
              <entry>$mail_check</entry>
              <entry>
                NeoMutt configuration option
              </entry>
            </row>
            <row>
              <entry><literal>$HOME</literal></entry>
              <entry>
                environment variable
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Examples are presented as:
      </para>
      <screen>neomutt -v</screen>
      <para>
        Within command synopsis, curly brackets (<quote>{}</quote>) denote
        a set of options of which one is mandatory, square brackets
        (<quote>[]</quote>) denote optional arguments, three dots denote that
        the argument may be repeated arbitrary times.
      </para>
    </sect1>

    <sect1 id="copyright">
      <title>Copyright</title>
      <para>
        NeoMutt is Copyright © 2015-2024 Richard Russon
        <email>rich@flatcap.org</email> and friends.
      </para>
      <para>
        This program is free software; you can redistribute it and/or modify it
        under the terms of the GNU General Public License as published by the
        Free Software Foundation; either version 2 of the License, or (at your
        option) any later version.
      </para>
      <para>
        This program is distributed in the hope that it will be useful, but
        WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
        General Public License for more details.
      </para>
      <para>
        You should have received a copy of the GNU General Public License along
        with this program; if not, write to the Free Software Foundation, Inc.,
        51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
      </para>
    </sect1>
  </chapter>

  <chapter id="gettingstarted">
    <title>Getting Started</title>
    <para>
      This section is intended as a brief overview of how to use NeoMutt.
      There are many other features which are described elsewhere in the
      manual. There is even more information available in the NeoMutt FAQ and
      various web pages. See the
      <ulink url="https://neomutt.org">NeoMutt homepage</ulink> for more
      details.
    </para>
    <para>
      The keybindings described in this section are the defaults as
      distributed. Your local system administrator may have altered the
      defaults for your site. You can always type <quote>?</quote> in any menu
      to display the current bindings.
    </para>
    <para>
      The first thing you need to do is invoke NeoMutt, simply by typing
      <literal>neomutt</literal> at the command line. There are various
      command-line options, see either the NeoMutt man page or the
      <link linkend="commandline">reference</link>.
    </para>

    <sect1 id="core-concepts">
      <title>Core Concepts</title>
      <para>
        NeoMutt is a text-based application which interacts with users through
        different menus which are mostly line-/entry-based or page-based.
        A line-based menu is the so-called <quote>index</quote> menu (listing
        all messages of the currently opened folder) or the
        <quote>alias</quote> menu (allowing you to select recipients from
        a list). Examples for page-based menus are the <quote>pager</quote>
        (showing one message at a time) or the <quote>help</quote> menu listing
        all available key bindings.
      </para>
      <para>
        The user interface consists of a context sensitive help line at the
        top, the menu's contents followed by a context sensitive status line
        and finally the command line. The command line is used to display
        informational and error messages as well as for prompts and for
        entering interactive commands.
      </para>
      <para>
        NeoMutt is configured through variables which, if the user wants to
        permanently use a non-default value, are written to configuration
        files. NeoMutt supports a rich config file syntax to make even complex
        configuration files readable and commentable.
      </para>
      <para>
        Because NeoMutt allows for customizing almost all key bindings, there
        are so-called <quote>functions</quote> which can be executed manually
        (using the command line) or in macros. Macros allow the user to bind
        a sequence of commands to a single key or a short key sequence instead
        of repeating a sequence of actions over and over.
      </para>
      <para>
        Many commands (such as saving or copying a message to another folder)
        can be applied to a single message or a set of messages (so-called
        <quote>tagged</quote> messages). To help selecting messages, NeoMutt
        provides a rich set of message patterns (such as recipients, sender,
        body contents, date sent/received, etc.) which can be combined into
        complex expressions using the boolean <emphasis>and</emphasis> and
        <emphasis>or</emphasis> operations as well as negating. These patterns
        can also be used to (for example) search for messages or to limit the
        index to show only matching messages.
      </para>
      <para>
        NeoMutt supports a <quote>hook</quote> concept which allows the user to
        execute arbitrary configuration commands and functions in certain
        situations such as entering a folder, starting a new message or
        replying to an existing one. These hooks can be used to highly
        customize NeoMutt's behavior including managing multiple identities,
        customizing the display for a folder or even implementing
        auto-archiving based on a per-folder basis and much more.
      </para>
      <para>
        Besides an interactive mode, NeoMutt can also be used as a command-line
        tool to send messages. See
        <xref linkend="tab-commandline-options" /> for a complete list of
        command-line options.
      </para>
    </sect1>

    <sect1 id="concept-screens-and-menus">
      <title>Screens and Menus</title>

      <sect2 id="intro-index">
        <title>Index</title>
        <para>
          The index is the screen that you usually see first when you start
          NeoMutt. It gives an overview over your emails in the currently
          opened mailbox. By default, this is your system mailbox. The
          information you see in the index is a list of emails, each with its
          number on the left, its flags (new email, important email, email that
          has been forwarded or replied to, tagged email, ...), the date when
          email was sent, its sender, the email size, and the subject.
          Additionally, the index also shows thread hierarchies: when you reply
          to an email, and the other person replies back, you can see the other
          person's email in a "sub-tree" below. This is especially useful for
          personal email between a group of people or when you've subscribed to
          mailing lists.
        </para>
      </sect2>

      <sect2 id="intro-pager">
        <title>Pager</title>
        <para>
          The pager is responsible for showing the email content. On the top of
          the pager you have an overview over the most important email headers
          like the sender, the recipient, the subject, and much more
          information. How much information you actually see depends on your
          configuration, which we'll describe below.
        </para>
        <para>
          Below the headers, you see the email body which usually contains the
          message. If the email contains any attachments, you will see more
          information about them below the email body, or, if the attachments
          are text files, you can view them directly in the pager.
        </para>
        <para>
          To give the user a good overview, it is possible to configure NeoMutt
          to show different things in the pager with different colors.
          Virtually everything that can be described with a regular expression
          can be colored, e.g. URLs, email addresses or smileys.
        </para>
      </sect2>

      <sect2 id="intro-browser">
        <title>File Browser</title>
        <para>
          The file browser is the interface to the local or remote file system.
          When selecting a mailbox to open, the browser allows custom sorting
          of items, limiting the items shown by a regular expression and
          a freely adjustable format of what to display in which way. It also
          allows for easy navigation through the file system when selecting
          file(s) to attach to a message, select multiple files to attach and
          many more.
        </para>
        <para>
          Some mail systems can nest mail folders inside other mail folders.
          The normal open entry commands in NeoMutt will open the mail folder and
          you can't see the sub-folders.  If you instead use the
          <literal>&lt;descend-directory&gt;</literal> function it will go into
          the directory and not open it as a mail directory.
        </para>
      </sect2>

      <sect2 id="intro-sidebar">
        <title>Sidebar</title>
        <para>
          The Sidebar shows a list of all your mailboxes. The list can be
          turned on and off, it can be themed and the list style can be
          configured.
        </para>
        <para>
          This part of the manual is suitable for beginners. If you already
          know NeoMutt you could skip ahead to the main
          <link linkend="sidebar">Sidebar guide</link>. If you just want to get
          started, you could use the sample
          <link linkend="sidebar-neomuttrc">Sidebar neomuttrc</link>.
        </para>
        <para>
          <emphasis role="bold">Let's turn on the Sidebar:</emphasis>
        </para>

<screen>
set sidebar_visible
set sidebar_format = "%B%&lt;F? [%F]&gt;%* %&lt;N?%N/&gt;%S"
set mail_check_stats
</screen>

        <para>
          You will see something like this. A list of mailboxes on the left.
          A list of emails, from the selected mailbox, on the right.
        </para>

<screen>
<emphasis role="indicator">Fruit [1]     3/8</emphasis>|  1    + Jan 24  Rhys Lee         (192)  Yew
Animals [1]   2/6|  2    + Feb 11  Grace Hall       (167)  Ilama
Cars            4|  3      Feb 23  Aimee Scott      (450)  Nectarine
Seas          1/7|  4    ! Feb 28  Summer Jackson   (264)  Lemon
                 |  5      Mar 07  Callum Harrison  (464)  Raspberry
                 |<emphasis role="indicator">  6 N  + Mar 24  Samuel Harris    (353)  Tangerine          </emphasis>
                 |  7 N  + Sep 05  Sofia Graham     (335)  Cherry
                 |  8 N    Sep 16  Ewan Brown       (105)  Ugli
                 |
                 |
</screen>

        <para>
          This user has four mailboxes: <quote>Fruit</quote>,
          <quote>Cars</quote>, <quote>Animals</quote> and <quote>Seas</quote>.
        </para>
        <para>
          The current, open, mailbox is <quote>Fruit</quote>. We can also see
          information about the other mailboxes. For example: The
          <quote>Animals</quote> mailbox contains, 1 flagged email, 2 new
          emails out of a total of 6 emails.
        </para>

        <sect3 id="intro-sidebar-navigation">
          <title>Navigation</title>
          <para>
            The Sidebar adds some new
            <link linkend="sidebar-functions">functions</link> to NeoMutt.
          </para>
          <para>
            The user pressed the <quote>c</quote> key to
            <literal>&lt;change-folder&gt;</literal> to the
            <quote>Animals</quote> mailbox. The Sidebar automatically updated
            the indicator to match.
          </para>

<screen>
Fruit [1]     3/8|  1      Jan 03  Tia Gibson       (362)  Caiman
<emphasis role="indicator">Animals [1]   2/6</emphasis>|  2    + Jan 22  Rhys Lee         ( 48)  Dolphin
Cars            4|  3    ! Aug 16  Ewan Brown       (333)  Hummingbird
Seas          1/7|  4      Sep 25  Grace Hall       ( 27)  Capybara
                 |<emphasis role="indicator">  5 N  + Nov 12  Evelyn Rogers    (453)  Tapir              </emphasis>
                 |  6 N  + Nov 16  Callum Harrison  (498)  Hedgehog
                 |
                 |
                 |
                 |
</screen>

          <para>
            Let's map some functions:
          </para>

<screen>
bind index,pager \CP sidebar-prev       <emphasis role="comment"># Ctrl-P – Previous Mailbox</emphasis>
bind index,pager \CN sidebar-next       <emphasis role="comment"># Ctrl-N – Next Mailbox</emphasis>
bind index,pager \CO sidebar-open       <emphasis role="comment"># Ctrl-O – Open Highlighted Mailbox</emphasis>
</screen>

          <para>
            Pressing <quote>Ctrl-N</quote> (Next mailbox) twice will move
            the Sidebar <emphasis role="bold">highlight</emphasis> to down to
            the <quote>Seas</quote> mailbox.
          </para>

<screen>
Fruit [1]     3/8|  1      Jan 03  Tia Gibson       (362)  Caiman
<emphasis role="indicator">Animals [1]   2/6</emphasis>|  2    + Jan 22  Rhys Lee         ( 48)  Dolphin
Cars            4|  3    ! Aug 16  Ewan Brown       (333)  Hummingbird
<emphasis role="highlight">Seas          1/7</emphasis>|  4      Sep 25  Grace Hall       ( 27)  Capybara
                 |<emphasis role="indicator">  5 N  + Nov 12  Evelyn Rogers    (453)  Tapir              </emphasis>
                 |  6 N  + Nov 16  Callum Harrison  (498)  Hedgehog
                 |
                 |
                 |
                 |
</screen>

          <note>
            <para>
              Functions <literal>&lt;sidebar-next&gt;</literal> and
              <literal>&lt;sidebar-prev&gt;</literal> move the Sidebar
              <emphasis role="bold">highlight</emphasis>. They
              <emphasis role="bold">do not</emphasis> change the open mailbox.
            </para>
          </note>
          <para>
            Press <quote>Ctrl-O</quote>
            (<literal>&lt;sidebar-open&gt;</literal>) to open the highlighted
            mailbox.
          </para>

<screen>
Fruit [1]     3/8|  1    ! Mar 07  Finley Jones     (139)  Molucca Sea
Animals [1]   2/6|  2    + Mar 24  Summer Jackson   ( 25)  Arafura Sea
Cars            4|  3    + Feb 28  Imogen Baker     (193)  Pechora Sea
<emphasis role="indicator">Seas          1/7</emphasis>|<emphasis role="indicator">  4 N  + Feb 23  Isla Hussain     (348)  Balearic Sea       </emphasis>
                 |
                 |
                 |
                 |
                 |
                 |
</screen>

        </sect3>

        <sect3 id="intro-sidebar-features">
          <title>Features</title>
          <para>
            The Sidebar shows a list of mailboxes in a panel.
          </para>
          <para>
            Everything about the Sidebar can be configured.
          </para>
          <itemizedlist>
            <title>
              <link linkend="intro-sidebar-basics">State of the Sidebar</link>
            </title>
            <listitem>
              <para>
                Visibility
              </para>
            </listitem>
            <listitem>
              <para>
                Width
              </para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="intro-sidebar-limit">Which mailboxes are displayed</link>
            </title>
            <listitem>
              <para>
                Display all
              </para>
            </listitem>
            <listitem>
              <para>
                Limit to mailboxes with new mail
              </para>
            </listitem>
            <listitem>
              <para>
                Pin mailboxes to display always
              </para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="sidebar-sort">The order in which mailboxes are displayed</link>
            </title>
            <listitem>
              <para>
                Unsorted (order of mailboxes commands)
              </para>
            </listitem>
            <listitem>
              <para>
                Sorted alphabetically
              </para>
            </listitem>
            <listitem>
              <para>
                Sorted by number of new mails
              </para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="intro-sidebar-colors">Color</link>
            </title>
            <listitem>
              <para>
                Sidebar indicators and divider
              </para>
            </listitem>
            <listitem>
              <para>
                Mailboxes depending on their type
              </para>
            </listitem>
            <listitem>
              <para>
                Mailboxes depending on their contents
              </para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>
              <link linkend="sidebar-functions">Key bindings</link>
            </title>
            <listitem>
              <para>
                Hide/Unhide the Sidebar
              </para>
            </listitem>
            <listitem>
              <para>
                Select previous/next mailbox
              </para>
            </listitem>
            <listitem>
              <para>
                Select previous/next mailbox with new mail
              </para>
            </listitem>
            <listitem>
              <para>
                Page up/down through a list of mailboxes
              </para>
            </listitem>
          </itemizedlist>
          <itemizedlist>
            <title>Misc</title>
            <listitem>
              <para>
                <link linkend="intro-sidebar-format">Formatting string for mailbox</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="sidebar-next-new-wrap">Wraparound searching</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="intro-sidebar-abbrev">Flexible mailbox abbreviations</link>
              </para>
            </listitem>
            <listitem>
              <para>
                Support for Unicode mailbox names (UTF-8)
              </para>
            </listitem>
          </itemizedlist>
        </sect3>

        <sect3 id="intro-sidebar-display">
          <title>Display</title>
          <para>
            Everything about the Sidebar can be configured.
          </para>
          <itemizedlist>
            <title>For a quick reference:</title>
            <listitem>
              <para>
                <link linkend="sidebar-variables">Sidebar variables to set</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="sidebar-colors">Sidebar colors to apply</link>
              </para>
            </listitem>
            <listitem>
              <para>
                <link linkend="sidebar-sort">Sidebar sort methods</link>
              </para>
            </listitem>
          </itemizedlist>

          <sect4 id="intro-sidebar-basics">
            <title>Sidebar Basics</title>
            <para>
              The most important variable is
              <literal>$sidebar_visible</literal>. You can set this in your
              <quote>neomuttrc</quote>, or bind a key to the function
              <literal>&lt;sidebar-toggle-visible&gt;</literal>.
            </para>

<screen>
set sidebar_visible                         <emphasis role="comment"># Make the Sidebar visible by default</emphasis>
bind index,pager B sidebar-toggle-visible   <emphasis role="comment"># Use 'B' to switch the Sidebar on and off</emphasis>
</screen>

            <para>
              Next, decide how wide you want the Sidebar to be. 25 characters
              might be enough for the mailbox name and some numbers. Remember,
              you can hide/show the Sidebar at the press of button.
            </para>
            <para>
              Finally, you might want to change the divider character. By
              default, Sidebar draws an ASCII line between it and the Index
              panel. If your terminal supports it, you can use a Unicode
              line-drawing character.
            </para>

<screen>
set sidebar_width = 25                  <emphasis role="comment"># Plenty of space</emphasis>
set sidebar_divider_char = '│'          <emphasis role="comment"># Pretty line-drawing character</emphasis>
</screen>

          </sect4>

          <sect4 id="intro-sidebar-format">
            <title>Sidebar Format String</title>
            <para>
              <literal>$sidebar_format</literal> allows you to customize the
              Sidebar display. For an introduction, read
              <link linkend="index-format">format strings</link> including the
              section about
              <link linkend="formatstrings-conditionals">conditionals</link>.
            </para>
            <para>
              The default value is: <literal>%D%* %n</literal>
            </para>
            <para>
              A more detailed value is:
              <literal>%B%&lt;F? [%F]&gt;%* %&lt;N?%N/&gt;%S</literal>
            </para>
            <itemizedlist>
              <title>Which breaks down as:</title>
              <listitem>
                <para>
                  <literal>%B</literal> – Mailbox name
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>%&lt;F? [%F]&gt;</literal> – If flagged emails
                  <literal>[%F]</literal>, otherwise nothing
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>%*</literal> – Pad with spaces
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>%&lt;N?%N/&gt;</literal> – If new emails
                  <literal>%N/</literal>, otherwise nothing
                </para>
              </listitem>
              <listitem>
                <para>
                  <literal>%S</literal> – Total number of emails
                </para>
              </listitem>
            </itemizedlist>

            <table>
              <title>sidebar_format</title>
              <tgroup cols="3">
                <thead>
                  <row>
                    <entry>Format</entry>
                    <entry>Notes</entry>
                    <entry>Description</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>%B</entry>
                    <entry></entry>
                    <entry>
                      Name of the mailbox
                    </entry>
                  </row>
                  <row>
                    <entry>%d</entry>
                    <entry>* ‡</entry>
                    <entry>
                      Number of deleted messages
                    </entry>
                  </row>
                  <row>
                    <entry>%D</entry>
                    <entry></entry>
                    <entry>
                      Descriptive name of the mailbox
                    </entry>
                  </row>
                  <row>
                    <entry>%F</entry>
                    <entry>* †</entry>
                    <entry>
                      Number of flagged messages in the mailbox
                    </entry>
                  </row>
                  <row>
                    <entry>%L</entry>
                    <entry>* ‡</entry>
                    <entry>
                      Number of messages after limiting
                    </entry>
                  </row>
                  <row>
                    <entry>%n</entry>
                    <entry>*</entry>
                    <entry>
                      If there's new mail, display <quote>N</quote>, otherwise
                      <quote> </quote> (space).
                    </entry>
                  </row>
                  <row>
                    <entry>%N</entry>
                    <entry>* †</entry>
                    <entry>
                      Number of unread messages in the mailbox (seen or unseen)
                    </entry>
                  </row>
                  <row>
                    <entry>%o</entry>
                    <entry>* †</entry>
                    <entry>
                      Number of old messages in the mailbox (unread, but seen)
                    </entry>
                  </row>
                  <row>
                    <entry>%r</entry>
                    <entry>* †</entry>
                    <entry>
                      Number of read messages in the mailbox
                    </entry>
                  </row>
                  <row>
                    <entry>%S</entry>
                    <entry>* †</entry>
                    <entry>
                      Size of mailbox (total number of messages)
                    </entry>
                  </row>
                  <row>
                    <entry>%t</entry>
                    <entry>* ‡</entry>
                    <entry>
                      Number of tagged messages in the mailbox
                    </entry>
                  </row>
                  <row>
                    <entry>%Z</entry>
                    <entry>* †</entry>
                    <entry>
                      Number of new messages in the mailbox (unread, unseen)
                    </entry>
                  </row>
                  <row>
                    <entry>%!</entry>
                    <entry></entry>
                    <entry>
                      <quote>!</quote>: one flagged message; <quote>!!</quote>:
                      two flagged messages; <quote>n!</quote>: n flagged
                      messages (for n &gt; 2). Otherwise prints nothing.
                    </entry>
                  </row>
                  <row>
                    <entry>%&gt;X</entry>
                    <entry></entry>
                    <entry>
                      Right justify the rest of the string and pad with
                      <quote>X</quote>
                    </entry>
                  </row>
                  <row>
                    <entry>%|X</entry>
                    <entry></entry>
                    <entry>
                      Pad to the end of the line with <quote>X</quote>
                    </entry>
                  </row>
                  <row>
                    <entry>%*X</entry>
                    <entry></entry>
                    <entry>
                      Soft-fill with character <quote>X</quote> as pad
                    </entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
            <para>
              * = Can be optionally printed if nonzero
            </para>
            <para>
              † = To use these expandos, you must first:
            </para>
            <screen>set mail_check_stats</screen>
            <para>
              ‡ = Only applicable to the current folder
            </para>
            <para>
              Here are some examples. They show the number of (F)lagged, (N)ew
              and (S)ize.
            </para>

            <table>
              <title>sidebar_format examples</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Format</entry>
                    <entry>Example</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry><literal>%B%&lt;F? [%F]&gt;%* %&lt;N?%N/&gt;%S</literal></entry>
                    <entry><screen>mailbox [F]            N/S </screen></entry>
                  </row>
                  <row>
                    <entry><literal>%B%* %F:%N:%S</literal></entry>
                    <entry><screen>mailbox              F:N:S </screen></entry>
                  </row>
                  <row>
                    <entry><literal>%B %&lt;N?(%N)&gt;%* %S</literal></entry>
                    <entry><screen>mailbox (N)              S </screen></entry>
                  </row>
                  <row>
                    <entry><literal>%B%* %&lt;F?%F/&gt;%N</literal></entry>
                    <entry><screen>mailbox                F/S </screen></entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </sect4>

          <sect4 id="intro-sidebar-abbrev">
            <title>Abbreviating Mailbox Names</title>
            <para>
              <literal>$sidebar_delim_chars</literal> tells Sidebar how to
              split up mailbox paths. For local directories use
              <quote>/</quote>; for IMAP folders use <quote>.</quote>
            </para>

            <sect5 id="intro-sidebar-abbrev-ex1">
              <title>Example 1</title>
              <para>
                This example works well if your mailboxes have unique names
                after the last separator.
              </para>
              <para>
                Add some mailboxes of different depths.
              </para>

<screen>
set folder="~/mail"
mailboxes =fruit/apple          =fruit/banana          =fruit/cherry
mailboxes =water/sea/sicily     =water/sea/archipelago =water/sea/sibuyan
mailboxes =water/ocean/atlantic =water/ocean/pacific   =water/ocean/arctic
</screen>

              <para>
                Shorten the names:
              </para>

<screen>
set sidebar_short_path                  <emphasis role="comment"># Shorten mailbox names (truncate all subdirs)</emphasis>
set sidebar_component_depth=1           <emphasis role="comment"># Shorten mailbox names (truncate 1 subdirs)</emphasis>
set sidebar_delim_chars="/"             <emphasis role="comment"># Delete everything up to the last or Nth / character</emphasis>
</screen>

              <para>
                The screenshot below shows what the Sidebar would look like
                before and after shortening using
                <literal>sidebar_short_path</literal>.
              </para>

<screen>
|fruit/apple                            |apple
|fruit/banana                           |banana
|fruit/cherry                           |cherry
|water/sea/sicily                       |sicily
|water/sea/archipelago                  |archipelago
|water/sea/sibuyan                      |sibuyan
|water/ocean/atlantic                   |atlantic
|water/ocean/pacific                    |pacific
|water/ocean/arctic                     |arctic
</screen>

              <para>
                The screenshot below shows what the Sidebar would look like
                before and after shortening using
                <literal>sidebar_component_depth=1</literal>.
              </para>

<screen>
|fruit/apple                            |apple
|fruit/banana                           |banana
|fruit/cherry                           |cherry
|water/sea/sicily                       |sea/sicily
|water/sea/archipelago                  |sea/archipelago
|water/sea/sibuyan                      |sea/sibuyan
|water/ocean/atlantic                   |ocean/atlantic
|water/ocean/pacific                    |ocean/pacific
|water/ocean/arctic                     |ocean/arctic
</screen>

            </sect5>

            <sect5 id="intro-sidebar-abbrev-ex2">
              <title>Example 2</title>
              <para>
                This example works well if you have lots of mailboxes which are
                arranged in a tree.
              </para>
              <para>
                Add some mailboxes of different depths.
              </para>

<screen>
set folder="~/mail"
mailboxes =fruit
mailboxes =fruit/apple =fruit/banana =fruit/cherry
mailboxes =water
mailboxes =water/sea
mailboxes =water/sea/sicily =water/sea/archipelago =water/sea/sibuyan
mailboxes =water/ocean
mailboxes =water/ocean/atlantic =water/ocean/pacific =water/ocean/arctic
</screen>

              <para>
                Shorten the names:
              </para>

<screen>
set sidebar_short_path                  <emphasis role="comment"># Shorten mailbox names</emphasis>
set sidebar_delim_chars="/"             <emphasis role="comment"># Delete everything up to the last / character</emphasis>
set sidebar_folder_indent               <emphasis role="comment"># Indent folders whose names we've shortened</emphasis>
set sidebar_indent_string="  "          <emphasis role="comment"># Indent with two spaces</emphasis>
</screen>

              <para>
                The screenshot below shows what the Sidebar would look like
                before and after shortening.
              </para>

<screen>
|fruit                                  |fruit
|fruit/apple                            |  apple
|fruit/banana                           |  banana
|fruit/cherry                           |  cherry
|water                                  |water
|water/sea                              |  sea
|water/sea/sicily                       |    sicily
|water/sea/archipelago                  |    archipelago
|water/sea/sibuyan                      |    sibuyan
|water/ocean                            |  ocean
|water/ocean/atlantic                   |    atlantic
|water/ocean/pacific                    |    pacific
|water/ocean/arctic                     |    arctic
</screen>

              <para>
                Sometimes, it will be necessary to add mailboxes, that you
                don't use, to fill in part of the tree. This will trade
                vertical space for horizontal space (but it looks good).
              </para>
            </sect5>
          </sect4>

          <sect4 id="intro-sidebar-limit">
            <title>Limiting the Number of Mailboxes</title>
            <para>
              If you have a lot of mailboxes, sometimes it can be useful to
              hide the ones you aren't using.
              <literal>$sidebar_new_mail_only</literal> tells Sidebar to only
              show mailboxes that contain new, or flagged, email.
            </para>
            <para>
              Sometimes it is useful to only show mailboxes that have mails in
              them, while hiding the rest.
              <literal>$sidebar_non_empty_mailbox_only</literal> tells the
              Sidebar to only show mailboxes with a non-zero number of mails.
            </para>
            <para>
              If you want some mailboxes to be always visible, then use the
              <literal>sidebar_pin</literal> command. It takes a list of
              mailboxes as parameters.
            </para>

<screen>
set sidebar_new_mail_only         <emphasis role="comment"># Only mailboxes with new/flagged email</emphasis>
sidebar_pin +fruit +fruit/apple   <emphasis role="comment"># Always display these two mailboxes</emphasis>
</screen>

          </sect4>
        </sect3>

        <sect3 id="intro-sidebar-colors">
          <title>Colors</title>
          <para>
            Here is a sample color scheme:
          </para>

<screen>
color sidebar_background default black       <emphasis role="comment"># Black background</emphasis>
color sidebar_indicator  default color17     <emphasis role="comment"># Dark blue background</emphasis>
color sidebar_highlight  white   color238    <emphasis role="comment"># Grey background</emphasis>
color sidebar_spool_file yellow  default     <emphasis role="comment"># Yellow</emphasis>
color sidebar_unread     cyan    default     <emphasis role="comment"># Light blue</emphasis>
color sidebar_new        green   default     <emphasis role="comment"># Green</emphasis>
color sidebar_ordinary   default default     <emphasis role="comment"># Default colors</emphasis>
color sidebar_flagged    red     default     <emphasis role="comment"># Red</emphasis>
color sidebar_divider    color8  default     <emphasis role="comment"># Dark grey</emphasis>
</screen>

          <para>
            There is a priority order when coloring Sidebar mailboxes. e.g. If
            a mailbox has new mail it will have the
            <literal>sidebar_new</literal> color, even if it also contains
            flagged mails.
          </para>

          <table id="table-intro-sidebar-colors">
            <title>Sidebar Color Priority</title>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Priority</entry>
                  <entry>Color</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>Highest</entry>
                  <entry><literal>sidebar_indicator</literal></entry>
                  <entry>Mailbox is open</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><literal>sidebar_highlight</literal></entry>
                  <entry>Mailbox is highlighted</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><literal>sidebar_new</literal></entry>
                  <entry>Mailbox contains new mail</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><literal>sidebar_unread</literal></entry>
                  <entry>Mailbox contains unread mail</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><literal>sidebar_flagged</literal></entry>
                  <entry>Mailbox contains flagged mail</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry><literal>sidebar_spool_file</literal></entry>
                  <entry>Mailbox is the spool_file (receives incoming mail)</entry>
                </row>
                <row>
                  <entry>Lowest</entry>
                  <entry><literal>sidebar_ordinary</literal></entry>
                  <entry>Mailbox does not match above</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </sect3>
      </sect2>

      <sect2 id="intro-help">
        <title>Help</title>
        <para>
          The help screen is meant to offer a quick help to the user. It lists
          the current configuration of key bindings and their associated
          commands including a short description, and currently unbound
          functions that still need to be associated with a key binding (or
          alternatively, they can be called via the NeoMutt command prompt).
        </para>
      </sect2>

      <sect2 id="intro-compose">
        <title>Compose Menu</title>
        <para>
          The compose menu features a split screen containing the information
          which really matters before actually sending a message by mail: who
          gets the message as what (recipients and who gets what kind of copy).
          Additionally, users may set security options like deciding whether to
          sign, encrypt or sign and encrypt a message with/for what keys. Also,
          it's used to attach messages, to re-edit any attachment including the
          message itself.
        </para>
      </sect2>

      <sect2 id="intro-alias">
        <title>Alias Menu</title>
        <para>
          The alias menu is used to help users finding the recipients of
          messages. For users who need to contact many people, there's no need
          to remember addresses or names completely because it allows for
          searching, too. The alias mechanism and thus the alias menu also
          features grouping several addresses by a shorter nickname, the actual
          alias, so that users don't have to select each single recipient
          manually. The alias menu is also used to display the result of
          <link linkend="query">external address queries</link>.
        </para>
      </sect2>

      <sect2 id="intro-attach">
        <title>Attachment Menu</title>
        <para>
          As will be later discussed in detail, NeoMutt features a good and
          stable MIME implementation, that is, it supports sending and
          receiving messages of arbitrary MIME types. The attachment menu
          displays a message's structure in detail: what content parts are
          attached to which parent part (which gives a true tree structure),
          which part is of what type and what size. Single parts may saved,
          deleted or modified to offer great and easy access to message's
          internals.
        </para>
      </sect2>
    </sect1>

    <sect1 id="menus">
      <title>Moving Around in Menus</title>
      <para>
        The most important navigation keys common to line- or entry-based menus
        are shown in <xref linkend="tab-keys-nav-line" /> and in
        <xref linkend="tab-keys-nav-page" /> for page-based menus.
      </para>

      <table id="tab-keys-nav-line">
        <title>Most common navigation keys in entry-based menus</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>j or &lt;Down&gt;</entry>
              <entry><literal>&lt;next-entry&gt;</literal></entry>
              <entry>move to the next entry</entry>
            </row>
            <row>
              <entry>k or &lt;Up&gt;</entry>
              <entry><literal>&lt;previous-entry&gt;</literal></entry>
              <entry>move to the previous entry</entry>
            </row>
            <row>
              <entry>z or &lt;PageDn&gt;</entry>
              <entry><literal>&lt;page-down&gt;</literal></entry>
              <entry>go to the next page</entry>
            </row>
            <row>
              <entry>Z or &lt;PageUp&gt;</entry>
              <entry><literal>&lt;page-up&gt;</literal></entry>
              <entry>go to the previous page</entry>
            </row>
            <row>
              <entry>= or &lt;Home&gt;</entry>
              <entry><literal>&lt;first-entry&gt;</literal></entry>
              <entry>jump to the first entry</entry>
            </row>
            <row>
              <entry>* or &lt;End&gt;</entry>
              <entry><literal>&lt;last-entry&gt;</literal></entry>
              <entry>jump to the last entry</entry>
            </row>
            <row>
              <entry>q</entry>
              <entry><literal>&lt;quit&gt;</literal></entry>
              <entry>exit the current menu</entry>
            </row>
            <row>
              <entry>?</entry>
              <entry><literal>&lt;help&gt;</literal></entry>
              <entry>list all keybindings for the current menu</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <table id="tab-keys-nav-page">
        <title>Most common navigation keys in page-based menus</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>Key</entry>
              <entry>Function</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>J or &lt;Return&gt;</entry>
              <entry><literal>&lt;next-line&gt;</literal></entry>
              <entry>scroll down one line</entry>
            </row>
            <row>
              <entry>&lt;Backspace&gt;</entry>
              <entry><literal>&lt;previous-line&gt;</literal></entry>
              <entry>scroll up one line</entry>
            </row>
            <row>
              <entry>K, &lt;Space&gt; or &lt;PageDn&gt;</entry>
              <entry><literal>&lt;next-page&gt;</literal></entry>
              <entry>move to the next page</entry>
            </row>
            <row>
              <entry>- or &lt;PageUp&gt;</entry>
              <entry><literal>&lt;previous-page&gt;</literal></entry>
              <entry>move the previous page</entry>
            </row>
            <row>
              <entry>&lt;Home&gt;</entry>
              <entry><literal>&lt;top&gt;</literal></entry>
              <entry>move to the top</entry>
            </row>
            <row>
              <entry>&lt;End&gt;</entry>
              <entry><literal>&lt;bottom&gt;</literal></entry>
              <entry>move to the bottom</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </sect1>

    <sect1 id="editing">
      <title>Editing Input Fields</title>

      <sect2 id="editing-intro">
        <title>Introduction</title>
        <para>
          NeoMutt has a built-in line editor for inputting text, e.g. email
          addresses or filenames. The keys used to manipulate text input are
          very similar to those of Emacs. See
          <xref linkend="tab-keys-editor" /> for a full reference of available
          functions, their default key bindings, and short descriptions.
        </para>

        <table id="tab-keys-editor">
          <title>Most common line editor keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>^A or &lt;Home&gt;</entry>
                <entry><literal>&lt;bol&gt;</literal></entry>
                <entry>move to the start of the line</entry>
              </row>
              <row>
                <entry>^B or &lt;Left&gt;</entry>
                <entry><literal>&lt;backward-char&gt;</literal></entry>
                <entry>move back one char</entry>
              </row>
              <row>
                <entry>Esc B</entry>
                <entry><literal>&lt;backward-word&gt;</literal></entry>
                <entry>move back one word</entry>
              </row>
              <row>
                <entry>^D or &lt;Delete&gt;</entry>
                <entry><literal>&lt;delete-char&gt;</literal></entry>
                <entry>delete the char under the cursor</entry>
              </row>
              <row>
                <entry>^E or &lt;End&gt;</entry>
                <entry><literal>&lt;eol&gt;</literal></entry>
                <entry>move to the end of the line</entry>
              </row>
              <row>
                <entry>^F or &lt;Right&gt;</entry>
                <entry><literal>&lt;forward-char&gt;</literal></entry>
                <entry>move forward one char</entry>
              </row>
              <row>
                <entry>Esc F</entry>
                <entry><literal>&lt;forward-word&gt;</literal></entry>
                <entry>move forward one word</entry>
              </row>
              <row>
                <entry>&lt;Tab&gt;</entry>
                <entry><literal>&lt;complete&gt;</literal></entry>
                <entry>complete filename, alias, or label</entry>
              </row>
              <row>
                <entry>^T</entry>
                <entry><literal>&lt;complete-query&gt;</literal></entry>
                <entry>complete address with query</entry>
              </row>
              <row>
                <entry>^K</entry>
                <entry><literal>&lt;kill-eol&gt;</literal></entry>
                <entry>delete to the end of the line</entry>
              </row>
              <row>
                <entry>Esc d</entry>
                <entry><literal>&lt;kill-eow&gt;</literal></entry>
                <entry>delete to the end of the word</entry>
              </row>
              <row>
                <entry>^W</entry>
                <entry><literal>&lt;kill-word&gt;</literal></entry>
                <entry>kill the word in front of the cursor</entry>
              </row>
              <row>
                <entry>^U</entry>
                <entry><literal>&lt;kill-line&gt;</literal></entry>
                <entry>delete entire line</entry>
              </row>
              <row>
                <entry>^V</entry>
                <entry><literal>&lt;quote-char&gt;</literal></entry>
                <entry>quote the next typed key</entry>
              </row>
              <row>
                <entry>&lt;Up&gt;</entry>
                <entry><literal>&lt;history-up&gt;</literal></entry>
                <entry>recall previous string from history</entry>
              </row>
              <row>
                <entry>&lt;Down&gt;</entry>
                <entry><literal>&lt;history-down&gt;</literal></entry>
                <entry>recall next string from history</entry>
              </row>
              <row>
                <entry>^R</entry>
                <entry><literal>&lt;history-search&gt;</literal></entry>
                <entry>use current input to search history</entry>
              </row>
              <row>
                <entry>&lt;BackSpace&gt;</entry>
                <entry><literal>&lt;backspace&gt;</literal></entry>
                <entry>kill the char in front of the cursor</entry>
              </row>
              <row>
                <entry>Esc u</entry>
                <entry><literal>&lt;upcase-word&gt;</literal></entry>
                <entry>convert word to upper case</entry>
              </row>
              <row>
                <entry>Esc l</entry>
                <entry><literal>&lt;downcase-word&gt;</literal></entry>
                <entry>convert word to lower case</entry>
              </row>
              <row>
                <entry>Esc c</entry>
                <entry><literal>&lt;capitalize-word&gt;</literal></entry>
                <entry>capitalize the word</entry>
              </row>
              <row>
                <entry>^G</entry>
                <entry>n/a</entry>
                <entry>abort</entry>
              </row>
              <row>
                <entry>&lt;Return&gt;</entry>
                <entry>n/a</entry>
                <entry>finish editing</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          <literal>^G</literal> is the generic <quote>abort</quote> key
          in NeoMutt.  In addition to the line editor, it can also be used
          to abort prompts.  Generally, typing <literal>^G</literal> at a
          confirmation prompt or line editor should abort the entire action.
        </para>
        <para>
          You can remap the <emphasis>editor</emphasis> functions using the
          <link linkend="bind"><command>bind</command></link> command. For
          example, to make the &lt;Delete&gt; key delete the character in front
          of the cursor rather than under, you could use:
        </para>
        <screen>bind editor &lt;delete&gt; backspace</screen>
      </sect2>

      <sect2 id="editing-history">
        <title>History</title>
        <para>
          NeoMutt maintains a history for the built-in editor. The number of
          items is controlled by the <link linkend="history">$history</link>
          variable and can be made persistent using an external file specified
          using <link linkend="history-file">$history_file</link> and
          <link linkend="save-history">$save_history</link>. You may cycle through
          them at an editor prompt by using the
          <literal>&lt;history-up&gt;</literal> and/or
          <literal>&lt;history-down&gt;</literal> commands. NeoMutt will
          remember the currently entered text as you cycle through history, and
          will wrap around to the initial entry line.
        </para>
        <para>
          NeoMutt maintains several distinct history lists, one for each of the
          following categories:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <literal>.neomuttrc</literal> commands
            </para>
          </listitem>
          <listitem>
            <para>
              addresses and aliases
            </para>
          </listitem>
          <listitem>
            <para>
              shell commands
            </para>
          </listitem>
          <listitem>
            <para>
              mailboxes
            </para>
          </listitem>
          <listitem>
            <para>
              filenames
            </para>
          </listitem>
          <listitem>
            <para>
              patterns
            </para>
          </listitem>
          <listitem>
            <para>
              everything else
            </para>
          </listitem>
        </itemizedlist>
        <para>
          NeoMutt automatically filters out consecutively repeated items from
          the history. If
          <link linkend="history-remove-dups">$history_remove_dups</link> is
          set, all repeated items are removed from the history. It also mimics
          the behavior of some shells by ignoring items starting with a space.
          The latter feature can be useful in macros to not clobber the
          history's valuable entries with unwanted entries.
        </para>
      </sect2>
    </sect1>

    <sect1 id="reading">
      <title>Reading Mail</title>
      <para>
        Similar to many other mail clients, there are two modes in which mail
        is read in NeoMutt. The first is a list of messages in the mailbox,
        which is called the <quote>index</quote> menu in NeoMutt. The second
        mode is the display of the message contents. This is called the
        <quote>pager.</quote>
      </para>
      <para>
        The next few sections describe the functions provided in each of these
        modes.
      </para>

      <sect2 id="index-menu">
        <title>The Message Index</title>
        <para>
          Common keys used to navigate through and manage messages in the index
          are shown in <xref linkend="tab-key-index" />. How messages are
          presented in the index menu can be customized using the
          <link linkend="index-format">$index_format</link> variable.
        </para>

        <table id="tab-key-index">
          <title>Most common message index keys</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>c</entry>
                <entry>change to a different mailbox</entry>
              </row>
              <row>
                <entry>Esc c</entry>
                <entry>change to a folder in read-only mode</entry>
              </row>
              <row>
                <entry>C</entry>
                <entry>copy the current message to another mailbox</entry>
              </row>
              <row>
                <entry>Esc C</entry>
                <entry>decode a message and copy it to a folder</entry>
              </row>
              <row>
                <entry>Esc s</entry>
                <entry>decode a message and save it to a folder</entry>
              </row>
              <row>
                <entry>D</entry>
                <entry>delete messages matching a pattern</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>delete the current message</entry>
              </row>
              <row>
                <entry>F</entry>
                <entry>mark as important</entry>
              </row>
              <row>
                <entry>l</entry>
                <entry>show messages matching a pattern</entry>
              </row>
              <row>
                <entry>N</entry>
                <entry>mark message as new</entry>
              </row>
              <row>
                <entry>o</entry>
                <entry>change the current sort method</entry>
              </row>
              <row>
                <entry>O</entry>
                <entry>reverse sort the mailbox</entry>
              </row>
              <row>
                <entry>q</entry>
                <entry>save changes and exit</entry>
              </row>
              <row>
                <entry>s</entry>
                <entry>save-message</entry>
              </row>
              <row>
                <entry>T</entry>
                <entry>tag messages matching a pattern</entry>
              </row>
              <row>
                <entry>t</entry>
                <entry>toggle the tag on a message</entry>
              </row>
              <row>
                <entry>Esc t</entry>
                <entry>toggle tag on entire message thread</entry>
              </row>
              <row>
                <entry>U</entry>
                <entry>undelete messages matching a pattern</entry>
              </row>
              <row>
                <entry>u</entry>
                <entry>undelete-message</entry>
              </row>
              <row>
                <entry>v</entry>
                <entry>view-attachments</entry>
              </row>
              <row>
                <entry>x</entry>
                <entry>abort changes and exit</entry>
              </row>
              <row>
                <entry>&lt;Return&gt;</entry>
                <entry>display-message</entry>
              </row>
              <row>
                <entry>&lt;Tab&gt;</entry>
                <entry>jump to the next new or unread message</entry>
              </row>
              <row>
                <entry>@</entry>
                <entry>show the author's full e-mail address</entry>
              </row>
              <row>
                <entry>$</entry>
                <entry>save changes to mailbox</entry>
              </row>
              <row>
                <entry>/</entry>
                <entry>search</entry>
              </row>
              <row>
                <entry>Esc /</entry>
                <entry>search-reverse</entry>
              </row>
              <row>
                <entry>^L</entry>
                <entry>clear and redraw the screen</entry>
              </row>
              <row>
                <entry>^T</entry>
                <entry>untag messages matching a pattern</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          In addition to who sent the message and the subject, a short summary
          of the disposition of each message is printed beside the message
          number. Zero or more of the <quote>flags</quote> in
          <xref linkend="tab-msg-status-flags" /> may appear, some of which can
          be turned on or off using these functions:
          <literal>&lt;set-flag&gt;</literal> and
          <literal>&lt;clear-flag&gt;</literal> bound by default to
          <quote>w</quote> and <quote>W</quote> respectively.
        </para>
        <para>
          Furthermore, the flags in <xref linkend="tab-msg-recip-flags" />
          reflect who the message is addressed to. They can be customized with
          the <link linkend="to-chars">$to_chars</link> variable.
        </para>

        <table id="tab-msg-status-flags">
          <title>Message status flags</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Flag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>D</entry>
                <entry>message is deleted (is marked for deletion)</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>message has attachments marked for deletion</entry>
              </row>
              <row>
                <entry>K</entry>
                <entry>contains a PGP public key</entry>
              </row>
              <row>
                <entry>N</entry>
                <entry>message is new</entry>
              </row>
              <row>
                <entry>O</entry>
                <entry>message is old</entry>
              </row>
              <row>
                <entry>P</entry>
                <entry>message is PGP encrypted</entry>
              </row>
              <row>
                <entry>r</entry>
                <entry>message has been replied to</entry>
              </row>
              <row>
                <entry>S</entry>
                <entry>message is signed, and the signature is successfully
                verified</entry>
              </row>
              <row>
                <entry>s</entry>
                <entry>message is signed</entry>
              </row>
              <row>
                <entry>!</entry>
                <entry>message is flagged</entry>
              </row>
              <row>
                <entry>*</entry>
                <entry>message is tagged</entry>
              </row>
              <row>
                <entry>n</entry>
                <entry>thread contains new messages (only if collapsed)</entry>
              </row>
              <row>
                <entry>o</entry>
                <entry>thread contains old messages (only if collapsed)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table id="tab-msg-recip-flags">
          <title>Message recipient flags</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Flag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>+</entry>
                <entry>message is to you and you only</entry>
              </row>
              <row>
                <entry>T</entry>
                <entry>message is to you, but also to or CC'ed to
                others</entry>
              </row>
              <row>
                <entry>C</entry>
                <entry>message is CC'ed to you</entry>
              </row>
              <row>
                <entry>F</entry>
                <entry>message is from you</entry>
              </row>
              <row>
                <entry>L</entry>
                <entry>message is sent to a subscribed mailing list</entry>
              </row>
              <row>
                <entry>R</entry>
                <entry>message has your address in the Reply-To field</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="pager-menu">
        <title>The Pager</title>
        <para>
          By default, NeoMutt uses its built-in pager to display the contents
          of messages (an external pager such as <literal>less(1)</literal> can
          be configured, see <link linkend="pager">$pager</link> variable). The
          pager is very similar to the Unix program <literal>less(1)</literal>
          though not nearly as featureful.
        </para>

        <table id="tab-key-pager">
          <title>Most common pager keys</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>&lt;Return&gt;</entry>
                <entry>go down one line</entry>
              </row>
              <row>
                <entry>&lt;Space&gt;</entry>
                <entry>display the next page (or next message if at the end of
                a message)</entry>
              </row>
              <row>
                <entry>-</entry>
                <entry>go back to the previous page</entry>
              </row>
              <row>
                <entry>n</entry>
                <entry>search for next match</entry>
              </row>
              <row>
                <entry>S</entry>
                <entry>skip beyond quoted text</entry>
              </row>
              <row>
                <entry>T</entry>
                <entry>toggle display of quoted text</entry>
              </row>
              <row>
                <entry>?</entry>
                <entry>show keybindings</entry>
              </row>
              <row>
                <entry>/</entry>
                <entry>regular expression search</entry>
              </row>
              <row>
                <entry>Esc /</entry>
                <entry>backward regular expression search</entry>
              </row>
              <row>
                <entry>\</entry>
                <entry>toggle highlighting of search matches</entry>
              </row>
              <row>
                <entry>^</entry>
                <entry>jump to the top of the message</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          In addition to key bindings in <xref linkend="tab-key-pager" />, many
          of the functions from the index menu are also available in the pager,
          such as <literal>&lt;delete-message&gt;</literal> or
          <literal>&lt;copy-message&gt;</literal> (this is one advantage over
          using an external pager to view messages).
        </para>
        <para>
          Also, the internal pager supports a couple other advanced features.
          For one, you can set <link linkend="pager-read-delay">$pager_read_delay</link>
          to operate in a preview mode, where new messages are not marked
          read unless you remain on the message for a certain length of time.
          Additionally, it will accept and translate the <quote>standard</quote>
          nroff sequences for bold and underline. These sequences are a series
          of either the letter, backspace (<quote>^H</quote>), the letter
          again for bold or the letter, backspace, <quote>_</quote> for
          denoting underline. NeoMutt will attempt to display these in bold and
          underline respectively if your terminal supports them. If not, you
          can use the bold and underline <link linkend="color">color</link>
          objects to specify a <command>color</command> or mono attribute for
          them.
        </para>
        <para>
          Additionally, the internal pager supports the ANSI escape sequences
          for character attributes. NeoMutt translates them into the correct
          color and character settings. The sequences NeoMutt supports are:
        </para>

<screen>
\e[ Ps; Ps; ...  Ps;m
</screen>

        <para>
          where <emphasis>Ps</emphasis> can be one of the codes shown in
          <xref linkend="tab-ansi-esc" />.
        </para>

        <table id="tab-ansi-esc">
          <title>ANSI escape sequences</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Escape code</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>0</entry>
                <entry>
                  All attributes off
                </entry>
              </row>
              <row>
                <entry>1</entry>
                <entry>
                  Bold on
                </entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>
                  Italics on
                </entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>
                  Underline on
                </entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>
                  Blink on
                </entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>
                  Reverse video on
                </entry>
              </row>
              <row>
                <entry>3 <emphasis>&lt;color&gt;</emphasis></entry>
                <entry>
                  Foreground color is <emphasis>&lt;color&gt;</emphasis> (see
                  <xref linkend="tab-color" />)
                </entry>
              </row>
              <row>
                <entry>4 <emphasis>&lt;color&gt;</emphasis></entry>
                <entry>
                  Background color is <emphasis>&lt;color&gt;</emphasis> (see
                  <xref linkend="tab-color" />)
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table id="tab-color">
          <title>Color sequences</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Color code</entry>
                <entry>Color</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>0</entry>
                <entry>Black</entry>
              </row>
              <row>
                <entry>1</entry>
                <entry>Red</entry>
              </row>
              <row>
                <entry>2</entry>
                <entry>Green</entry>
              </row>
              <row>
                <entry>3</entry>
                <entry>Yellow</entry>
              </row>
              <row>
                <entry>4</entry>
                <entry>Blue</entry>
              </row>
              <row>
                <entry>5</entry>
                <entry>Magenta</entry>
              </row>
              <row>
                <entry>6</entry>
                <entry>Cyan</entry>
              </row>
              <row>
                <entry>7</entry>
                <entry>White</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          NeoMutt uses these attributes for handling
          <literal>text/enriched</literal> messages, and they can also be used
          by an external <link linkend="auto-view">autoview</link> script for
          highlighting purposes.
        </para>
        <note>
          <para>
            If you change the colors for your display, for example by changing
            the color associated with color2 for your xterm, then that color
            will be used instead of green.
          </para>
        </note>
        <note>
          <para>
            Note that the search commands in the pager take regular
            expressions, which are not quite the same as the more complex
            <link linkend="patterns">patterns</link> used by the search command
            in the index. This is because patterns are used to select messages
            by criteria whereas the pager already displays a selected message.
          </para>
        </note>
      </sect2>

      <sect2 id="threads">
        <title>Threaded Mode</title>
        <para>
          So-called <quote>threads</quote> provide a hierarchy of messages
          where replies are linked to their parent message(s). This
          organizational form is extremely useful in mailing lists where
          different parts of the discussion diverge. NeoMutt displays threads
          as a tree structure.
        </para>
        <para>
          In NeoMutt, when a mailbox is <link linkend="sort">sorted</link> by
          <emphasis>threads</emphasis>, there are a few additional functions
          available in the <emphasis>index</emphasis> and
          <emphasis>pager</emphasis> modes as shown in
          <xref linkend="tab-key-threads" />.
        </para>

        <table id="tab-key-threads">
          <title>Most common thread mode keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>^D</entry>
                <entry><literal>&lt;delete-thread&gt;</literal></entry>
                <entry>delete all messages in the current thread</entry>
              </row>
              <row>
                <entry>^U</entry>
                <entry><literal>&lt;undelete-thread&gt;</literal></entry>
                <entry>undelete all messages in the current thread</entry>
              </row>
              <row>
                <entry>^N</entry>
                <entry><literal>&lt;next-thread&gt;</literal></entry>
                <entry>jump to the start of the next thread</entry>
              </row>
              <row>
                <entry>^P</entry>
                <entry><literal>&lt;previous-thread&gt;</literal></entry>
                <entry>jump to the start of the previous thread</entry>
              </row>
              <row>
                <entry>^R</entry>
                <entry><literal>&lt;read-thread&gt;</literal></entry>
                <entry>mark the current thread as read</entry>
              </row>
              <row>
                <entry>Esc d</entry>
                <entry><literal>&lt;delete-subthread&gt;</literal></entry>
                <entry>delete all messages in the current subthread</entry>
              </row>
              <row>
                <entry>Esc u</entry>
                <entry><literal>&lt;undelete-subthread&gt;</literal></entry>
                <entry>undelete all messages in the current subthread</entry>
              </row>
              <row>
                <entry>Esc n</entry>
                <entry><literal>&lt;next-subthread&gt;</literal></entry>
                <entry>jump to the start of the next subthread</entry>
              </row>
              <row>
                <entry>Esc p</entry>
                <entry><literal>&lt;previous-subthread&gt;</literal></entry>
                <entry>jump to the start of the previous subthread</entry>
              </row>
              <row>
                <entry>Esc r</entry>
                <entry><literal>&lt;read-subthread&gt;</literal></entry>
                <entry>mark the current subthread as read</entry>
              </row>
              <row>
                <entry>Esc t</entry>
                <entry><literal>&lt;tag-thread&gt;</literal></entry>
                <entry>toggle the tag on the current thread</entry>
              </row>
              <row>
                <entry>Esc v</entry>
                <entry><literal>&lt;collapse-thread&gt;</literal></entry>
                <entry>toggle collapse for the current thread</entry>
              </row>
              <row>
                <entry>Esc V</entry>
                <entry><literal>&lt;collapse-all&gt;</literal></entry>
                <entry>toggle collapse for all threads</entry>
              </row>
              <row>
                <entry>P</entry>
                <entry><literal>&lt;parent-message&gt;</literal></entry>
                <entry>jump to parent message in thread</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
          In the <emphasis>index</emphasis>, the subject of threaded children
          messages will be prepended with thread tree characters. By default,
          the subject itself will not be duplicated unless
          <link linkend="hide-thread-subject">$hide_thread_subject</link> is
          unset.  Special characters will be added to the thread tree as
          detailed in <xref linkend="tab-thread-chars" />.
        </para>
        <table id="tab-thread-chars">
          <title>Special Thread Characters</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Character</entry>
                <entry>Description</entry>
                <entry>Notes</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>&amp;</entry>
                <entry>hidden message</entry>
                <entry>see
                <link linkend="hide-limited">$hide_limited</link> and
                <link linkend="hide-top-limited">$hide_top_limited</link></entry>
              </row>
              <row>
                <entry>?</entry>
                <entry>missing message</entry>
                <entry>see
                <link linkend="hide-missing">$hide_missing</link> and
                <link linkend="hide-top-missing">$hide_top_missing</link></entry>
              </row>
              <row>
                <entry>*</entry>
                <entry>pseudo thread</entry>
                <entry>see
                <link linkend="strict-threads">$strict_threads</link>; not displayed
                when <link linkend="narrow-tree">$narrow_tree</link> is set</entry>
              </row>
              <row>
                <entry>=</entry>
                <entry>duplicate thread</entry>
                <entry>see
                <link linkend="duplicate-threads">$duplicate_threads</link>; not
                displayed when
                <link linkend="narrow-tree">$narrow_tree</link> is set</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
          Collapsing a thread displays only the first message in the thread and
          hides the others. This is useful when threads contain so many
          messages that you can only see a handful of threads on the screen.
          See %M in <link linkend="index-format">$index_format</link>. For
          example, you could use <literal>%&lt;M?(#%03M)&amp;(%4l)&gt;</literal> in
          <link linkend="index-format">$index_format</link> to optionally display
          the number of hidden messages if the thread is collapsed. The
          <literal>%&lt;char?if-part&amp;else-part&gt;</literal>
          syntax is explained in detail in
          <link linkend="formatstrings-conditionals">format string conditionals</link>.
        </para>
        <para>
          Technically, every reply should contain a list of its parent messages
          in the thread tree, but not all do. In these cases, NeoMutt groups
          them by subject which can be controlled using the
          <link linkend="strict-threads">$strict_threads</link> variable.
        </para>
      </sect2>

      <sect2 id="reading-misc">
        <title>Miscellaneous Functions</title>
        <para>
          In addition, the <emphasis>index</emphasis> and
          <emphasis>pager</emphasis> menus have these interesting functions:
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <literal>&lt;check-stats&gt;</literal>
              <anchor id="check-stats" />
            </term>
            <listitem>
              <para>
                Calculate statistics for all monitored mailboxes declared using
                the <command>mailboxes</command> command. It will calculate
                statistics despite <link linkend="mail-check-stats">$mail_check_stats</link>
                being unset.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;create-alias&gt;</literal> (default: a)
              <anchor id="create-alias" />
            </term>
            <listitem>
              <para>
                Creates a new alias based upon the current message (or prompts
                for a new one). Once editing is complete, an
                <link linkend="alias"><command>alias</command></link> command
                is added to the file specified by the
                <link linkend="alias-file">$alias_file</link> variable for
                future use
              </para>
              <note>
                <para>
                  NeoMutt does not read the
                  <link linkend="alias-file">$alias_file</link> upon startup so
                  you must explicitly
                  <link linkend="source"><command>source</command></link> the
                  file.
                </para>
              </note>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;check-traditional-pgp&gt;</literal> (default: Esc P)
              <anchor id="check-traditional-pgp" />
            </term>
            <listitem>
              <para>
                This function will search the current message for content
                signed or encrypted with PGP the <quote>traditional</quote>
                way, that is, without proper MIME tagging. Technically, this
                function will temporarily change the MIME content types of the
                body parts containing PGP data; this is similar to the
                <link linkend="edit-type"><literal>&lt;edit-type&gt;</literal></link>
                function's effect.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;edit-raw-message&gt;</literal>
              <anchor id="edit-raw-message" />
            </term>
            <listitem>
              <para>
                This command (available in the index and pager) allows you to
                edit the raw current message as it's present in the mail
                folder. After you have finished editing, the changed message
                will be appended to the current folder, and the original
                message will be marked for deletion; if the message is
                unchanged it won't be replaced.
              </para>
              <para>
                <link linkend="edit"><literal>&lt;edit&gt;</literal></link> is
                a synonym of this for backwards compatibility.
              </para>
              <para>
                See also
                <link linkend="edit-or-view-raw-message"><literal>&lt;edit-or-view-raw-message&gt;</literal></link>,
                <link linkend="view-raw-message"><literal>&lt;view-raw-message&gt;</literal></link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;edit&gt;</literal>
              <anchor id="edit" />
            </term>
            <listitem>
              <para>
                Alias of
                <link linkend="edit-raw-message"><literal>&lt;edit-raw-message&gt;</literal></link>
                for backwards compatibility.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;edit-or-view-raw-message&gt;</literal> (default: e)
              <anchor id="edit-or-view-raw-message" />
            </term>
            <listitem>
              <para>
                This command (available in the index and pager) is the same as
                <link linkend="edit-raw-message"><literal>&lt;edit-raw-message&gt;</literal></link>
                if the mailbox is writable, otherwise it the same as
                <link linkend="view-raw-message"><literal>&lt;view-raw-message&gt;</literal></link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;edit-type&gt;</literal> (default: ^E on the
              attachment menu, and in the pager and index menus; ^T on the
              compose menu)
              <anchor id="edit-type" />
            </term>
            <listitem>
              <para>
                This command is used to temporarily edit an attachment's
                content type to fix, for instance, bogus character set
                parameters. When invoked from the index or from the pager,
                you'll have the opportunity to edit the top-level attachment's
                content type. On the
                <link linkend="attach-menu">attachment menu</link>, you can
                change any attachment's content type. These changes are not
                persistent, and get lost upon changing folders.
              </para>
              <para>
                Note that this command is also available on the
                <link linkend="compose-menu">compose menu</link>. There, it's
                used to fine-tune the properties of attachments you are going
                to send.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;enter-command&gt;</literal> (default:
              <quote>:</quote>)
              <anchor id="enter-command" />
            </term>
            <listitem>
              <para>
                This command is used to execute any command you would normally
                put in a configuration file. A common use is to check the
                settings of variables, or in conjunction with
                <link linkend="macros">macros</link> to change settings on the
                fly.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;extract-keys&gt;</literal> (default: ^K)
              <anchor id="extract-keys" />
            </term>
            <listitem>
              <para>
                This command extracts PGP public keys from the current or
                tagged message(s) and adds them to your PGP public key ring.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;forget-passphrase&gt;</literal> (default: ^F)
              <anchor id="forget-passphrase" />
            </term>
            <listitem>
              <para>
                This command wipes the passphrase(s) from memory. It is useful,
                if you misspelled the passphrase.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;list-reply&gt;</literal> (default: L)
              <anchor id="list-reply" />
            </term>
            <listitem>
              <para>
                Reply to the current or tagged message(s) by extracting any
                addresses which match the regular expressions given by the
                <link linkend="lists"><command>lists</command></link> or
                <link linkend="lists"><command>subscribe</command></link>
                commands, but also honor any
                <literal>Mail-Followup-To</literal> header(s) if the
                <link linkend="honor-followup-to">$honor_followup_to</link>
                configuration variable is set. In addition, the
                <literal>List-Post</literal> header field is examined for
                <literal>mailto:</literal> URLs specifying a mailing list
                address. Using this when replying to messages posted to
                mailing lists helps avoid duplicate copies being sent to the
                author of the message you are replying to.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;list-subscribe&gt;</literal>
              <anchor id="list-subscribe" />
            </term>
            <listitem>
              <para>
                Send an email to the address specified in the List-Subscribe
                header as specified in RFC2369.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;list-unsubscribe&gt;</literal>
              <anchor id="list-unsubscribe" />
            </term>
            <listitem>
              <para>
                Send an email to the address specified in the List-Unsubscribe
                header as specified in RFC2369.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;pipe-message&gt;</literal> (default: |)
              <anchor id="pipe-message" />
            </term>
            <listitem>
              <para>
                Asks for an external Unix command and pipes the current or
                tagged message(s) to it. The variables
                <link linkend="pipe-decode">$pipe_decode</link>,
                <link linkend="pipe-decode-weed">$pipe_decode_weed</link>,
                <link linkend="pipe-split">$pipe_split</link>,
                <link linkend="pipe-sep">$pipe_sep</link> and
                <link linkend="wait-key">$wait_key</link> control the exact
                behavior of this function.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;resend-message&gt;</literal> (default: Esc e)
              <anchor id="resend-message" />
            </term>
            <listitem>
              <para>
                NeoMutt takes the current message as a template for a new
                message. This function is best described as "recall from
                arbitrary folders". It can conveniently be used to forward MIME
                messages while preserving the original mail structure. Note
                that the amount of headers included here depends on the value
                of the <link linkend="weed">$weed</link> variable.
              </para>
              <para>
                This function is also available from the attachment menu. You
                can use this to easily resend a message which was included with
                a bounce message as a <literal>message/rfc822</literal> body
                part.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;shell-escape&gt;</literal> (default: !)
              <anchor id="shell-escape" />
            </term>
            <listitem>
              <para>
                Asks for an external Unix command and executes it. The
                <link linkend="wait-key">$wait_key</link> can be used to
                control whether NeoMutt will wait for a key to be pressed when
                the command returns (presumably to let the user read the output
                of the command), based on the return status of the named
                command. If no command is given, an interactive shell is
                executed.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;skip-headers&gt;</literal> (default: H)
              <anchor id="skip-headers"/>
            </term>
            <listitem>
              <para>
                This function will skip to the first line of the body,
                past the headers of the current message, regardless of
                current position.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;view-raw-message&gt;</literal>
              <anchor id="view-raw-message" />
            </term>
            <listitem>
              <para>
                This command (available in the index and pager) opens the raw
                message read-only in an editor. This command does not allow
                editing the message, use
                <link linkend="edit-raw-message"><literal>&lt;edit-raw-message&gt;</literal></link>
                for this.
              </para>
              <para>
                See also
                <link linkend="edit-raw-message"><literal>&lt;edit-raw-message&gt;</literal></link>,
                <link linkend="edit-or-view-raw-message"><literal>&lt;edit-or-view-raw-message&gt;</literal></link>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;skip-quoted&gt;</literal> (default: S)
              <anchor id="skip-quoted" />
            </term>
            <listitem>
              <para>
                This function will make the internal pager go forward
                to the next segment of non-quoted body text (whether
                the first line of the body after headers, or following
                a line of quoted text), or print a message if no
                further unquoted text can be found.
              </para>
              <para>
                The variable
                <link linkend="pager-skip-quoted-context">$pager_skip_quoted_context</link>
                can be used to show some quoted context prior to the
                selected line.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>&lt;toggle-quoted&gt;</literal><anchor id="toggle-quoted"/>
              (default: T)
            </term>
            <listitem>
              <para>
                The pager uses the <link linkend="quote-regex">$quote_regex</link>
                variable to detect quoted text when displaying the body of the message.
                This function toggles the display of the quoted material in the message.
                It is particularly useful when being interested in just the response and
                there is a large amount of quoted text in the way.
              </para>
              <para>
                The variable
                <link linkend="toggle-quoted-show-levels">$toggle_quoted_show_levels</link>
                can be used to show some context by continuing to show that number of levels
                rather than hiding all quoted levels.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>
    </sect1>

    <sect1 id="sending">
      <title>Sending Mail</title>

      <sect2 id="sending-intro">
        <title>Introduction</title>
        <para>
          The bindings shown in
          <xref linkend="tab-key-send" /> are available in the
          <emphasis>index</emphasis> and <emphasis>pager</emphasis> to start
          a new message.
        </para>

        <table id="tab-key-send">
          <title>Most common mail sending keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>m</entry>
                <entry><literal>&lt;mail&gt;</literal></entry>
                <entry>compose a new message</entry>
              </row>
              <row>
                <entry>r</entry>
                <entry><literal>&lt;reply&gt;</literal></entry>
                <entry>reply to sender</entry>
              </row>
              <row>
                <entry>g</entry>
                <entry><literal>&lt;group-reply&gt;</literal></entry>
                <entry>reply to all recipients</entry>
              </row>
              <row>
                <entry></entry>
                <entry><literal>&lt;group-chat-reply&gt;</literal></entry>
                <entry>reply to all recipients preserving To/Cc</entry>
              </row>
              <row>
                <entry>L</entry>
                <entry><literal>&lt;list-reply&gt;</literal></entry>
                <entry>reply to a mailing list</entry>
              </row>
              <row>
                <entry>L</entry>
                <entry><literal>&lt;list-subscribe&gt;</literal></entry>
                <entry>send a subscription email to a mailing list</entry>
              </row>
              <row>
                <entry>L</entry>
                <entry><literal>&lt;list-unsubscribe&gt;</literal></entry>
                <entry>send an unsubscription email to a mailing list</entry>
              </row>
              <row>
                <entry>f</entry>
                <entry><literal>&lt;forward&gt;</literal></entry>
                <entry>forward message</entry>
              </row>
              <row>
                <entry>b</entry>
                <entry><literal>&lt;bounce&gt;</literal></entry>
                <entry>bounce (remail) message</entry>
              </row>
              <row>
                <entry>Esc k</entry>
                <entry><literal>&lt;mail-key&gt;</literal></entry>
                <entry>mail a PGP public key to someone</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          <emphasis>Bouncing</emphasis> a message sends the message as-is to
          the recipient you specify. <emphasis>Forwarding</emphasis> a message
          allows you to add comments or modify the message you are forwarding.
          These items are discussed in greater detail in the next section
          <quote><link linkend="forwarding-mail">Forwarding and Bouncing Mail</link></quote>.
        </para>
        <para>
          NeoMutt will then enter the <emphasis>compose</emphasis> menu and
          prompt you for the recipients to place on the <quote>To:</quote>
          header field when you hit <literal>m</literal> to start a new
          message. Next, it will ask you for the <quote>Subject:</quote> field
          for the message, providing a default if you are replying to or
          forwarding a message. You again have the chance to adjust recipients,
          subject, and security settings right before actually sending the
          message. See also
          <link linkend="ask-cc">$ask_cc</link>,
          <link linkend="ask-bcc">$ask_bcc</link>,
          <link linkend="auto-edit">$auto_edit</link>,
          <link linkend="bounce">$bounce</link>,
          <link linkend="fast-reply">$fast_reply</link>, and
          <link linkend="include">$include</link> for changing how and if
          NeoMutt asks these questions.
        </para>
        <para>
          When replying, NeoMutt fills these fields with proper values
          depending on the reply type. The types of replying supported are:
        </para>
        <variablelist>
          <varlistentry>
            <term>Simple reply</term>
            <listitem>
              <para>
                Reply to the author directly.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Group reply</term>
            <listitem>
              <para>
                Reply to the author; cc all other recipients; consults
                <link linkend="alternates"><command>alternates</command></link>
                and excludes you.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Group Chat reply</term>
            <listitem>
              <para>
                Reply to the author and other recipients in the To list;
                cc other recipients in the Cc list; consults
                <link linkend="alternates"><command>alternates</command></link>
                and excludes you.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>List reply</term>
            <listitem>
              <para>
                Reply to all mailing list addresses found, either specified via
                configuration or auto-detected. See <xref linkend="lists" />
                for details.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          After getting recipients for new messages, forwards or replies,
          NeoMutt will then automatically start your
          <link linkend="editor">$editor</link> on the message body. If the
          <link linkend="edit-headers">$edit_headers</link> variable is set,
          the headers will be at the top of the message in your editor; the
          message body should start on a new line after the existing blank line
          at the end of headers. Any messages you are replying to will be added
          in sort order to the message, with appropriate
          <link linkend="attribution-intro">$attribution_intro</link>,
          <link linkend="indent-string">$indent_string</link> and
          <link linkend="attribution-trailer">$attribution_trailer</link>. When
          forwarding a message, if the
          <link linkend="mime-forward">$mime_forward</link> variable is unset,
          a copy of the forwarded message will be included. If you have
          specified a <link linkend="signature">$signature</link>, it will be
          appended to the message.
        </para>
        <para>
          Once you have finished editing the body of your mail message, you are
          returned to the <emphasis>compose</emphasis> menu providing the
          functions shown in <xref linkend="tab-func-compose" /> to modify,
          send or postpone the message.
        </para>

        <table id="tab-func-compose">
          <title>Most common compose menu keys</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>a</entry>
                <entry><literal>&lt;attach-file&gt;</literal></entry>
                <entry>attach a file</entry>
              </row>
              <row>
                <entry>A</entry>
                <entry><literal>&lt;attach-message&gt;</literal></entry>
                <entry>attach message(s) to the message</entry>
              </row>
              <row>
                <entry>Esc k</entry>
                <entry><literal>&lt;attach-key&gt;</literal></entry>
                <entry>attach a PGP public key</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry><literal>&lt;edit-description&gt;</literal></entry>
                <entry>edit description on attachment</entry>
              </row>
              <row>
                <entry>D</entry>
                <entry><literal>&lt;detach-file&gt;</literal></entry>
                <entry>detach a file</entry>
              </row>
              <row>
                <entry>t</entry>
                <entry><literal>&lt;edit-to&gt;</literal></entry>
                <entry>edit the To field</entry>
              </row>
              <row>
                <entry>Esc f</entry>
                <entry><literal>&lt;edit-from&gt;</literal></entry>
                <entry>edit the From field</entry>
              </row>
              <row>
                <entry>r</entry>
                <entry><literal>&lt;edit-reply-to&gt;</literal></entry>
                <entry>edit the Reply-To field</entry>
              </row>
              <row>
                <entry>c</entry>
                <entry><literal>&lt;edit-cc&gt;</literal></entry>
                <entry>edit the Cc field</entry>
              </row>
              <row>
                <entry>b</entry>
                <entry><literal>&lt;edit-bcc&gt;</literal></entry>
                <entry>edit the Bcc field</entry>
              </row>
              <row>
                <entry>y</entry>
                <entry><literal>&lt;send-message&gt;</literal></entry>
                <entry>send the message</entry>
              </row>
              <row>
                <entry>s</entry>
                <entry><literal>&lt;edit-subject&gt;</literal></entry>
                <entry>edit the Subject</entry>
              </row>
              <row>
                <entry>S</entry>
                <entry><literal>&lt;smime-menu&gt;</literal></entry>
                <entry>select S/MIME options</entry>
              </row>
              <row>
                <entry>f</entry>
                <entry><literal>&lt;edit-fcc&gt;</literal></entry>
                <entry>specify an
                <quote>Fcc</quote> mailbox</entry>
              </row>
              <row>
                <entry>p</entry>
                <entry><literal>&lt;pgp-menu&gt;</literal></entry>
                <entry>select PGP options</entry>
              </row>
              <row>
                <entry>P</entry>
                <entry><literal>&lt;postpone-message&gt;</literal></entry>
                <entry>postpone this message until later</entry>
              </row>
              <row>
                <entry>q</entry>
                <entry><literal>&lt;quit&gt;</literal></entry>
                <entry>quit (abort) sending the message</entry>
              </row>
              <row>
                <entry>w</entry>
                <entry><literal>&lt;write-fcc&gt;</literal></entry>
                <entry>write the message to a folder</entry>
              </row>
              <row>
                <entry>i</entry>
                <entry><literal>&lt;ispell&gt;</literal></entry>
                <entry>check spelling (if available on your system)</entry>
              </row>
              <row>
                <entry>^F</entry>
                <entry><literal>&lt;forget-passphrase&gt;</literal></entry>
                <entry>wipe passphrase(s) from memory</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          The compose menu is also used to edit the attachments for a message
          which can be either files or other messages. The
          <literal>&lt;attach-message&gt;</literal> function to will prompt you
          for a folder to attach messages from. You can now tag messages in
          that folder and they will be attached to the message you are sending.
        </para>
        <note>
          <para>
            Note that certain operations like composing a new mail, replying,
            forwarding, etc. are not permitted when you are in that folder. The
            %r in <link linkend="status-format">$status_format</link> will
            change to a <quote>A</quote> to indicate that you are in
            attach-message mode.
          </para>
        </note>
        <para>
          After exiting the compose menu via <literal>&lt;send-message&gt;</literal>,
          the message will be sent.  This happens via
          <link linkend="smtp">$smtp_url</link>.  Otherwise
          <link linkend="sendmail">$sendmail</link> will be invoked.  Prior to
          version 2019-11-29, NeoMutt enabled <link linkend="write-bcc">$write_bcc</link> by
          default, assuming the MTA would automatically remove a
          <literal>Bcc:</literal> header as part of delivery.  Starting with 2019-11-29, the
          option is unset by default, but no longer affects the fcc copy of the message.
        </para>
      </sect2>

     <sect2 id="edit-header">
       <title>Editing the Message Header</title>
       <para>
         When editing the header because of
         <link linkend="edit-headers">$edit_headers</link> being set, there are
         a several pseudo headers available which will not be included in sent
         messages but trigger special NeoMutt behavior.
       </para>

        <sect3 id="fcc-header">
          <title>Fcc: Pseudo Header</title>
          <para>
            If you specify either of
          </para>
          <para>
            <literal>Mutt-Fcc:</literal> <emphasis>filename</emphasis>
          </para>
          <para>
            <literal>Fcc:</literal> <emphasis>filename</emphasis>
          </para>
          <para>
            as a header, NeoMutt will pick up <emphasis>filename</emphasis>
            just as if you had used the <literal>&lt;edit-fcc&gt;</literal>
            function in the <emphasis>compose</emphasis> menu. It can later be
            changed from the compose menu.
          </para>
        </sect3>

        <sect3 id="attach-header">
          <title>Attach: Pseudo Header</title>
          <para>
            You can also attach files to your message by specifying either of
          </para>
          <para>
            <literal>Mutt-Attach:</literal>
            <emphasis>filename</emphasis> [<emphasis>description</emphasis>]
          </para>
          <para>
            <literal>Attach:</literal>
            <emphasis>filename</emphasis> [<emphasis>description</emphasis>]
          </para>
          <para>
            where <emphasis>filename</emphasis> is the file to attach and
            <emphasis>description</emphasis> is an optional string to use as
            the description of the attached file. Spaces in filenames have to
            be escaped using backslash (<quote>\</quote>). The file can be
            removed as well as more added from the compose menu.
          </para>
        </sect3>

        <sect3 id="pgp-header">
          <title>Pgp: Pseudo Header</title>
          <para>
            If you want to use PGP, you can specify either of
          </para>
          <para>
            <literal>Mutt-PGP:</literal> [
            <literal>E</literal> |
            <literal>S</literal> |
            <literal>S</literal>
            <emphasis>&lt;id&gt;</emphasis> ]
          </para>
          <para>
            <literal>Pgp:</literal> [
            <literal>E</literal> |
            <literal>S</literal> |
            <literal>S</literal>
            <emphasis>&lt;id&gt;</emphasis> ]
          </para>
          <para>
            <quote>E</quote> selects encryption, <quote>S</quote> selects signing
            and <quote>S&lt;id&gt;</quote> selects signing with the given key,
            setting <link linkend="pgp-sign-as">$pgp_sign_as</link> for the
            duration of the message composition session. The selection can later
            be changed in the compose menu.
          </para>
        </sect3>

        <sect3 id="smime-header">
          <title>Smime: Pseudo Header</title>
          <para>
            If you want to use S/MIME, you can specify either of
          </para>
          <para>
            <literal>Mutt-SMIME:</literal> [
            <literal>E</literal> |
            <literal>S</literal> |
            <literal>S</literal>
            <emphasis>&lt;id&gt;</emphasis> ]
          </para>
          <para>
            <literal>Smime:</literal> [
            <literal>E</literal> |
            <literal>S</literal> |
            <literal>S</literal>
            <emphasis>&lt;id&gt;</emphasis> ]
          </para>
          <para>
            <quote>E</quote> selects encryption, <quote>S</quote> selects signing
            and <quote>S&lt;id&gt;</quote> selects signing with the given key,
            setting <link linkend="smime-sign-as">$smime_sign_as</link> for the
            duration of the message composition session. The selection can later
            be changed in the compose menu.
          </para>
        </sect3>

        <sect3 id="in-reply-to-header">
          <title>In-Reply-To: Header</title>
          <para>
            When replying to messages, the <emphasis>In-Reply-To:</emphasis>
            header contains the Message-Id of the message(s) you reply to. If
            you remove or modify its value, NeoMutt will not generate
            a <emphasis>References:</emphasis> field, which allows you to
            create a new message thread, for example to create a new message to
            a mailing list without having to enter the mailing list's address.
          </para>
          <para>
            If you intend to start a new thread by replying, please make really
            sure you remove the <emphasis>In-Reply-To:</emphasis> header in
            your editor. Otherwise, though you'll produce a technically valid
            reply, some netiquette guardians will be annoyed by this so-called
            <quote>thread hijacking</quote>.
          </para>
        </sect3>
      </sect2>

      <sect2 id="sending-crypto">
        <title>Sending Cryptographically Signed/Encrypted Messages</title>
        <para>
          If you have told NeoMutt to PGP or S/MIME encrypt a message, it will
          guide you through a key selection process when you try to send the
          message. NeoMutt will not ask you any questions about keys which have
          a certified user ID matching one of the message recipients' mail
          addresses. However, there may be situations in which there are
          several keys, weakly certified user ID fields, or where no matching
          keys can be found.
        </para>
        <para>
          In these cases, you are dropped into a menu with a list of keys from
          which you can select one. When you quit this menu, or NeoMutt can't
          find any matching keys, you are prompted for a user ID. You can, as
          usually, abort this prompt using <literal>^G</literal>. When you do
          so, NeoMutt will return to the compose screen.
        </para>
        <para>
          Once you have successfully finished the key selection, the message
          will be encrypted using the selected public keys when sent out.
        </para>
        <para>
          To ensure you can view encrypted messages you have sent, you may wish
          to set <link linkend="pgp-self-encrypt">$pgp_self_encrypt</link> and
          <link linkend="pgp-default-key">$pgp_default_key</link> for PGP, or
          <link linkend="smime-self-encrypt">$smime_self_encrypt</link> and
          <link linkend="smime-default-key">$smime_default_key</link> for
          S/MIME.
        </para>
        <para>
          Most fields of the entries in the key selection menu (see also
          <link linkend="pgp-entry-format">$pgp_entry_format</link>) have
          obvious meanings. But some explanations on the capabilities, flags,
          and validity fields are in order.
        </para>
        <para>
          The flags sequence (<quote>%f</quote>) will expand to one of the
          flags in <xref linkend="tab-pgp-menuflags" />.
        </para>

        <table id="tab-pgp-menuflags">
          <title>PGP key menu flags</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Flag</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>R</entry>
                <entry>The key has been revoked and can't be used.</entry>
              </row>
              <row>
                <entry>X</entry>
                <entry>The key is expired and can't be used.</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>You have marked the key as disabled.</entry>
              </row>
              <row>
                <entry>c</entry>
                <entry>There are unknown critical self-signature packets.</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          The capabilities field (<quote>%c</quote>) expands to
          a two-character sequence representing a key's capabilities. The first
          character gives the key's encryption capabilities: A minus sign
          (<quote>-</quote>) means that the key cannot be used for encryption.
          A dot (<quote>.</quote>) means that it's marked as a signature key
          in one of the user IDs, but may also be used for encryption. The
          letter <quote>e</quote> indicates that this key can be used for
          encryption.
        </para>
        <para>
          The second character indicates the key's signing capabilities. Once
          again, a <quote>-</quote> implies <quote>not for signing</quote>,
          <quote>.</quote> implies that the key is marked as an encryption key
          in one of the user-ids, and <quote>s</quote> denotes a key which can
          be used for signing.
        </para>
        <para>
          Finally, the validity field (<quote>%t</quote>) indicates how
          well-certified a user-id is.  Its values depend on the backend used.
          Note that S/MIME (which uses X509 certificates) has no concept of
          validity, so this field simply shows <literal>x</literal>.
          The possible values listed in <xref linkend="tab-pgp-menuvalidity" />.
        </para>
        <table id="tab-pgp-menuvalidity">
          <title>PGP key menu validity</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Flag (classic PGP)</entry>
                <entry>Flag (GPGME)</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>N/A</entry>
                <entry>?</entry>
                <entry>indicates unknown validity</entry>
              </row>
              <row>
                <entry>?</entry>
                <entry>q</entry>
                <entry>indicates undefined validity</entry>
              </row>
              <row>
                <entry>-</entry>
                <entry>n</entry>
                <entry>indicates a never valid key (untrusted association)</entry>
              </row>
              <row>
                <entry>space</entry>
                <entry>m</entry>
                <entry>indicates marginal validity (partially trusted)</entry>
              </row>
              <row>
                <entry>+</entry>
                <entry>f</entry>
                <entry>indicates full validity (fully trusted)</entry>
              </row>
              <row>
                <entry>N/A</entry>
                <entry>u</entry>
                <entry>indicates ultimate validity</entry>
              </row>
              <row>
                <entry>N/A</entry>
                <entry>x</entry>
                <entry>the entry is an X509 certificate (S/MIME)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="ff">
        <title>Sending Format=Flowed Messages</title>

        <sect3 id="ff-concept">
          <title>Concept</title>
          <para>
            <literal>format=flowed</literal>-style messages (or
            <literal>f=f</literal> for short) are <literal>text/plain</literal>
            messages that consist of paragraphs which a receiver's mail client
            may reformat to its own needs, which mostly means to customize line
            lengths regardless of what the sender sent. Technically this is
            achieved by letting lines of a <quote>flowable</quote> paragraph
            end in spaces except for the last line.
          </para>
          <para>
            While for text-mode clients like NeoMutt it's best to
            assume only a standard 80x24 character cell terminal, it may be
            desired to let the receiver decide completely how to view
            a message.
          </para>
        </sect3>

        <sect3 id="ff-support">
          <title>NeoMutt Support</title>
          <para>
            NeoMutt only supports setting the required
            <literal>format=flowed</literal> MIME parameter on outgoing
            messages if the <link linkend="text-flowed">$text_flowed</link>
            variable is set, specifically it does not add the trailing spaces.
          </para>
          <para>
            After editing, NeoMutt properly space-stuffs the message.
            <emphasis>Space-stuffing</emphasis> is required by RFC3676, defining
            <literal>format=flowed</literal>, and means to prepend a space to:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                all lines starting with a space
              </para>
            </listitem>
            <listitem>
              <para>
                lines starting with the word
                <quote><literal>From</literal></quote> followed by space
              </para>
            </listitem>
            <listitem>
              <para>
                all lines starting with
                <quote><literal>&gt;</literal></quote>, which is not intended to
                be a quote character
              </para>
            </listitem>
          </itemizedlist>
          <note>
            <para>
              NeoMutt only supports space-stuffing for the first two types of
              lines but not for the third: It is impossible to safely detect
              whether a leading <literal>&gt;</literal> character starts a quote
              or not.
            </para>
          </note>
          <para>
            All leading spaces are to be removed by receiving clients to
            restore the original message prior to further processing.
          </para>
        </sect3>

        <sect3 id="ff-editor">
          <title>Editor Considerations</title>
          <para>
            As NeoMutt provides no additional features to compose
            <literal>f=f</literal> messages, it's completely up to the user and
            his editor to produce proper messages. Please consider your
            editor's documentation if you intend to send <literal>f=f</literal>
            messages.
          </para>
          <para>
            For example, <emphasis>vim</emphasis> provides the
            <literal>w</literal> flag for its <literal>formatoptions</literal>
            setting to assist in creating <literal>f=f</literal> messages, see
            <literal>:help fo-table</literal> for details.
          </para>
        </sect3>

        <sect3 id="ff-pager">
          <title>Reformatting</title>
          <para>
            NeoMutt has some support for reformatting when viewing and replying
            to <literal>format=flowed</literal> messages. In order to take
            advantage of these, <link linkend="reflow-text">$reflow_text</link>
            must be set.
          </para>
          <itemizedlist>
            <listitem>
              <para>
                Paragraphs are automatically reflowed and wrapped at a width
                specified by <link linkend="reflow-wrap">$reflow_wrap</link>.
              </para>
            </listitem>
            <listitem>
              <para>
                In its original format, the quoting style of
                <literal>format=flowed</literal> messages can be difficult to
                read, and doesn't intermix well with non-flowed replies.
                Setting
                <link linkend="reflow-space-quotes">$reflow_space_quotes</link>
                adds spaces after each level of quoting when in the pager and
                replying in a non-flowed format (i.e. with
                <link linkend="text-flowed">$text_flowed</link> unset).
              </para>
            </listitem>
            <listitem>
              <para>
                If
                <link linkend="reflow-space-quotes">$reflow_space_quotes</link>
                is unset, NeoMutt will still add one trailing space after all
                the quotes in the pager (but not when replying).
              </para>
            </listitem>
          </itemizedlist>
        </sect3>
      </sect2>
    </sect1>

    <sect1 id="forwarding-mail">
      <title>Forwarding and Bouncing Mail</title>
      <para>
        Bouncing and forwarding let you send an existing message to recipients
        that you specify. Bouncing a message sends a verbatim copy of a message
        to alternative addresses as if they were the message's original
        recipients specified in the Bcc header. Forwarding a message, on the
        other hand, allows you to modify the message before it is resent (for
        example, by adding your own comments). Bouncing is done using the
        <literal>&lt;bounce&gt;</literal> function and forwarding using the
        <literal>&lt;forward&gt;</literal> function bound to <quote>b</quote>
        and <quote>f</quote> respectively.
      </para>
      <para>
        Forwarding can be done by including the original message in the new
        message's body (surrounded by indicating lines: see
        <link linkend="forward-attribution-intro">$forward_attribution_intro</link>
        and <link linkend="forward-attribution-trailer">$forward_attribution_trailer</link>)
        or including it as a MIME attachment, depending on the value of the
        <link linkend="mime-forward">$mime_forward</link> variable.  Decoding
        of attachments, like in the pager, can be controlled by the
        <link linkend="forward-decode">$forward_decode</link> and
        <link linkend="mime-forward-decode">$mime_forward_decode</link>
        variables, respectively.
        The desired forwarding format may depend on the content, therefore
        <link linkend="mime-forward">$mime_forward</link> is a quadoption
        which, for example, can be set to <quote>ask-no</quote>.
      </para>
      <para>
        NeoMutt's default (<link linkend="mime-forward">$mime_forward</link>=<quote>no</quote> and
        <link linkend="forward-decode">$forward_decode</link>=<quote>yes</quote>) is
        to use standard inline forwarding.  In that mode all text-decodable
        parts are included in the new message body.  Other attachments from
        the original email can also be attached to the new message, based on the
        quadoption <link linkend="forward-attachments">$forward_attachments</link>.
      </para>
      <para>
        The inclusion of headers is controlled by the current setting of the
        <link linkend="weed">$weed</link> variable, unless
        <link linkend="mime-forward">$mime_forward</link> is set.
        The subject of the email is controlled by
        <link linkend="forward-format">$forward_format</link>.
      </para>
      <para>
        By default a forwarded message does not reference the messages it
        contains. When
        <link linkend="forward-references">$forward_references</link> is set,
        a forwarded message includes the <quote>In-Reply-To:</quote> and
        <quote>References:</quote> headers, just like a reply would. Hence the
        forwarded message becomes part of the original thread instead of
        starting a new one.
      </para>
      <para>
        Editing the message to forward follows the same procedure as sending or
        replying to a message does, but can be disabled via the quadoption
        <link linkend="forward-edit">$forward_edit</link>.
      </para>
    </sect1>

    <sect1 id="postponing-mail">
      <title>Postponing Mail</title>
      <para>
        At times it is desirable to delay sending a message that you have
        already begun to compose. When the
        <literal>&lt;postpone-message&gt;</literal> function is used in the
        <emphasis>compose</emphasis> menu, the body of your message and
        attachments are stored in the mailbox specified by the
        <link linkend="postponed">$postponed</link> variable. This means that
        you can recall the message even if you exit NeoMutt and then restart it
        at a later time.
      </para>
      <para>
        Once a message is postponed, there are several ways to resume it. From
        the command line you can use the <quote>-p</quote> option, or if you
        compose a new message from the <emphasis>index</emphasis> or
        <emphasis>pager</emphasis> you will be prompted if postponed messages
        exist. If multiple messages are currently postponed, the
        <emphasis>postponed</emphasis> menu will pop up and you can select
        which message you would like to resume.
      </para>
      <note>
        <para>
          If you postpone a reply to a message, the reply setting of the
          message is only updated when you actually finish the message and send
          it. Also, you must be in the same folder with the message you replied
          to for the status of the message to be updated.
        </para>
      </note>
      <para>
        See also the <link linkend="postpone">$postpone</link> quad-option.
      </para>
    </sect1>

    <sect1 id="logging">
      <title>Logging</title>
      <para>
        NeoMutt has different types of logging/error messages
      </para>
      <itemizedlist>
        <listitem>
          <para>
            Primitive Errors: errors emitted by C library functions such as
            <literal>fopen()</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Errors
          </para>
        </listitem>
        <listitem>
          <para>
            Warnings
          </para>
        </listitem>
        <listitem>
          <para>
            Message: Informational messages such as
            <literal>Sorting mailbox...</literal>.
          </para>
        </listitem>
        <listitem>
          <para>
            Debug: Debug messages usually only interesting while debugging.
          </para>
        </listitem>
      </itemizedlist>
      <para>
        These log messages are shown in the command bar at the bottom of the UI
        (usually below the status line) and errors are shown in a different
        colour than the other message types. The colours used for displaying
        can be adjusted with <literal>color error ...</literal> and
        <literal>color message ...</literal>, respectively. See the
        <link linkend="color">description of <literal>color</literal></link>
        for the precise syntax.
      </para>
      <para>
        The command bar shows only the last message. To show the last 100
        messages (this includes all types of messages from debug to error) the
        function
        <link linkend="tab-index-bindings"><literal>&lt;show-log-messages&gt;</literal></link>
        can be used.
      </para>
      <para>
        Debug messages are not shown by default. The debug log level must be set
        with the <link linkend="tab-commandline-options"><literal>-d</literal> command line parameter</link>
        at startup. The <literal>-d</literal> parameter expects a debug level
        which can range from 1 to 5 and affects verbosity of the debug
        messages. A value of 2 is recommended for the start. If debug logging
        is enabled, all log messages (i.e. errors, warnings, ..., debug) are
        additionally written to the file <literal>~/.neomuttdebug0</literal>.
      </para>
    </sect1>

    <sect1 id="encryption">
      <title>Encryption and Signing</title>

      <para>
      NeoMutt supports encrypting and signing emails when used interactively.
      In batch mode, cryptographic operations are disabled, so these options
      can't be used to sign an email sent via a cron job, for instance.
      </para>

      <para>
        The recommended way to enable OpenPGP and S/MIME is to use GPGME.
        This library is integrated into NeoMutt and can perform all the common
        crypto functions the user will need.
      </para>

<screen>
<emphasis role="comment"># Enable GPGME</emphasis>
set crypt_use_gpgme
</screen>

      <para>
        If you have complex crypto needs, then you can enable the
        <quote>classic mode</quote> by disabling GPGME and setting all
        <literal>pgp_command_*</literal> and <literal>smime_command_*</literal>
        config variables.
      </para>

      <para>
        For example config, see: <literal>gpg.rc</literal> and
        <literal>smime.rc</literal> in the
        <ulink url="https://github.com/neomutt/neomutt-contrib/">Contrib repository</ulink>.
      </para>

<screen>
<emphasis role="comment"># Use manual crypto functions</emphasis>
unset crypt_use_gpgme
set pgp_clear_sign_command = "..."
...
set smime_decrypt_command = "..."
...
</screen>

      <sect2 id="enc-pgp">
        <title>OpenPGP Configuration</title>

        <para>
          The two most important settings are
          <link linkend="pgp-default-key">$pgp_default_key</link> and
          <link linkend="pgp-sign-as">$pgp_sign_as</link>.  To perform
          encryption, you must set the first variable.  If you have a separate
          signing key, or only have a signing key, then set the second.  Most
          people will only need to set
          <link linkend="pgp-default-key">$pgp_default_key</link>.
        </para>

        <para>
          Starting with version 2.1.0, GnuPG automatically uses an
          <literal>agent</literal> to prompt for your passphrase.  If you are
          using a version older than that, you'll need to ensure an agent is
          running (alternatively, you can unset
          <link linkend="pgp-use-gpg-agent">$pgp_use_gpg_agent</link> and NeoMutt
          will prompt you for your passphrase).  The agent in turn uses a
          <literal>pinentry</literal> program to display the prompt.  There are
          many different kinds of pinentry programs that can be used: qt, gtk2,
          gnome3, fltk, and curses.  However, NeoMutt does
          <emphasis>not</emphasis> work properly with the tty pinentry program.
          Please ensure you have one of the GUI or curses pinentry programs
          installed and configured to be the default for your system.
        </para>
      </sect2>

      <sect2 id="enc-smime">
        <title>S/MIME Configuration</title>

        <para>
          As with OpenPGP, the two most important settings are
          <link linkend="smime-default-key">$smime_default_key</link> and
          <link linkend="smime-sign-as">$smime_sign_as</link>.  To perform
          encryption and decryption, you must set the first variable.  If you
          have a separate signing key, or only have a signing key, then set the
          second.  Most people will only need to set
          <link linkend="smime-default-key">$smime_default_key</link>.
        </para>

        <para>
          When using GPGME as S/MIME backend, keys and certificates are
          managed by GnuPG.  You can add your key (or certificates) to
          GnuPG with the command
          <quote><literal>gpgsm --import mykey.p12</literal></quote>.
          Note that in order to use the key for signing or encrypting, the root
          certificate of that key must be trusted, which might involve editing
          <literal>~/.gnupg/trustlist.txt</literal>.
          Consult your documentation of GnuPG for details, in particular
          <literal>gpgsm</literal>.
        </para>

        <para>
          In <quote>classic mode</quote>, keys and certificates are managed by
          the <literal>smime_keys</literal> program that comes with NeoMutt.  By
          default they are stored under <literal>~/.smime/</literal>. (This is
          set by the <literal>smime.rc</literal> file with
          <link linkend="smime-certificates">$smime_certificates</link> and
          <link linkend="smime-keys">$smime_keys</link>.)  To initialize this
          directory, use the command <quote><literal>smime_keys
          init</literal></quote> from a shell prompt.  The program can be then
          be used to import and list certificates.  You may also want to
          periodically run <quote><literal>smime_keys refresh</literal></quote>
          to update status flags for your certificates.
        </para>
      </sect2>
    </sect1>

  </chapter>

  <chapter id="configuration">
    <title>Configuration</title>

    <sect1 id="configuration-files">
      <title>Location of Initialization Files</title>
      <para>
        When NeoMutt starts up it looks for two configuration files – one
        <quote>system</quote> file and one <quote>user</quote> file.
      </para>
      <para>
        NeoMutt first reads the system configuration file, then the user
        configuration file. The two files are merged in the sense that "last
        setting wins". That is, if a setting is defined in both files, the user
        configuration file's value for that setting is the one that takes
        precedence and becomes effective.
      </para>
      <para>
        NeoMutt searches for several different file names when looking for
        config. It looks for NeoMutt config files before Mutt config files and
        versioned config before plain config. For example:
      </para>

      <table id="neomuttrc-order">
        <title>NeoMutt config file search order</title>
        <tgroup cols="1">
          <tbody>
            <row>
              <entry>neomuttrc</entry>
            </row>
            <row>
              <entry>muttrc</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        This allows the user to create separate NeoMutt and Mutt config files
        on the same system.
      </para>

      <sect2 id="neomuttrc-system">
        <title>Location of system config files</title>
        <para>
          NeoMutt will search for a system config file in
          a <literal>neomutt</literal> directory in several places. First it
          searches the locations specified in the
          <literal>XDG_CONFIG_DIRS</literal> environment variable, which
          defaults to <literal>/etc/xdg</literal>. Next, it looks in
          <literal>/etc</literal>. Finally, it tries
          <literal>/usr/share</literal>.
        </para>
        <para>
          The system config file will not be read if the <quote>-n</quote>
          option is used on the
          <link linkend="commandline">command line</link>.
        </para>
        <para>
          NeoMutt will read just one file, the first file it finds, from the
          list below.
        </para>

        <table id="neomuttrc-system-files">
          <title>NeoMutt system config file locations</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>File Location</entry>
                <entry>Notes</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>/etc/xdg/neomutt/neomuttrc</entry>
                <entry></entry>
              </row>
              <row>
                <entry>/etc/xdg/neomutt/Muttrc</entry>
                <entry>Note the case of the filename</entry>
              </row>
              <row>
                <entry>/etc/neomuttrc</entry>
                <entry></entry>
              </row>
              <row>
                <entry>/etc/Muttrc</entry>
                <entry>Note the case of the filename</entry>
              </row>
              <row>
                <entry>/usr/share/neomutt/neomuttrc</entry>
                <entry></entry>
              </row>
              <row>
                <entry>/usr/share/neomutt/Muttrc</entry>
                <entry>Note the case of the filename</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="neomuttrc-user">
        <title>Location of user config files</title>
        <para>
          NeoMutt will search for a user config file in several places. First
          it looks in the directory specified in the
          <literal>XDG_CONFIG_HOME</literal> environment variable, which
          defaults to <literal>~/.config/neomutt</literal>. Next, it looks in
          <literal>~</literal> (your home directory). Finally, it tries
          <literal>~/.neomutt</literal>.
        </para>
        <para>
          You may specify your own location for the user config file using the
          <quote>-F</quote> option on the
          <link linkend="commandline">command line</link>.
        </para>
        <para>
          NeoMutt will read just one file, the first file it finds, from the
          list below.
        </para>

        <table id="neomuttrc-user-files">
          <title>NeoMutt user config file locations</title>
          <tgroup cols="1">
            <thead>
              <row>
                <entry>File Location</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>~/.config/neomutt/neomuttrc</entry>
              </row>
              <row>
                <entry>~/.config/neomutt/muttrc</entry>
              </row>
              <row>
                <entry>~/.config/mutt/neomuttrc</entry>
              </row>
              <row>
                <entry>~/.config/mutt/muttrc</entry>
              </row>
              <row>
                <entry>~/.neomutt/neomuttrc</entry>
              </row>
              <row>
                <entry>~/.neomutt/muttrc</entry>
              </row>
              <row>
                <entry>~/.mutt/neomuttrc</entry>
              </row>
              <row>
                <entry>~/.mutt/muttrc</entry>
              </row>
              <row>
                <entry>~/.neomuttrc</entry>
              </row>
              <row>
                <entry>~/.muttrc</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="config-priority">
        <title>Config Priority</title>
        <para>
          The majority of NeoMutt's config will be read from two files: the
          system config in <literal>/etc</literal> and the user config in, e.g.
          <literal>~/.neomuttrc</literal>
        </para>
        <para>
          The last file that gets read will overwrite any settings from
          previous config files. This means that an administrator can set some
          defaults which the user can override.
        </para>
        <para>
          Additionally, there are a handful of config items which can be set
          using an environment variable. They have a lower priority than the
          NeoMutt config files:
          <link linkend="editor">$editor</link>,
          <link linkend="from">$from</link>,
          <link linkend="mailcap-path">$mailcap_path</link>,
          <link linkend="news-server">$news_server</link>,
          <link linkend="shell">shell</link>,
          <link linkend="spool-file">$spool_file</link>,
          <link linkend="tmp-dir">$tmp_dir</link>,
        </para>
        <para>
          Finally, it's possible to
          <link linkend="commandline">set some variables directly</link> on the
          command-line using the <literal>-e</literal> option.
        </para>

        <table id="table-config-priority">
          <title>Config Priority</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Priority</entry>
                <entry>Where</entry>
                <entry>Example</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Highest</entry>
                <entry>Command line</entry>
                <entry><literal>neomutt -e 'set from=&quot;John Doe &lt;john@example.com&gt;&quot;'</literal></entry>
              </row>
              <row>
                <entry></entry>
                <entry>User Config</entry>
                <entry><literal>~/.neomuttrc</literal></entry>
              </row>
              <row>
                <entry></entry>
                <entry>System Config</entry>
                <entry><literal>/etc/neomuttrc</literal></entry>
              </row>
              <row>
                <entry></entry>
                <entry>Environment</entry>
                <entry><literal>export EDITOR=&quot;/usr/bin/vim&quot;</literal></entry>
              </row>
              <row>
                <entry>Lowest</entry>
                <entry>Built-in</entry>
                <entry>Defaults hard-coded into NeoMutt</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>
    </sect1>

    <sect1 id="quickconfig">
      <title>Starter NeoMuttrc</title>

      <para>
        NeoMutt is highly configurable because it's <emphasis>meant</emphasis>
        to be customized to your needs and preferences.  However, this
        configurability can make it difficult when just getting started.  A few
        sample neomuttrc files are available in the
        <ulink url="https://github.com/neomutt/neomutt-contrib">Contrib Repo</ulink>.
      </para>
    </sect1>

    <sect1 id="neomuttrc-syntax" xreflabel="Syntax of Initialization Files">
      <title>Syntax of Initialization Files</title>
      <para>
        An initialization file consists of a series of
        <link linkend="commands">commands</link>. Each line of the file may
        contain one or more commands. When multiple commands are used, they
        must be separated by a semicolon (<quote>;</quote>).
      </para>
      <example id="ex-rc-multiple-cmds">
        <title>Multiple configuration commands per line</title>
        <screen>set real_name='John Smith' ; ignore x-</screen>
      </example>
      <para>
        The hash mark, or pound sign (<quote>#</quote>), is used as
        a <quote>comment</quote> character. You can use it to annotate your
        initialization file. All text after the comment character to the end of
        the line is ignored.
      </para>
      <example id="ex-ec-comment">
        <title>Commenting configuration files</title>

<screen>
my_hdr X-Disclaimer: Why are you listening to me?   <emphasis role="comment"># This is a comment</emphasis>
</screen>

      </example>
      <para>
        Single quotes (<quote>'</quote>) and double quotes (<quote>"</quote>)
        can be used to quote strings which contain spaces or other special
        characters. The difference between the two types of quotes is similar
        to that of many popular shell programs, namely that a single quote is
        used to specify a literal string (one that is not interpreted for shell
        variables or quoting with a backslash [see next paragraph]), while
        double quotes indicate a string for which should be evaluated. For
        example, backticks are evaluated inside of double quotes, but
        <emphasis>not</emphasis> for single quotes.
      </para>
      <para>
        <quote>\</quote> quotes the next character, just like in a shell.
        For example, if want to put quotes <quote>"</quote>
        inside of a string, you can use <quote>\</quote> to force the next
        character to be a literal instead of interpreted character.
      </para>
      <example id="ex-rc-quote">
        <title>Escaping quotes in configuration files</title>
        <screen>set real_name="John \"anonymous\" Doe"</screen>
      </example>
      <para>
        <quote>\\</quote> means to insert a literal <quote>\</quote> into the
        line. <quote>\n</quote> and <quote>\r</quote> have their usual
        C meanings of linefeed and carriage-return, respectively.
      </para>
      <para>
        A <quote>\</quote> at the end of a line can be used to split commands
        over multiple lines as it <quote>escapes</quote> the line end, provided
        that the split points don't appear in the middle of command names.
        Lines are first concatenated before interpretation so that a multi-line
        can be commented by commenting out the first line only.
      </para>
      <example id="ex-rc-split">
        <title>Splitting long configuration commands over several lines</title>

<screen>
set status_format="some very \
long value split \
over several lines"
</screen>

      </example>
      <note>
        <para>
          Using <quote>\</quote> at the end of a line <emphasis>only</emphasis>
          removes the newline character.
        </para>
        <para>
          Any leading whitespace on the following lines will be part of the configuration.
        </para>
      </note>
      <para>
        It is also possible to substitute the output of a Unix command in an
        initialization file. This is accomplished by enclosing the command in
        backticks (``). In <xref linkend="ex-rc-backtick" />, the output of the
        Unix command <quote>uname -a</quote> will be substituted before the
        line is parsed. Since initialization files are line oriented, only the
        first line of output from the Unix command will be substituted.
      </para>
      <example id="ex-rc-backtick">
        <title>Using external command's output in configuration files</title>
        <screen>my_hdr X-Operating-System: `uname -a`</screen>
      </example>
      <para>
        To avoid the output of backticks being parsed, place them inside double
        quotes.  In <xref linkend="ex-backtick-dblquotes"/>, the output of the
        gpg decryption is assigned directly to $imap_pass, so that special
        characters in the password (e.g.<quote>'</quote>, <quote>#</quote>,
        <quote>$</quote>) are not parsed and interpreted specially by neomutt.
      </para>
      <example id="ex-backtick-dblquotes">
        <title>Preventing the output of backticks from being parsed</title>
<screen>
set imap_pass="`gpg --batch -q --decrypt ~/.neomutt/account.gpg`"
</screen>
      </example>
      <para>
        Both environment variables and NeoMutt variables can be accessed by
        prepending <quote>$</quote> to the name of the variable. For example,
      </para>
      <example id="ex-rc-env">
        <title>Using environment variables in configuration files</title>
        <screen>set record = "+sent_on_$HOSTNAME"</screen>
      </example>
      <para>
        will cause NeoMutt to save outgoing messages to a folder named
        <quote>sent_on_kremvax</quote> if the environment variable
        <literal>$HOSTNAME</literal> is set to <quote>kremvax.</quote> (See
        <link linkend="record">$record</link> for details.)
      </para>
      <para>
        If NeoMutt can't find a matching <emphasis>config</emphasis> variable,
        it will try to find a matching <emphasis>environment</emphasis> variable.
      </para>
      <para>
        NeoMutt expands the variable when it is assigned, not when it is used.
        If the value of a variable on the right-hand side of an assignment
        changes after the assignment, the variable on the left-hand side will
        not be affected.
      </para>
      <para>
        The commands understood by NeoMutt are explained in the next
        paragraphs. For a complete list, see the
        <link linkend="commands">command reference</link>.
      </para>
      <para>
        All configuration files are expected to be in the current locale as
        specified by the <link linkend="charset">$charset</link> variable which
        doesn't have a default value since it's determined by NeoMutt at
        startup. If a configuration file is not encoded in the same character
        set the <link linkend="config-charset">$config_charset</link> variable
        should be used: all lines starting with the next are recoded from
        <link linkend="config-charset">$config_charset</link> to
        <link linkend="charset">$charset</link>.
      </para>
      <para>
        This mechanism should be avoided if possible as it has the following
        implications:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            These variables should be set early in a configuration file with
            <link linkend="charset">$charset</link> preceding
            <link linkend="config-charset">$config_charset</link> so NeoMutt
            knows what character set to convert to.
          </para>
        </listitem>
        <listitem>
          <para>
            If <link linkend="config-charset">$config_charset</link> is set, it
            should be set in each configuration file because the value is
            global and <emphasis>not</emphasis> per configuration file.
          </para>
        </listitem>
        <listitem>
          <para>
            Because NeoMutt first recodes a line before it attempts to parse
            it, a conversion introducing question marks or other characters as
            part of errors (unconvertible characters, transliteration) may
            introduce syntax errors or silently change the meaning of certain
            tokens (e.g. inserting question marks into regular expressions).
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="addrgroup">
      <title>Address Groups</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>group</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain" rep="repeat">
            <option>-rx</option>
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <option>-addr</option>
            <replaceable class="parameter">address</replaceable>
          </arg>
        </group>
        <command>ungroup</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <option>-rx</option>
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <option>-addr</option>
            <replaceable class="parameter">address</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        NeoMutt supports grouping addresses logically into named groups. An
        address or regular expression can appear in several groups at the same
        time. These groups can be used in
        <link linkend="patterns">patterns</link> (for searching, limiting and
        tagging) and in hooks by using group patterns. This can be useful to
        classify mail and take certain actions depending on in what groups the
        message is. For example, the NeoMutt user's mailing list would fit into
        the categories <quote>mailing list</quote> and
        <quote>NeoMutt-related</quote>. Using
        <link linkend="send-hook"><literal>send-hook</literal></link>, the
        sender can be set to a dedicated one for writing mailing list messages,
        and the signature could be set to a NeoMutt-related one for writing to
        a NeoMutt list – for other lists, the list sender setting still applies
        but a different signature can be selected. Or, given a group only
        containing recipients known to accept encrypted mail,
        <quote>auto-encryption</quote> can be achieved easily.
      </para>
      <para>
        The <command>group</command> command is used to directly add either
        addresses or regular expressions to the specified group or groups. The
        different categories of arguments to the <command>group</command>
        command can be in any order. The flags <literal>-rx</literal> and
        <literal>-addr</literal> specify what the following strings (that
        cannot begin with a hyphen) should be interpreted as: either a regular
        expression or an email address, respectively.
      </para>
      <para>
        These address groups can also be created implicitly by the
        <link linkend="alias"><command>alias</command></link>,
        <link linkend="lists"><command>lists</command></link>,
        <link linkend="lists"><command>subscribe</command></link> and
        <link linkend="alternates"><command>alternates</command></link>
        commands by specifying the optional <literal>-group</literal> option.
        For example,
      </para>

<screen>
alternates -group me address1 address2
alternates -group me -group work address3
</screen>

      <para>
        would create a group named <quote>me</quote> which contains all three
        addresses and a group named <quote>work</quote> which contains only
        your work address <emphasis>address3</emphasis>. Besides many other
        possibilities, this could be used to automatically mark your own
        messages in a mailing list folder as read or use a special signature
        for work-related messages.
      </para>
      <para>
        The <command>ungroup</command> command is used to remove addresses or
        regular expressions from the specified group or groups. The syntax is
        similar to the <command>group</command> command, however the special
        character <literal>*</literal> can be used to empty a group of all of
        its contents. As soon as a group gets empty because all addresses and
        regular expressions have been removed, it'll internally be removed, too
        (i.e. there cannot be an empty group). When removing regular
        expressions from a group, the <emphasis>regex</emphasis> must be
        specified exactly as given to the <command>group</command> command or
        <literal>-group</literal> argument.
      </para>
    </sect1>

    <sect1 id="alias">
      <title>Defining/Using Aliases</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>alias</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">key</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">address</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">, address</replaceable>
        </arg>
        <arg choice="opt">
          <replaceable class="parameter"># comment</replaceable>
        </arg>
        <command>unalias</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable>name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">key</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        It's usually very cumbersome to remember or type out the address of
        someone you are communicating with. NeoMutt allows you to create
        <quote>aliases</quote> which map a short string to a full address.
      </para>
      <note>
        <para>
          If you want to create an alias for more than one address, you
          <emphasis>must</emphasis> separate the addresses with a comma
          (<quote>,</quote>).
        </para>
      </note>
      <para>
        The optional <literal>-group</literal> argument to
        <command>alias</command> causes the aliased address(es) to be added to
        the named <emphasis>group</emphasis>.
      </para>
      <para>
        To add an alias:
      </para>

<screen>
<emphasis role="comment"># Some aliases, one with a comment</emphasis>
alias alan   Alan Jones &lt;alan@example.com&gt;
alias briony Briony Williams &lt;bw@example.com&gt;
alias jim    James Smith &lt;js@example.com&gt; <emphasis role="comment"># Pointy-haired boss</emphasis>

<emphasis role="comment"># An alias that references two other aliases</emphasis>
alias friends alan, briony
</screen>

      <para>
      To remove an alias or aliases (<quote>*</quote> means all aliases):
      </para>

<screen>
unalias muttdude
unalias *
</screen>

      <para>
        Note: The alias <emphasis>key</emphasis> is matched case
        insensitively when creating (checking for duplicates), removing, or
        expanding aliases.
      </para>
      <para>
        Unlike other mailers, NeoMutt doesn't require aliases to be defined in
        a special file. The <command>alias</command> command can appear
        anywhere in a configuration file, as long as this file is
        <link linkend="source"><command>sourced</command></link>. Consequently,
        you can have multiple alias files, or you can have all aliases defined
        in your <literal>.neomuttrc</literal>.
      </para>
      <para>
        On the other hand, the
        <link linkend="create-alias"><literal>&lt;create-alias&gt;</literal></link>
        function can use only one file, the one pointed to by the
        <link linkend="alias-file">$alias_file</link> variable (which is
        <literal>~/.neomuttrc</literal> by default). This file is not special
        either, in the sense that NeoMutt will happily append aliases to any
        file, but in order for the new aliases to take effect you need to
        explicitly <link linkend="source"><command>source</command></link> this
        file too.
      </para>
      <example id="ex-alias-external">
        <title>Configuring external alias files</title>

<screen>
source /usr/local/share/NeoMutt.aliases
source ~/.mail_aliases
set alias_file=~/.mail_aliases
</screen>

      </example>
      <para>
        To use aliases, you merely use the alias at any place in NeoMutt where
        NeoMutt prompts for addresses, such as the <emphasis>To:</emphasis> or
        <emphasis>Cc:</emphasis> prompt. You can also enter aliases in your
        editor at the appropriate headers if you have the
        <link linkend="edit-headers">$edit_headers</link> variable set.
      </para>
      <para>
        In addition, at the various address prompts, you can use the tab
        character to expand a partial alias to the full alias. If there are
        multiple matches, NeoMutt will bring up a menu with the matching
        aliases. In order to be presented with the full list of aliases, you
        must hit tab without a partial alias, such as at the beginning of the
        prompt or after a comma denoting multiple addresses.
      </para>
      <para>
        In the alias menu, you can select as many aliases as you want with the
        <literal>tag-entry</literal> key (default: &lt;Space&gt; or t), and use
        the <emphasis>exit</emphasis> key (default: q) to return to the address
        prompt.
      </para>
    </sect1>

    <sect1 id="key-bindings">
      <title>Changing the Default Key Bindings</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>bind</command>
        <arg choice="plain">
          <replaceable class="parameter">map</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">,map</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">key</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">function</replaceable>
        </arg>
        <command>unbind</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <arg choice="plain">
              <replaceable class="parameter">map</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">,map</replaceable>
            </arg>
          </arg>
        </group>
        <group choice="opt">
          <arg choice="plain">
            <replaceable class="parameter">key</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        This command allows you to change the default key bindings (operation
        invoked when pressing a key).
      </para>

      <sect2 id="bind">
        <title>Binding a Key Sequence to a Function</title>
        <para>
          The <literal>bind</literal> command allows to assign a new effect to
          a key (e.g. <literal>a</literal>) or a keysequence
          (e.g. <literal>gh</literal> – that is pressing <literal>g</literal>
          followed by a press of <literal>h</literal>).  Its syntax is:
        </para>
        <cmdsynopsis>
          <command>bind</command>
          <arg choice="plain">
            <replaceable class="parameter">map</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">,map</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">key</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">function</replaceable>
          </arg>
        </cmdsynopsis>
        <para>
          <emphasis>map</emphasis> specifies in which menu the binding belongs.
          Multiple maps may be specified by separating them with commas (no
          additional whitespace is allowed). The currently defined maps are:
        </para>
        <anchor id="maps" />
        <variablelist>
          <varlistentry>
            <term>generic</term>
            <listitem>
              <para>
                This is not a real menu, but is used as a fallback for all of the
                other menus except for the pager and editor modes. If a key is
                not defined in another menu, NeoMutt will look for a binding to
                use in this menu. This allows you to bind a key to a certain
                function in multiple menus instead of having multiple
                <command>bind</command> statements to accomplish the same task.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>alias</term>
            <listitem>
              <para>
                The alias menu is the list of your personal aliases as defined in
                your <literal>.neomuttrc</literal>. It is the mapping from
                a short alias name to the full email address(es) of the
                recipient(s).
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>attach</term>
            <listitem>
              <para>
                The attachment menu is used to access the attachments on received
                messages.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>browser</term>
            <listitem>
              <para>
                The browser is used for both browsing the local directory
                structure, and for listing all of your incoming mailboxes.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>editor</term>
            <listitem>
              <para>
                The editor is used to allow the user to enter a single line of
                text, such as the <emphasis>To</emphasis> or
                <emphasis>Subject</emphasis> prompts in the
                <literal>compose</literal> menu.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>index</term>
            <listitem>
              <para>
                The index is the list of messages contained in a mailbox.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>compose</term>
            <listitem>
              <para>
                The compose menu is the screen used when sending a new message.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>pager</term>
            <listitem>
              <para>
                The pager is the mode used to display message/attachment data,
                and help listings.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>pgp</term>
            <listitem>
              <para>
                The pgp menu is used to select the OpenPGP keys used to encrypt
                outgoing messages.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>smime</term>
            <listitem>
              <para>
                The smime menu is used to select the OpenSSL certificates used to
                encrypt outgoing messages.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>postpone</term>
            <listitem>
              <para>
                The postpone menu is similar to the index menu, except is used
                when recalling a message the user was composing, but saved until
                later.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>query</term>
            <listitem>
              <para>
                The query menu is the browser for results returned by
                <link linkend="query-command">$query_command</link>.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          <emphasis>key</emphasis> is the key (or key sequence) you wish to bind.
          To specify a control character, use the sequence
          <emphasis>\Cx</emphasis>, where <emphasis>x</emphasis> is the letter of
          the control character (for example, to specify control-A use
          <quote>\Ca</quote>). Note that the case of <emphasis>x</emphasis> as
          well as <emphasis>\C</emphasis> is ignored, so that
          <emphasis>\CA</emphasis>, <emphasis>\Ca</emphasis>,
          <emphasis>\cA</emphasis> and <emphasis>\ca</emphasis> are all
          equivalent. An alternative form is to specify the key as a three digit
          octal number prefixed with a <quote>\</quote> (for example
          <emphasis>\177</emphasis> is equivalent to <emphasis>\c?</emphasis>).
          You can also use the form <emphasis>&lt;177&gt;</emphasis>, which
          allows octal numbers with an arbitrary number of digits.  In addition,
          <emphasis>key</emphasis> may be a symbolic name as shown in <xref
          linkend="tab-key-names"/>.

        </para>

        <table id="tab-key-names">
          <title>Symbolic key names</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Symbolic name</entry>
                <entry>Meaning</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>\t</entry>
                <entry>tab</entry>
              </row>
              <row>
                <entry>&lt;tab&gt;</entry>
                <entry>tab</entry>
              </row>
              <row>
                <entry>&lt;backtab&gt;</entry>
                <entry>backtab / shift-tab</entry>
              </row>
              <row>
                <entry>\r</entry>
                <entry>carriage return</entry>
              </row>
              <row>
                <entry>\n</entry>
                <entry>newline</entry>
              </row>
              <row>
                <entry>\e</entry>
                <entry>escape/alt</entry>
              </row>
              <row>
                <entry>&lt;esc&gt;</entry>
                <entry>escape/alt</entry>
              </row>
              <row>
                <entry>&lt;up&gt;</entry>
                <entry>up arrow</entry>
              </row>
              <row>
                <entry>&lt;down&gt;</entry>
                <entry>down arrow</entry>
              </row>
              <row>
                <entry>&lt;left&gt;</entry>
                <entry>left arrow</entry>
              </row>
              <row>
                <entry>&lt;right&gt;</entry>
                <entry>right arrow</entry>
              </row>
              <row>
                <entry>&lt;pageup&gt;</entry>
                <entry>Page Up</entry>
              </row>
              <row>
                <entry>&lt;pagedown&gt;</entry>
                <entry>Page Down</entry>
              </row>
              <row>
                <entry>&lt;backspace&gt;</entry>
                <entry>Backspace</entry>
              </row>
              <row>
                <entry>&lt;delete&gt;</entry>
                <entry>Delete</entry>
              </row>
              <row>
                <entry>&lt;insert&gt;</entry>
                <entry>Insert</entry>
              </row>
              <row>
                <entry>&lt;enter&gt;</entry>
                <entry>Enter</entry>
              </row>
              <row>
                <entry>&lt;return&gt;</entry>
                <entry>Return</entry>
              </row>
              <row>
                <entry>&lt;keypadenter&gt;</entry>
                <entry>Enter key on numeric keypad</entry>
              </row>
              <row>
                <entry>&lt;home&gt;</entry>
                <entry>Home</entry>
              </row>
              <row>
                <entry>&lt;end&gt;</entry>
                <entry>End</entry>
              </row>
              <row>
                <entry>&lt;space&gt;</entry>
                <entry>Space bar</entry>
              </row>
              <row>
                <entry>&lt;f1&gt;</entry>
                <entry>function key 1</entry>
              </row>
              <row>
                <entry>&lt;f10&gt;</entry>
                <entry>function key 10</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          The <literal>&lt;what-key&gt;</literal> function can be used to explore
          keycode and symbolic names for other keys on your keyboard. Executing
          this function will display information about each key pressed, until
          terminated by <literal>^G</literal>.
        </para>
        <para>
          <emphasis>key</emphasis> does not need to be enclosed in quotes unless
          it contains a space (<quote>&#160;</quote>) or semi-colon
          (<quote>;</quote>).
        </para>
        <para>
          <emphasis>function</emphasis> specifies which action to take when
          <emphasis>key</emphasis> is pressed. For a complete list of functions,
          see the <link linkend="functions">reference</link>. Note that the
          <command>bind</command> expects <emphasis>function</emphasis> to be
          specified without angle brackets.
        </para>
        <para>
          The special function <literal>&lt;noop&gt;</literal> unbinds the
          specified key sequence.  It is recommended to use
          <link linkend="unbind"><literal>unbind</literal></link> instead.
        </para>
      </sect2>

      <sect2 id="unbind">
        <title>Unbinding a Key Sequence</title>
        <para>
          To remove a binding of a key or key sequence
          <literal>unbind</literal> can be used.  Its syntax is:
        </para>
        <cmdsynopsis>
          <command>unbind</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable class="parameter">*</replaceable>
            </arg>
            <arg choice="plain">
              <arg choice="plain">
                <replaceable class="parameter">map</replaceable>
              </arg>
              <arg choice="opt" rep="repeat">
                <replaceable class="parameter">,map</replaceable>
              </arg>
            </arg>
          </group>
          <group choice="opt">
            <arg choice="plain">
              <replaceable class="parameter">key</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>
          <emphasis>map</emphasis> specifies from which menus the key sequence
          should be removed.  Multiple maps may be specified by separating them
          with commas (no additional whitespace is allowed).  If
          <literal>*</literal> is given, then the key sequence is removed from
          all menus.  Valid menu names and their description are listed
          <link linkend="maps">in the <literal>bind</literal> section</link>.
        </para>
        <para>
          <emphasis>key</emphasis> is the key or key sequence to be unbound.
          It may be omitted in which case all keybindings in the given menus
          are removed.  To prevent NeoMutt from becoming unusable some fallback
          key bindings are added afterwards.  The fallback keybindings added
          depend on the menu, they are listed in <xref linkend="tab-fallback-key-bindings" />.
        </para>
        <table id="tab-fallback-key-bindings">
          <title>Fallback key bindings</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Menu</entry>
                <entry>Key</entry>
                <entry>Bound Function</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>generic</entry>
                <entry>&lt;enter&gt;</entry>
                <entry><literal>&lt;select-entry&gt;</literal></entry>
              </row>
              <row>
                <entry>generic</entry>
                <entry>&lt;return&gt;</entry>
                <entry><literal>&lt;select-entry&gt;</literal></entry>
              </row>
              <row>
                <entry>generic</entry>
                <entry>:</entry>
                <entry><literal>&lt;enter-command&gt;</literal></entry>
              </row>
              <row>
                <entry>generic</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>generic</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>alias</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>alias</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>attach</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>attach</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>editor</entry>
                <entry>&lt;backspace&gt;</entry>
                <entry><literal>&lt;backspace&gt;</literal></entry>
              </row>
              <row>
                <entry>editor</entry>
                <entry>\177</entry>
                <entry><literal>&lt;backspace&gt;</literal></entry>
              </row>
              <row>
                <entry>index</entry>
                <entry>&lt;enter&gt;</entry>
                <entry><literal>&lt;display-message&gt;</literal></entry>
              </row>
              <row>
                <entry>index</entry>
                <entry>&lt;return&gt;</entry>
                <entry><literal>&lt;display-message&gt;</literal></entry>
              </row>
              <row>
                <entry>index</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>index</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>compose</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>compose</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>pager</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>pager</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>pager</entry>
                <entry>:</entry>
                <entry><literal>&lt;enter-command&gt;</literal></entry>
              </row>
              <row>
                <entry>pgp</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>pgp</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>smime</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>smime</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>postpone</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>postpone</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>query</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>query</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
              <row>
                <entry>mix</entry>
                <entry>?</entry>
                <entry><literal>&lt;help&gt;</literal></entry>
              </row>
              <row>
                <entry>mix</entry>
                <entry>q</entry>
                <entry><literal>&lt;exit&gt;</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          A key binding can also be unbound by mapping it to the special
          function <literal>&lt;noop&gt;</literal>.  It is, however,
          recommended to use <literal>unbind</literal> instead.
        </para>
      </sect2>

      <sect2 id="crlf">
        <title>Enter versus Return</title>
        <para>
          Prior to 2022, NeoMutt used a default ncurses mode
          (<quote><literal>nl()</literal></quote>).  This mode maps keyboard
          input of either <literal>&lt;Enter&gt;</literal> or
          <literal>&lt;Return&gt;</literal> to the same value, which NeoMutt
          interpreted as <literal>&lt;Return&gt;</literal> internally.
        </para>
        <para>
          However, starting in version 2.2, this mode is turned off,
          allowing <literal>&lt;Return&gt;</literal> and
          <literal>&lt;Enter&gt;</literal> to be mapped separately, if
          desired.  The default keyboard mappings set both, but you can
          override this or create new bindings with one or the other (or
          both).
        </para>
        <para>
          Note that in terminal application, such as NeoMutt,
          <literal>&lt;Enter&gt;</literal> is the same as <quote>\n</quote>
          and <literal>^J</literal>; while <literal>&lt;Return&gt;</literal>
          is the same as <quote>\r</quote> and <literal>^M</literal>.
        </para>
      </sect2>

      <sect2 id="bind-warnings">
        <title>Warnings about Duplicated Bindings</title>
        <para>
          Due to a limitation of NeoMutt, creating key bindings, or macros,
          will overwrite existing mappings with similar, shorter, names.
        </para>

<screen>
bind index g  group-reply
bind index gg first-entry
</screen>

        <para>
          In this example, the <literal>g</literal> binding will be overwritten
          and cannot be used. Newer versions of NeoMutt will warn the user
          about this.
        </para>
        <para>
          To avoid warnings on startup, first set the shorter binding to
          <literal>noop</literal> (no operation).
        </para>

<screen>
bind index g  noop
bind index gg first-entry
</screen>

        <para>
          The same is also possible using <literal>unbind</literal>.
        </para>

<screen>
unbind index g
bind index gg first-entry
</screen>

      </sect2>

      <sect2 id="stty">
        <title>Terminal Keybindings</title>
        <para>
          Some key bindings are controlled by the terminal, and so by
          default can't be bound inside NeoMutt.  These may include
          <literal>^C</literal>, <literal>^\</literal>, <literal>^Q</literal>,
          <literal>^S</literal>, <literal>^Z</literal>, and on BSD/Mac
          <literal>^Y</literal>.  These terminal settings can be viewed and
          changed using the <literal>stty</literal> program.
        </para>
        <para>
          <quote><literal>stty -a</literal></quote> will list the bound
          characters (not all of them affect NeoMutt), and what actions they
          take when pressed.  For example,
          you may see <quote><literal>intr = ^C</literal></quote> in its
          output.  This means typing <literal>^C</literal> will send an
          interrupt signal.  <quote><literal>quit = ^\</literal></quote>
          means typing <literal>^\</literal> (commonly also
          <literal>^4</literal>) will send a quit signal.
        </para>
        <para>
          To unbind a key from an action, you invoke <quote>stty action
          undef</quote>.  For example, <quote><literal>stty quit
          undef</literal></quote> will unbind <literal>^\</literal> (and
          <literal>^4</literal>) from sending the quit signal.  Once unbound
          (e.g, by placing that line in your .profile, or in a NeoMutt wrapper
          script/function) you can use the key sequence in your NeoMutt
          bindings.
        </para>
      </sect2>
    </sect1>

    <sect1 id="cd">
      <title>Changing the current working directory</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>cd</command>
        <arg choice="plain">
          <replaceable class="parameter">directory</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        The <literal>cd</literal> command changes NeoMutt's current working directory.
        This affects commands and functions like <literal>source</literal>,
        <literal>change-folder</literal>, and <literal>save-entry</literal> that use
        relative paths. Using <literal>cd</literal> without directory changes to your
        home directory.
      </para>
    </sect1>

    <sect1 id="charset-hook">
      <title>Defining Aliases for Character Sets</title>
      <anchor id="iconv-hook" />
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>charset-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">alias</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">charset</replaceable>
        </arg>
        <command>iconv-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">charset</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">local-charset</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        The <command>charset-hook</command> command defines an alias for
        a character set. This is useful to properly display messages which are
        tagged with a character set name not known to NeoMutt.
      </para>
      <para>
        The <command>iconv-hook</command> command defines a system-specific
        name for a character set. This is helpful when your systems character
        conversion library insists on using strange, system-specific names for
        character sets.
      </para>
    </sect1>

    <sect1 id="folder-hook">
      <title>Setting Variables Based Upon Mailbox</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>folder-hook</command>
        <arg choice="opt">
          <replaceable class="parameter">-noregex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        It is often desirable to change settings based on which mailbox you are
        reading. The <command>folder-hook</command> command provides a method
        by which you can execute any configuration command.
        The <emphasis>command</emphasis> is executed before loading any mailboxes
        matching <emphasis>regex</emphasis>. The <emphasis>-noregex</emphasis>
        switch controls whether <emphasis>regex</emphasis> is matched using
        a simple string comparison or a full regex match.
        If a mailbox matches multiple <command>folder-hook</command>s, they are
        executed in the order given in the <literal>.neomuttrc</literal>.
      </para>
      <para>
        The regex parameter has
        <link linkend="shortcuts">mailbox shortcut</link> expansion performed
        on the first character. See <xref linkend="mailbox-hook" /> for more
        details.
      </para>
      <note>
        <para>
          If you use the <quote>!</quote> shortcut for
          <link linkend="spool-file">$spool_file</link> at the beginning of
          <emphasis>regex</emphasis>, you must place it inside of double or
          single quotes in order to distinguish it from the logical
          <emphasis>not</emphasis> operator for the expression.
        </para>
      </note>
      <note>
        <para>
          Settings are <emphasis>not</emphasis> restored when you leave the
          mailbox. For example, a command action to perform is to change the
          sorting method based upon the mailbox being read:
        </para>
        <screen>folder-hook work "set sort=threads"</screen>
        <para>
          However, the sorting method is not restored to its previous value
          when reading a different mailbox. To specify
          a <emphasis>default</emphasis> command, use the regex
          <quote>.</quote> before other <command>folder-hook</command>s
          adjusting a value on a per-folder basis because
          <command>folder-hook</command>s are evaluated in the order given in
          the configuration file.
        </para>
      </note>
      <note>
        <para>
          The keyboard buffer will not be processed until after all hooks are
          run; multiple <link linkend="push">push</link> or
          <link linkend="exec">exec</link> commands will end up being processed
          in reverse order.
        </para>
      </note>
      <para>
        The following example will set the <link linkend="sort">sort</link>
        variable to <literal>date-sent</literal> for all folders but to
        <literal>threads</literal> for all folders containing
        <quote>work</quote> in their name.
      </para>
      <example id="ex-folder-sorting">
        <title>Setting sort method based on mailbox name</title>

<screen>
folder-hook . "set sort=date-sent"
folder-hook work "set sort=threads"
</screen>

      </example>
    </sect1>

    <sect1 id="macros">
      <title>Keyboard Macros</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>macro</command>
        <arg choice="plain">
          <replaceable class="parameter">menu</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">,menu</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">key</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">sequence</replaceable>
        </arg>
        <arg choice="opt">
          <replaceable class="parameter">description</replaceable>
        </arg>
        <command>unmacro</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">map</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">,map</replaceable>
          </arg>
        </group>
        <group choice="opt">
          <arg choice="plain">
            <replaceable class="parameter">key</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        Macros are a convenient way to automate various actions.
      </para>

      <sect2 id="macro">
        <title>Creating a Key Macro</title>
        <para>
          This command allows you to create a macro.
        </para>
        <cmdsynopsis>
          <command>macro</command>
          <arg choice="plain">
            <replaceable class="parameter">menu</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">,menu</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">key</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">sequence</replaceable>
          </arg>
          <arg choice="opt">
            <replaceable class="parameter">description</replaceable>
          </arg>
        </cmdsynopsis>
        <para>
          Macros are useful when you would like a single key to perform a series
          of actions. When you press <emphasis>key</emphasis> in menu
          <emphasis>menu</emphasis>, NeoMutt will behave as if you had typed
          <emphasis>sequence</emphasis>. So if you have a common sequence of
          commands you type, you can create a macro to execute those commands
          with a single key or fewer keys.
        </para>
        <para>
          <emphasis>menu</emphasis> is the <link linkend="maps">map</link> which
          the macro will be bound in. Multiple maps may be specified by
          separating multiple menu arguments by commas. Whitespace may not be
          used in between the menu arguments and the commas separating them.
        </para>
        <para>
          <emphasis>key</emphasis> and <emphasis>sequence</emphasis> are expanded
          by the same rules as the <link linkend="bind">key bindings</link> with
          some additions. The first is that control characters in
          <emphasis>sequence</emphasis> can also be specified as
          <emphasis>^x</emphasis>. In order to get a caret (<quote>^</quote>)
          you need to use <emphasis>^^</emphasis>. Secondly, to specify a certain
          key such as <emphasis>up</emphasis> or to invoke a function directly,
          you can use the format <emphasis>&lt;key name&gt;</emphasis> and
          <emphasis>&lt;function name&gt;</emphasis>. For a listing of key names
          see the section on <link linkend="bind">key bindings</link>. Functions
          are listed in the <link linkend="functions">reference</link>.
        </para>
        <para>
          The advantage with using function names directly is that the macros
          will work regardless of the current key bindings, so they are not
          dependent on the user having particular key definitions. This makes
          them more robust and portable, and also facilitates defining of macros
          in files used by more than one user (e.g., the system neomuttrc).
        </para>
        <para>
          Optionally you can specify a descriptive text after
          <emphasis>sequence</emphasis>, which is shown in the help screens if
          they contain a description.
        </para>
        <note>
          <para>
            Macro definitions (if any) listed in the help screen(s), are silently
            truncated at the screen width, and are not wrapped.
          </para>
        </note>
      </sect2>

      <sect2 id="unmacro">
        <title>Removing a Key Macro</title>
        <para>
          This command will remove a macro.
        </para>
        <cmdsynopsis>
          <command>unmacro</command>
          <arg choice="plain">
            <replaceable class="parameter">menu</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">,menu</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">key</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">sequence</replaceable>
         </arg>
        </cmdsynopsis>
        <para>
          <emphasis>menu</emphasis> specifies from which menus the macro
          should be removed.  Multiple menus may be specified by separating them
          with commas (no additional whitespace is allowed).  If
          <literal>*</literal> is given, then the macro is removed from
          all menus.  Valid menu names and their description are listed
          <link linkend="maps">in the <literal>bind</literal> section</link>.
        </para>
        <para>
          <emphasis>key</emphasis> is the key or key sequence to be unbound.
          It may be omitted in which case all macros in the given menus
          are removed.
        </para>
        <note>
          <para>
            Missing key sequence in unmacro command means unmacro all macros in menus
            given in <emphasis>menu</emphasis>.
          </para>
        </note>
      </sect2>
    </sect1>

    <sect1 id="color">
      <title>Using Color and Mono Video Attributes</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>color</command>
        <arg choice="opt">
          <option>compose</option>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">object</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">attribute</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <command>color</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern-object</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">attribute</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <command>color</command>
        <arg choice="plain">
          <replaceable class="parameter">regex-object</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">attribute</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <command>color</command>
        <arg choice="plain">
          <option>status</option>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">attribute</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">foreground</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">background</replaceable>
        </arg>
        <group choice="opt">
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <group choice="opt">
            <arg choice="plain">
              <replaceable class="parameter">num</replaceable>
            </arg>
          </group>
        </group>
        <command>uncolor</command>
        <arg choice="opt">
          <option>compose</option>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">object</replaceable>
        </arg>
        <command>uncolor</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern-object</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable>pattern</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
        </group>
        <command>uncolor</command>
        <arg choice="plain">
          <replaceable class="parameter">regex-object</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable>regex</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
        </group>
        <command>uncolor</command>
        <arg choice="plain">
          <option>status</option>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable>regex</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        If your terminal supports color, you can spice up NeoMutt by creating
        your own <link linkend="color-style">color scheme</link>.
      </para>
      <note>
        <para>
          The config variable
          <link linkend="color-directcolor">$color_directcolor</link> must be
          set to its final value <emphasis>before</emphasis> using any
          <literal>color</literal> command.
        </para>
      </note>
      <para>
        The types of objects that can be colored fall into two categories:
        <link linkend="color-simple">Simple Colors</link> such as the
        highlight in the index, and <link linkend="color-lists">Color Lists</link>
        such as the status bar.  These lists can created complexing coloring
        rules.
      </para>

      <sect2 id="color-style">
        <title>Color Style</title>
        <para>
          Objects in NeoMutt can be given colors and attributes to make things
          easier to find and use.
        </para>
        <note>
          <para>
            Objects must be given <emphasis>both</emphasis> a foreground and
            background color (it is not possible to specify one or the other).
            Note that <literal>default</literal> can be used as transparent
            color (see below).
          </para>
        </note>
        <para>
          Colors can be specified in up to three ways, using their name
          such as <literal>green</literal>, <literal>blue</literal>;
          by their number in the palette,
          such as <literal>color12</literal>, <literal>color207</literal>
          (the palette consists of the
          <ulink url="https://web.archive.org/web/20190712111427/https://jonasjacek.github.io/colors/">256 Xterm colors</ulink>);
          or by using hexadecimal RGB codes <literal>#RRGGBB</literal>, where
          <literal>RR</literal>, <literal>GG</literal>, <literal>BB</literal>
          are the red, green, and blue components given as a hexadecimal number
          between 00 and FF (=255), e.g. <literal>#00FFFF</literal> (bright
          cyan) or <literal>#12af84</literal> (greenish).  The last syntax is
          only accepted if <link linkend="color-directcolor">$color_directcolor</link>
          is set.
        </para>
        <para>
          Named colours may also be prefixed by a <emphasis>modifier</emphasis>.
          <literal>bright</literal> or <literal>light</literal> will make the
          color boldfaced or light (e.g., <literal>brightred</literal>).
          <literal>alert</literal> to make a blinking/alert color (e.g.,
          <literal>alertred</literal>).
        </para>
        <para>
          The precise behavior depends on the terminal and its configuration.
          In particular, the boldfaced/light difference and such background
          colors may be available only for terminals configured with at least
          16&nbsp;colors, as specified by the <literal>$TERM</literal>
          environment variable.
        </para>
        <para>
          <emphasis>foreground</emphasis> and <emphasis>background</emphasis>
          can be one of the following:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              white
            </para>
          </listitem>
          <listitem>
            <para>
              black
            </para>
          </listitem>
          <listitem>
            <para>
              green
            </para>
          </listitem>
          <listitem>
            <para>
              magenta
            </para>
          </listitem>
          <listitem>
            <para>
              blue
            </para>
          </listitem>
          <listitem>
            <para>
              cyan
            </para>
          </listitem>
          <listitem>
            <para>
              yellow
            </para>
          </listitem>
          <listitem>
            <para>
              red
            </para>
          </listitem>
          <listitem>
            <para>
              default
            </para>
          </listitem>
        </itemizedlist>
        <para>
          In addition to the colors, objects may have their <emphasis>attributes</emphasis> set:
        </para>
        <itemizedlist>
          <listitem>
            <para>none</para>
          </listitem>
          <listitem>
            <para>bold</para>
          </listitem>
          <listitem>
            <para>italic</para>
          </listitem>
          <listitem>
            <para>reverse</para>
          </listitem>
          <listitem>
            <para>standout</para>
          </listitem>
          <listitem>
            <para>underline</para>
          </listitem>
        </itemizedlist>
        <para>
          If your terminal supports it, the special keyword
          <emphasis>default</emphasis> can be used as a transparent color.
          In this case <emphasis>default</emphasis> can be used to only set the
          foreground or background color.  The following sets the foreground
          and background color individually: the first command leaves the
          foreground untouched while the second one leaves the background
          untouched:
        </para>
<screen>
<emphasis role="comment"># Make error messages white text on a red background</emphasis>
color error default red
color error white   default
</screen>
        <para>
          On startup NeoMutt tries to detect whether the terminal it is running
          in supports directcolor (aka TrueColor aka 24-bit color).  If the
          terminal does, NeoMutt enables the config variable
          <link linkend="color-directcolor">$color_directcolor</link> otherwise
          it disables it.  Furthermore, NeoMutt allows to use the RGB colors
          syntax with the <literal>color</literal> command to colour elements
          with 24-bit colors.
        </para>
        <para>
          For the detection to work the
          <emphasis>TERM</emphasis> environment variable must be set up
          properly to advertise the terminals directcolor capability.
          <emphasis>TERM</emphasis>-values which do that usually end in
          <literal>-direct</literal>, e.g. <literal>xterm-direct</literal>.
        </para>
        <para>
          If NeoMutt does not detect directcolor color support, but you are
          sure your terminal supports it, you may try to explicitly set the
          <emphasis>TERM</emphasis> environment variable by starting NeoMutt
          from the terminal as follows:
        </para>
<screen>
TERM=xterm-direct neomutt
</screen>
        <para>
          If that still does not help, you can additionally force NeoMutt to
          use directcolors by setting
          <link linkend="color-directcolor">$color_directcolor</link>.
          Setting this variable manually is strongly discouraged since it
          usually leads to wrong colors.
        </para>
      </sect2>

      <sect2 id="color-simple">
        <title>Simple Colors</title>
        <para>
          Most of NeoMutt's colorable objects follow simple rules.
          They don't use a pattern and any new configuration will overwrite the
          old colours.
        </para>
        <para>
          Simple colors can be undone by setting the foreground and background
          to <literal>default</literal>, or by using the <literal>uncolor</literal>
          command.
        </para>
        <para>
          These are general NeoMutt objects:
        </para>
        <table id="table-color-simple">
          <title>Simple Colours</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Colour Name</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>attachment</entry>
                <entry>Colour for attachment headers</entry>
              </row>
              <row>
                <entry>bold</entry>
                <entry>Highlighting bold patterns in the body of messages</entry>
              </row>
              <row>
                <entry>error</entry>
                <entry>Error messages printed by NeoMutt</entry>
              </row>
              <row>
                <entry>hdrdefault</entry>
                <entry>Default colour of the message header in the pager</entry>
              </row>
              <row>
                <entry>indicator</entry>
                <entry>Arrow or bar used to indicate the current item in a menu</entry>
              </row>
              <row>
                <entry>markers</entry>
                <entry>The "+" markers at the beginning of wrapped lines in the pager</entry>
              </row>
              <row>
                <entry>message</entry>
                <entry>Informational messages</entry>
              </row>
              <row>
                <entry>normal</entry>
                <entry>Default colour for all text</entry>
              </row>
              <row>
                <entry>options</entry>
                <entry>The key letters in multi-choice questions</entry>
              </row>
              <row>
                <entry>progress</entry>
                <entry><link linkend="progress">Visual progress bar</link></entry>
              </row>
              <row>
                <entry>prompt</entry>
                <entry>A question</entry>
              </row>
              <row>
                <entry>search</entry>
                <entry>Highlighting of words in the pager</entry>
              </row>
              <row>
                <entry>signature</entry>
                <entry>Email's signature lines (.sig)</entry>
              </row>
              <row>
                <entry>tilde</entry>
                <entry>The "~" used to pad blank lines in the pager</entry>
              </row>
              <row>
                <entry>tree</entry>
                <entry>Thread tree drawn in the message index and attachment menu</entry>
              </row>
              <row>
                <entry>underline</entry>
                <entry>Highlighting underlined patterns in the body of messages</entry>
              </row>
              <row>
                <entry>warning</entry>
                <entry>Warning messages</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
<screen>
<emphasis role="comment"># Make error messages white text on a red background</emphasis>
color error white red
<emphasis role="comment"># Make questions bold, underlined, with light blue text (with default background)</emphasis>
color prompt bold underline cyan default
</screen>
<screen>
uncolor error
uncolor prompt
</screen>
        <para>
          These are sidebar objects.
          See <link linkend="sidebar-intro">Sidebar Intro</link> for more details.
        </para>
        <table id="color-simple-sidebar">
          <title>Simple Sidebar Colours</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Colour Name</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>sidebar_background</entry>
                <entry>The entire sidebar panel</entry>
              </row>
              <row>
                <entry>sidebar_divider</entry>
                <entry>The dividing line between the Sidebar and the Index/Pager panels</entry>
              </row>
              <row>
                <entry>sidebar_flagged</entry>
                <entry>Mailboxes containing flagged mail</entry>
              </row>
              <row>
                <entry>sidebar_highlight</entry>
                <entry>Cursor to select a mailbox</entry>
              </row>
              <row>
                <entry>sidebar_indicator</entry>
                <entry>The mailbox open in the Index panel</entry>
              </row>
              <row>
                <entry>sidebar_new</entry>
                <entry>Mailboxes containing new mail</entry>
              </row>
              <row>
                <entry>sidebar_ordinary</entry>
                <entry>Mailboxes that have no new/flagged mails, etc</entry>
              </row>
              <row>
                <entry>sidebar_spool_file</entry>
                <entry>Mailbox that receives incoming mail</entry>
              </row>
              <row>
                <entry>sidebar_unread</entry>
                <entry>Mailboxes containing unread mail</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
<screen>
color sidebar_divider brightblack default
</screen>
<screen>
uncolor sidebar_divider
</screen>
        <para>
          These are compose objects.
        </para>
        <note>
          <para>
            The compose objects use a slightly different format of command.
            They prefix the style with the word <literal>compose</literal>.
          </para>
        </note>
        <table id="color-simple-compose">
          <title>Simple Compose Colours</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Colour Name</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>header</entry>
                <entry>Header labels, e.g. From:</entry>
              </row>
              <row>
                <entry>security_encrypt</entry>
                <entry>Mail will be encrypted</entry>
              </row>
              <row>
                <entry>security_sign</entry>
                <entry>Mail will be signed</entry>
              </row>
              <row>
                <entry>security_both</entry>
                <entry>Mail will be encrypted and signed</entry>
              </row>
              <row>
                <entry>security_none</entry>
                <entry>Mail will not be encrypted or signed</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
<screen>
color compose header bold white default
</screen>
<screen>
uncolor compose header
</screen>
        <para>
          The quoted objects refer to quoted lines in an email reply.
          They are defined using the
          <link linkend="reply-regex"><literal>$reply_regex</literal></link>
          config variable.
        </para>
        <para>
          The quoted email colours don't use pattern.
          The first colour, <literal>quoted</literal> provides a default colour
          for all quoted text.  Also, each different level of quoting can be given
          a different colour using, <literal>quoted1</literal>,
          <literal>quoted2</literal>, <literal>quoted3</literal> up to
          <literal>quoted9</literal>.
        </para>
        <table id="color-quoted">
          <title>Quoted Email Colours</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Colour Name</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>quoted</entry>
                <entry>Text matching <link linkend="quote-regex">$quote_regex</link> in the body of a message</entry>
              </row>
              <row>
                <entry>quoted1</entry>
                <entry>1 level deeper quoted text, e.g. <literal>&gt; &gt; text</literal></entry>
              </row>
              <row>
                <entry>quoted2</entry>
                <entry>2 level deeper quoted text, e.g. <literal>&gt; &gt; &gt; text</literal></entry>
              </row>
              <row>
                <entry>...</entry>
                <entry>...</entry>
              </row>
              <row>
                <entry>quoted9</entry>
                <entry>9 level deeper quoted text</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
<screen>
color quoted brightblue default
color quoted1 brightgreen default
color quoted2 yellow default
</screen>
<screen>
uncolor quoted
uncolor quoted1
uncolor quoted2
</screen>
      </sect2>

      <sect2 id="color-lists">
        <title>Color Lists</title>
        <para>
          Some objects in NeoMutt support <emphasis>lists</emphasis> of color
          rules.  Each rule has a pattern and a color.
          Each is checked in turn
          and any matching rules are applied cumulatively (overlaid).
        </para>
        <para>
          When applying the colours, each pattern will be tested against the
          field to be colored.  All of the matching patterns will have their
          colors applied in the order they are configured.
        </para>
        <para>
          The color lists work in slightly different ways to each other.
        </para>
        <para>
          <literal>attach_headers</literal>, <literal>body</literal> and
          <literal>header</literal> match a <emphasis>regular expression</emphasis>
          (regex) in the header/body of a email.
        </para>
        <para>
          <literal>index</literal> objects match a <emphasis>pattern</emphasis>
          in the email index (see <xref linkend="patterns" />)
          Note that IMAP server-side searches (=b, =B, =h) are not
          supported for color index patterns.
        </para>
        <para>
          When <link linkend="header-color-partial">$header_color_partial</link>
          is unset (the default), a <literal>header</literal> matched by
          <emphasis>regex</emphasis> will have color applied to the entire
          header. When set, color is applied only to the exact text matched by
          <emphasis>regex</emphasis>.
        </para>
        <para>
          For the <literal>status</literal> list, the
          <emphasis>regular expression</emphasis> is optional.  Without one,
          the command will set the default style for the status bar.  With a
          regex (and an optional number), it's possible to style parts of the
          status bar.  See: <link linkend="status-color">Status-Color feature</link>
          for more detail.
        </para>
        <para>
          Color lists can be undone by using the <literal>uncolor</literal>
          command and the pattern or <literal>*</literal> to match.
        </para>
        <table id="color-regex-lists">
          <title>Colour Regex Lists</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Colour Name</entry>
                <entry>Match</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>attach_headers</entry>
                <entry>regex</entry>
                <entry>Attachment headers</entry>
              </row>
              <row>
                <entry>body</entry>
                <entry>regex</entry>
                <entry>Email body</entry>
              </row>
              <row>
                <entry>header</entry>
                <entry>regex</entry>
                <entry>Email headers</entry>
              </row>
              <row>
                <entry>index</entry>
                <entry>pattern</entry>
                <entry>Default highlighting of the entire index line</entry>
              </row>
              <row>
                <entry>index_author</entry>
                <entry>pattern</entry>
                <entry>Author in the index: <literal>%A</literal>, <literal>%a</literal>, <literal>%F</literal>, <literal>%L</literal>, <literal>%n</literal></entry>
              </row>
              <row>
                <entry>index_collapsed</entry>
                <entry>pattern</entry>
                <entry>Number of messages in a collapsed thread: <literal>%M</literal></entry>
              </row>
              <row>
                <entry>index_date</entry>
                <entry>pattern</entry>
                <entry>Date field: <literal>%d</literal>, <literal>%D</literal>, <literal>%{fmt}</literal>, <literal>%[fmt]</literal>, <literal>%(fmt)</literal></entry>
              </row>
              <row>
                <entry>index_flags</entry>
                <entry>pattern</entry>
                <entry>Flags in the index: <literal>%S</literal>, <literal>%Z</literal></entry>
              </row>
              <row>
                <entry>index_label</entry>
                <entry>pattern</entry>
                <entry>Message label: <literal>%y</literal>, <literal>%Y</literal></entry>
              </row>
              <row>
                <entry>index_number</entry>
                <entry>pattern</entry>
                <entry>Message number: <literal>%C</literal></entry>
              </row>
              <row>
                <entry>index_size</entry>
                <entry>pattern</entry>
                <entry>Message size: <literal>%c</literal>, <literal>%cr</literal>, <literal>%l</literal></entry>
              </row>
              <row>
                <entry>index_subject</entry>
                <entry>pattern</entry>
                <entry>Subject in the index: <literal>%s</literal></entry>
              </row>
              <row>
                <entry>index_tag</entry>
                <entry>pattern</entry>
                <entry>Tags in the index: <literal>%G</literal></entry>
              </row>
              <row>
                <entry>index_tags</entry>
                <entry>pattern</entry>
                <entry>Transformed message tags: <literal>%g</literal>, <literal>%J</literal></entry>
              </row>
              <row>
                <entry>status</entry>
                <entry>regex</entry>
                <entry>Status bar</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
<screen>
<emphasis role="comment"># Highlight emails from work (entire line)</emphasis>
color index          cyan default "~f @work.com"
<emphasis role="comment"># Extra highlighting for the boss (just the author column)</emphasis>
color index_author   cyan red     "~f boss@work.com"
</screen>
<screen>
uncolor index          "~f @work.com"
<emphasis role="comment"># Clear all index_author colors</emphasis>
uncolor index_author   *
</screen>
<screen>
<emphasis role="comment"># Add some highlights to the body of an email</emphasis>
color body    bold red    default "(urgent|important)"
color body         yellow default "(warning|notice)"
<emphasis role="comment"># Make the label header red</emphasis>
color header       cyan   default "X-Label"
</screen>
<screen>
uncolor body    "(urgent|important)"
<emphasis role="comment"># Clear all body colors</emphasis>
uncolor body    *
uncolor header  "X-Label"
</screen>
<screen>
<emphasis role="comment"># Set the default color for the entire status line</emphasis>
color status blue white
<emphasis role="comment"># Highlight New, Deleted, or Flagged emails</emphasis>
color status brightred white '(New|Del|Flag):[0-9]+'
<emphasis role="comment"># Highlight the contents of the []s but not the [] themselves</emphasis>
color status red default '\[([^]]+)\]' 1
</screen>
<screen>
uncolor status '(New|Del|Flag):[0-9]+'
uncolor status *
</screen>
      </sect2>

      <sect2 id="color-mono">
        <title>Mono Color</title>

        <para>
          If your terminal does not support color, it is still possible change
          the video attributes through the use of the <quote>mono</quote>
          command. Usage:
        </para>
        <cmdsynopsis>
          <command>mono</command>
          <arg choice="plain">
            <replaceable class="parameter">object</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">attribute</replaceable>
          </arg>
          <command>mono</command>
          <group choice="req">
            <arg choice="plain">
              <option>header</option>
            </arg>
            <arg choice="plain">
              <option>body</option>
            </arg>
          </group>
          <arg choice="plain">
            <replaceable class="parameter">attribute</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <command>mono</command>
          <arg choice="plain">
            <option>index-object</option>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">attribute</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">pattern</replaceable>
          </arg>
          <command>unmono</command>
          <group choice="req">
            <arg choice="plain">
              <option>index-object</option>
            </arg>
            <arg choice="plain">
              <option>header</option>
            </arg>
            <arg choice="plain">
              <option>body</option>
            </arg>
          </group>
          <group choice="req">
            <arg choice="plain">
              <replaceable>*</replaceable>
            </arg>
            <arg choice="plain" rep="repeat">
              <replaceable>pattern</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>
          For <emphasis>object</emphasis>, <emphasis>composeobject</emphasis>, and
          <emphasis>attribute</emphasis>, see the <command>color</command> command.
        </para>
      </sect2>
    </sect1>

    <sect1 id="msg-hdr-display">
      <title>Message Header Display</title>

      <sect2 id="hdr-folding">
        <title>Header Display</title>
        <para>
          When displaying a message in the pager, NeoMutt folds long header
          lines at <link linkend="wrap">$wrap</link> columns. Though there're
          precise rules about where to break and how, NeoMutt always folds
          headers using a tab for readability. (Note that the sending side is
          not affected by this, NeoMutt tries to implement standards compliant
          folding.)
        </para>
        <para>
          Despite not being a real header, NeoMutt will also display an mbox
          &quot;From_&quot; line in the pager along with other headers.  This
          line can be manipulated with <command>ignore/unignore</command> and
          <command>hdr_order/unhdr_order</command> commands.
        </para>
      </sect2>

      <sect2 id="ignore">
        <title>Selecting Headers</title>
        <para>
          Usage:
        </para>
        <cmdsynopsis>
          <command>ignore</command>
          <arg choice="plain">
            <replaceable class="parameter">string</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">string</replaceable>
          </arg>
          <command>unignore</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable>*</replaceable>
            </arg>
            <arg choice="plain" rep="repeat">
              <replaceable>string</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>
          Messages often have many header fields added by automatic processing
          systems, or which may not seem useful to display on the screen. This
          command allows you to specify header fields which you don't normally
          want to see in the pager.
        </para>
        <para>
          You do not need to specify the full header field name. For example,
          <quote>ignore content-</quote> will ignore all header fields that
          begin with the string <quote>content-</quote>.
          <quote>ignore&#160;*</quote> will ignore all headers.
        </para>
        <para>
          To remove a previously added token from the list, use the
          <quote>unignore</quote> command. The <quote>unignore</quote> command
          will make NeoMutt display headers matching the given string. For
          example, if you do <quote>ignore x-</quote> it is possible to
          <quote>unignore x-mailer</quote>.
        </para>
        <para>
          <quote>unignore&#160;*</quote> will remove all tokens from the ignore
          list.
        </para>
        <example id="ex-header-weeding">
          <title>Header weeding</title>

<screen>
<emphasis role="comment"># Sven's draconian header weeding</emphasis>
ignore *
unignore from date subject to cc
unignore organization organisation x-mailer: x-newsreader: x-mailing-list:
unignore posted-to:
</screen>

        </example>
        <para>
          The above example will show &quot;From:&quot; headers as well as mbox
          &quot;From_&quot; lines.  To hide the latter, instead use
          &quot;<literal>unignore from: date subject to cc</literal>&quot; on
          the second line.
        </para>
      </sect2>

      <sect2 id="hdr-order">
        <title>Ordering Displayed Headers</title>
        <para>
          Usage:
        </para>
        <cmdsynopsis>
          <command>hdr_order</command>
          <arg choice="plain">
            <replaceable class="parameter">header</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">header</replaceable>
          </arg>
          <command>unhdr_order</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable>*</replaceable>
            </arg>
            <arg choice="plain" rep="repeat">
              <replaceable>header</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>
          With the <command>hdr_order</command> command you can specify an
          order in which NeoMutt will attempt to present these headers to you
          when viewing messages.
        </para>
        <para>
          <quote><command>unhdr_order</command>*</quote> will clear all
          previous headers from the order list, thus removing the header order
          effects set by the system-wide startup file.
        </para>
        <example id="ex-hdr-order">
          <title>Configuring header display order</title>
          <screen>hdr_order From Date: From: To: Cc: Subject:</screen>
        </example>
      </sect2>
    </sect1>

    <sect1 id="alternates">
      <title>Alternative Addresses</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>alternates</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable>name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable>regex</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable>regex</replaceable>
        </arg>
        <command>unalternates</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable>name</replaceable>
        </arg>
        <group choice="req">
          <arg choice="plain">
            <replaceable>*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable>regex</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        With various functions, NeoMutt will treat messages differently,
        depending on whether you sent them or whether you received them from
        someone else. For instance, when replying to a message that you sent to
        a different party, NeoMutt will automatically suggest to send the
        response to the original message's recipients – responding to yourself
        won't make much sense in many cases. (See
        <link linkend="reply-to">$reply_to</link>.)
      </para>
      <para>
        Many users receive e-mail under a number of different addresses. To
        fully use NeoMutt's features here, the program must be able to
        recognize what e-mail addresses you receive mail under. That's the
        purpose of the <command>alternates</command> command: It takes a list
        of regular expressions, each of which can identify an address under
        which you receive e-mail.
      </para>
      <para>
        As addresses are matched using regular expressions and not exact strict
        comparisons, you should make sure you specify your addresses as precise
        as possible to avoid mismatches. For example, if you specify:
      </para>
      <screen>alternates user@example</screen>
      <para>
        NeoMutt will consider
        <quote><literal>some-user@example</literal></quote> as being your
        address, too which may not be desired. As a solution, in such cases
        addresses should be specified as:
      </para>
      <screen>alternates '^user@example$'</screen>
      <para>
        The <literal>-group</literal> flag causes all of the subsequent regular
        expressions to be added to the named group.
      </para>
      <para>
        The <command>unalternates</command> command can be used to write
        exceptions to <command>alternates</command> regex. If an address
        matches something in an <command>alternates</command> command, but you
        nonetheless do not think it is from you, you can list a more precise
        regex under an <command>unalternates</command> command.
      </para>
      <para>
        To remove a regular expression from the <command>alternates</command>
        list, use the <command>unalternates</command> command with exactly the
        same <emphasis>regex</emphasis>. Likewise, if the
        <emphasis>regex</emphasis> for an <command>alternates</command> command
        matches an entry on the <command>unalternates</command> list, that
        <command>unalternates</command> entry will be removed. If the
        <emphasis>regex</emphasis> for <command>unalternates</command> is
        <quote>*</quote>, <emphasis>all entries</emphasis> on
        <command>alternates</command> will be removed.
      </para>
    </sect1>

    <sect1 id="lists">
      <title>Mailing Lists</title>
      <anchor id="subscribe" />
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>lists</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <command>unlists</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">regex</replaceable>
          </arg>
        </group>
        <command>subscribe</command>
        <arg choice="opt" rep="repeat">
          <option>-group</option>
          <replaceable class="parameter">name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <command>unsubscribe</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">regex</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        NeoMutt has a few nice features for
        <link linkend="using-lists">handling mailing lists</link>. In order to
        take advantage of them, you must specify which addresses belong to
        mailing lists, and which mailing lists you are subscribed to. NeoMutt
        also has limited support for auto-detecting mailing lists: it supports
        parsing <literal>mailto:</literal> links in the common
        <literal>List-Post:</literal> header which has the same effect as
        specifying the list address via the <command>lists</command> command
        (except the group feature). Once you have done this, the
        <link linkend="list-reply"><literal>&lt;list-reply&gt;</literal></link>
        function will work for all known lists. Additionally, when you send a
        message to a known list and <link linkend="followup-to">$followup_to</link>
        is set, NeoMutt will add a Mail-Followup-To header.  For unsubscribed
        lists, this will include your personal address, ensuring you receive a
        copy of replies.  For subscribed mailing lists, the header will not,
        telling other users' mail user agents not to send copies of replies to
        your personal address.
      </para>
      <note>
        <para>
          The Mail-Followup-To header is a non-standard extension which is not
          supported by all mail user agents. Adding it is not bullet-proof
          against receiving personal CCs of list messages. Also note that the
          generation of the Mail-Followup-To header is controlled by the
          <link linkend="followup-to">$followup_to</link> configuration
          variable since it's common practice on some mailing lists to send Cc
          upon replies (which is more a group- than a list-reply).
        </para>
      </note>
      <para>
        More precisely, NeoMutt maintains lists of regular expressions for the
        addresses of known and subscribed mailing lists. Every subscribed
        mailing list is known. To mark a mailing list as known, use the
        <command>list</command> command. To mark it as subscribed, use
        <command>subscribe</command>.
      </para>
      <para>
        You can use regular expressions with both commands. To mark all
        messages sent to a specific bug report's address on Debian's bug
        tracking system as list mail, for instance, you could say
      </para>
      <screen>subscribe [0-9]+.*@bugs.debian.org</screen>
      <para>
        as it's often sufficient to just give a portion of the list's e-mail
        address.
      </para>
      <para>
        Specify as much of the address as you need to to remove ambiguity. For
        example, if you've subscribed to the NeoMutt mailing list, you will
        receive mail addressed to <literal>neomutt-users@neomutt.org</literal>.
        So, to tell NeoMutt that this is a mailing list, you could add
        <literal>lists neomutt-users@</literal> to your initialization file. To
        tell NeoMutt that you are subscribed to it, add
        <literal><command>subscribe</command> neomutt-users</literal> to your
        initialization file instead. If you also happen to get mail from
        someone whose address is <literal>neomutt-users@example.com</literal>,
        you could use
        <literal><command>lists</command> ^neomutt-users@neomutt\\.org$</literal>
        or
        <literal><command>subscribe</command> ^neomutt-users@neomutt\\.org$</literal>
        to match only mail from the actual list.
      </para>
      <para>
        The <literal>-group</literal> flag adds all of the subsequent regular
        expressions to the named <link linkend="addrgroup">address group</link>
        in addition to adding to the specified address list.
      </para>
      <para>
        The <quote>unlists</quote> command is used to remove a token from the
        list of known and subscribed mailing-lists. Use
        <quote>unlists&#160;*</quote> to remove all tokens.
      </para>
      <para>
        To remove a mailing list from the list of subscribed mailing lists, but
        keep it on the list of known mailing lists, use
        <command>unsubscribe</command>.
      </para>
    </sect1>

    <sect1 id="mbox-hook">
      <title>Using Multiple Spool Mailboxes</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>mbox-hook</command>
        <arg choice="opt">
          <replaceable class="parameter">-noregex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        This command is used to move read messages from a specified mailbox to
        a different mailbox automatically when you quit or change folders.
        <emphasis>regex</emphasis> is used to specifying the mailbox to
        treat as a <quote>spool</quote> mailbox and <emphasis>mailbox</emphasis>
        specifies where mail should be saved when read.
        The <emphasis>-noregex</emphasis> switch controls whether
        <emphasis>regex</emphasis> is matched using a simple string
        comparison or a full regex match.
      </para>
      <para>
        The regex parameter has
        <link linkend="shortcuts">mailbox shortcut</link> expansion performed
        on the first character. See <xref linkend="mailbox-hook" /> for more
        details.
      </para>
      <para>
        Note that execution of mbox-hooks is dependent on the
        <link linkend="move">$move</link> configuration variable. If set to
        <quote>no</quote> (the default), mbox-hooks will not be executed.
      </para>
      <para>
        Unlike some of the other <emphasis>hook</emphasis> commands, only the
        <emphasis>first</emphasis> matching regex is used (it is not possible
        to save read mail in more than a single mailbox).
      </para>
    </sect1>

    <sect1 id="mailboxes">
      <title>Monitoring Incoming Mail</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>mailboxes</command>
        <arg choice="opt">
          <group choice="opt">
            <arg choice="plain">
              <option>-label</option>
              <replaceable>label</replaceable>
            </arg>
            <arg choice="plain">
              <option>-nolabel</option>
            </arg>
          </group>
          <group choice="opt">
            <arg choice="plain">
              <option>-notify</option>
            </arg>
            <arg choice="plain">
              <option>-nonotify</option>
            </arg>
          </group>
          <group choice="opt">
            <arg choice="plain">
              <option>-poll</option>
            </arg>
            <arg choice="plain">
              <option>-nopoll</option>
            </arg>
          </group>
          <arg choice="plain">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
        </arg>
        <arg choice="opt" rep="repeat"></arg>
        <command>named-mailboxes</command>
        <arg choice="plain">
          <replaceable class="parameter">label</replaceable>
          <arg choice="plain">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
        </arg>
        <group choice="req" rep="repeat">
          <arg choice="plain">
            <replaceable class="parameter">label</replaceable>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </arg>
        </group>
        <command>unmailboxes</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        This command specifies folders which can receive mail and which will be
        checked for new messages periodically.
      </para>
      <para>
        The <literal>-label</literal> argument can be used to specify an
        alternative label to print in the sidebar or mailbox browser instead
        of the mailbox path.  A label may be removed via the
        <literal>-nolabel</literal> argument.  If unspecified, an existing
        mailbox label will be unchanged.
      </para>
      <para>
        Use <literal>-nonotify</literal> to disable notifying when new mail
        arrives.  The <literal>-notify</literal> argument can be used to
        re-enable notifying for an existing mailbox.  If unspecified: a new
        mailbox will notify by default, while an existing mailbox will be
        unchanged.
      </para>
      <para>
        To disable polling, specify <literal>-nopoll</literal> before the
        mailbox name.  The <literal>-poll</literal> argument can be used to
        re-enable polling for an existing mailbox.  If unspecified: a new
        mailbox will poll by default, while an existing mailbox will be
        unchanged.
      </para>
      <para>
        <emphasis>folder</emphasis> can either be a local file or directory
        (Mbox/Mmdf or Maildir/Mh). If NeoMutt was built with POP and/or IMAP
        support, <emphasis>folder</emphasis> can also be a POP/IMAP folder URL.
        The URL syntax is described in <xref linkend="url-syntax" />, POP and
        IMAP are described in <xref linkend="pop" /> and
        <xref linkend="imap" /> respectively.
      </para>
      <para>
        NeoMutt provides a number of advanced features for handling (possibly
        many) folders and new mail within them, please refer to
        <xref linkend="new-mail" /> for details (including in what situations
        and how often NeoMutt checks for new mail). Additionally,
        <link linkend="new-mail-command">$new_mail_command</link> can be used
        to run a command when new mail is detected.
      </para>
      <para>
        The <quote>unmailboxes</quote> command is used to remove a token from
        the list of folders which receive mail. <quote>unmailboxes</quote> can
        be used on the mailbox path, <quote>$folder</quote>-abbreviated path,
        or description. Use <quote>unmailboxes&#160;*</quote> to remove all
        tokens.
      </para>
      <note>
        <para>
          The folders in the <command>mailboxes</command> command are resolved
          when the command is executed, so if these names contain
          <link linkend="shortcuts">shortcut characters</link> (such as
          <quote>=</quote> and <quote>!</quote>), any variable definition that
          affects these characters (like <link linkend="folder">$folder</link>
          and <link linkend="spool-file">$spool_file</link>) should be set before
          the <command>mailboxes</command> command. If none of these shortcuts
          are used, a local path should be absolute as otherwise NeoMutt tries
          to find it relative to the directory from where NeoMutt was started
          which may not always be desired.
        </para>
      </note>
    </sect1>

    <sect1 id="my-hdr">
      <title>User-Defined Headers</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>my_hdr</command>
        <arg choice="plain">
          <replaceable class="parameter">string</replaceable>
        </arg>
        <command>unmy_hdr</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">field</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        The <command>my_hdr</command> command allows you to create your own
        header fields which will be added to every message you send and appear
        in the editor if <link linkend="edit-headers">$edit_headers</link> is
        set.
      </para>
      <para>
        For example, if you would like to add an <quote>Organization:</quote>
        header field to all of your outgoing messages, you can put the command
        something like shown in <xref linkend="ex-my-hdr" /> in your
        <literal>.neomuttrc</literal>.
      </para>
      <example id="ex-my-hdr">
        <title>Defining custom headers</title>

<screen>
my_hdr Organization: A Really Big Company, Anytown, USA
</screen>

      </example>
      <note>
        <para>
          Space characters are <emphasis>not</emphasis> allowed between the
          keyword and the colon (<quote>:</quote>). The standard for
          electronic mail (RFC2822) says that space is illegal there, so
          NeoMutt enforces the rule.
        </para>
      </note>
      <para>
        If you would like to add a header field to a single message, you should
        either set the <link linkend="edit-headers">$edit_headers</link>
        variable, or use the <literal>&lt;edit-headers&gt;</literal> function
        (default: <quote>E</quote>) in the compose menu so that you can edit
        the header of your message along with the body.
      </para>
      <para>
        To remove user defined header fields, use the
        <command>unmy_hdr</command> command. You may specify an asterisk
        (<quote>*</quote>) to remove all header fields, or the fields to
        remove. For example, to remove all <quote>To</quote> and
        <quote>Cc</quote> header fields, you could use:
      </para>
      <screen>unmy_hdr to cc</screen>
    </sect1>

    <sect1 id="default-save-mailbox">
      <title>Specify Default Fcc: and/or Save Mailbox</title>
      <anchor id="fcc-save-hook" />
      <anchor id="fcc-hook" />
      <anchor id="save-hook" />
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>fcc-save-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
        <command>fcc-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
        <command>save-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        <command>fcc-save-hook</command> is a shortcut, equivalent to doing
        both a <link linkend="fcc-hook"><command>fcc-hook</command></link> and
        a <link linkend="save-hook"><command>save-hook</command></link> with
        its arguments, including %-expansion on <emphasis>mailbox</emphasis>
        according to <link linkend="index-format">$index_format</link>.
      </para>
      <para>
        If the pattern is a plain string, or a regex, it will be expanded to a
        pattern using <link linkend="default-hook">$default_hook</link>.
      </para>
      <para>
        <command>fcc-hook</command> is used to save outgoing mail in a mailbox
        other than <link linkend="record">$record</link>. NeoMutt searches the
        initial list of message recipients for the first matching
        <emphasis>pattern</emphasis> and uses <emphasis>mailbox</emphasis> as
        the default <quote>Fcc:</quote> mailbox. If no match is found the
        message will be saved to <link linkend="record">$record</link> mailbox.
      </para>
      <screen>fcc-hook [@.]aol\\.com$ +spammers</screen>
      <para>
        ...will save a copy of all messages going to the aol.com domain to the
        <quote>+spammers</quote> mailbox by default.
      </para>
      <para>
        <command>save-hook</command> is used to override the default mailbox
        used when saving messages. <emphasis>mailbox</emphasis> will be used
        as the default if the message matches <emphasis>pattern</emphasis>.
      </para>
      <example id="ex-save-hook-exando">
        <title>Using %-expandos in <command>save-hook</command></title>

<screen>
<emphasis role="comment"># default: save all to ~/Mail/&lt;author name&gt;</emphasis>
save-hook . ~/Mail/%F
<emphasis role="comment"># save from john@turing.ox.ac.uk and john@ox.ac.uk to $folder/smith</emphasis>
save-hook john@(turing\\.)?ox\\.ac\\.uk$ +smith
<emphasis role="comment"># save from aol.com to $folder/spam</emphasis>
save-hook aol\\.com$ +spam
</screen>

      </example>
      <para>
        Also see the
        <link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
        command.
      </para>
      <para>
        To provide more flexibility and good defaults, NeoMutt applies the
        expandos of <link linkend="index-format">$index_format</link> to
        <emphasis>mailbox</emphasis> after it was expanded. See
        <xref linkend="pattern-hook" /> for information on the exact format of
        <emphasis>pattern</emphasis>.
      </para>
    </sect1>

    <sect1 id="send-hook">
      <title>Change Settings Based Upon Message Recipients</title>
      <anchor id="reply-hook" />
      <anchor id="send2-hook" />
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>reply-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
        <command>send-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
        <command>send2-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        These commands can be used to execute arbitrary configuration commands
        based upon recipients of the message. <emphasis>pattern</emphasis> is
        used to match the message, see <xref linkend="pattern-hook" /> for
        details. <emphasis>command</emphasis> is executed when
        <emphasis>pattern</emphasis> matches.
      </para>
      <para>
        If the pattern is a plain string, or a regex, it will be expanded to a
        pattern using <link linkend="default-hook">$default_hook</link>.
      </para>
      <para>
        <command>reply-hook</command> is matched against the message you are
        <emphasis>replying to</emphasis>, instead of the message you are
        <emphasis>sending</emphasis>. <command>send-hook</command> is matched
        against all messages, both <emphasis>new</emphasis> and
        <emphasis>replies</emphasis>.
      </para>
      <note>
        <para>
          <command>reply-hook</command>s are matched
          <emphasis>before</emphasis> the <command>send-hook</command>,
          <emphasis>regardless</emphasis> of the order specified in the user's
          configuration file. However, you can inhibit
          <command>send-hook</command> in the reply case by using the pattern
          <literal>'! ~Q'</literal> (<emphasis>not replied</emphasis>, see
          <xref linkend="pattern-hook" />) in the <command>send-hook</command>
          to tell when <command>reply-hook</command> have been executed.
        </para>
      </note>
      <para>
        <command>send2-hook</command> is matched every time a message is
        changed, either by editing it, or by using the compose menu to change
        its recipients or subject. <command>send2-hook</command> is executed
        after <command>send-hook</command>, and can, e.g., be used to set
        parameters such as the <link linkend="sendmail">$sendmail</link>
        variable depending on the message's sender address.
      </para>
      <para>
        For each type of <command>send-hook</command> or
        <command>reply-hook</command>, when multiple matches occur, commands
        are executed in the order they are specified in the
        <literal>.neomuttrc</literal> (for that type of hook).
      </para>
      <para>
        Example:
        <literal>
          <command>send-hook</command> work "<command>set</command>
          mime_forward signature=''"
        </literal>
      </para>
      <para>
        Another typical use for this command is to change the values of the
        <link linkend="attribution-intro">$attribution_intro</link>,
        <link linkend="attribution-locale">$attribution_locale</link>, and
        <link linkend="signature">$signature</link> variables in order to
        change the language of the attributions and signatures based upon the
        recipients.
      </para>
      <note>
        <para>
          <command>send-hook</command>'s are only executed once after getting the
          initial list of recipients. They are not executed when resuming a
          postponed draft. Adding a recipient after replying or editing the
          message will not cause any
          <command>send-hook</command> to be executed, similarly if
          <link linkend="auto-edit">$auto_edit</link> is set (as then the initial
          list of recipients is empty). Also note that
          <link linkend="my-hdr"><command>my_hdr</command></link> commands
          which modify recipient headers, or the message's subject, don't have
          any effect on the current message when executed from
          a <command>send-hook</command>.
        </para>
      </note>
    </sect1>

    <sect1 id="message-hook">
      <title>Change Settings Before Formatting a Message</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>message-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        This command can be used to execute arbitrary configuration commands
        before viewing or formatting a message based upon information about the
        message. <emphasis>command</emphasis> is executed if the
        <emphasis>pattern</emphasis> matches the message to be displayed. When
        multiple matches occur, commands are executed in the order they are
        specified in the <literal>.neomuttrc</literal>.
      </para>
      <para>
        If the pattern is a plain string, or a regex, it will be expanded to a
        pattern using <link linkend="default-hook">$default_hook</link>.
      </para>
      <para>
        See <xref linkend="pattern-hook" /> for information on the exact format
        of <emphasis>pattern</emphasis>.
      </para>
      <para>
        Example:
      </para>

<screen>
message-hook ~A 'set pager=builtin'
message-hook '~f freshmeat-news' 'set pager="less \"+/^  subject: .*\""'
</screen>

    </sect1>

    <sect1 id="crypt-hook">
      <title>Choosing the Cryptographic Key of the Recipient</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>crypt-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">keyid</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        When encrypting messages with PGP/GnuPG or OpenSSL, you may want to
        associate a certain key with a given e-mail address automatically,
        either because the recipient's public key can't be deduced from the
        destination address, or because, for some reasons, you need to override
        the key NeoMutt would normally use. The <command>crypt-hook</command>
        command provides a method by which you can specify the ID of the public
        key to be used when encrypting messages to a certain recipient. You may
        use multiple crypt-hooks with the same regex; multiple matching
        crypt-hooks result in the use of multiple keyids for a recipient.
        During key selection, NeoMutt will confirm whether each crypt-hook is
        to be used (unless the
        <link linkend="crypt-confirm-hook">$crypt_confirm_hook</link> option is
        unset). If all crypt-hooks for a recipient are declined, NeoMutt will
        use the original recipient address for key selection instead.
      </para>
      <para>
        The meaning of <emphasis>keyid</emphasis> is to be taken broadly in
        this context: You can either put a numerical key ID or fingerprint
        here, an e-mail address, or even just a real name.
      </para>
    </sect1>

    <sect1 id="index-format-hook">
      <title>Dynamically Changing $index_format using Patterns</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>index-format-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">name</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">[!]pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">format-string</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        This command is used to inject format strings dynamically into <link
        linkend="index-format">$index_format</link> based on pattern matching
        against the current message.
      </para>
      <para>
        If the pattern is a plain string, or a regex, it will be expanded to a
        pattern using <link linkend="default-hook">$default_hook</link>.
      </para>
      <para>
        The <link linkend="index-format">$index_format</link> expando
        <emphasis>%@name@</emphasis> specifies a placeholder for the injection.
        Index-format-hooks with the same <emphasis>name</emphasis> are matched using
        <link linkend="patterns"> <emphasis>pattern</emphasis> </link> against the
        current message. Matching is done in the order specified in the .muttrc,
        with the first match being used. The hook's
        <emphasis>format-string</emphasis> is then substituted and evaluated.
      </para>
      <para>
        Because the first match is used, best practice is to put a catch-all
        <emphasis>~A</emphasis> pattern as the last hook. Here is an example showing
        how to implement dynamic date formatting:
      </para>
<screen>
set index_format="%4C %-6@date@ %-15.15F %Z (%4c) %s"

index-format-hook  date  "~d&lt;1d"    "%[%H:%M]"
index-format-hook  date  "~d&lt;1m"    "%[%a %d]"
index-format-hook  date  "~d&lt;1y"    "%[%b %d]"
index-format-hook  date  "~A"       "%[%m/%y]"
</screen>
      <para>
        Another example, showing a way to prepend to
        the subject. Note that without a catch-all ~A
        pattern, no match results in the expando being
        replaced with an empty string.
      </para>
<screen>
set index_format="%4C %@subj_flags@%s"

index-format-hook  subj_flags  "~f boss@example.com"    "** BOSS ** "
index-format-hook  subj_flags  "~f spouse@example.com"  ":-) "
</screen>
    </sect1>

    <sect1 id="push">
      <title>Adding Key Sequences to the Keyboard Buffer</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>push</command>
        <arg choice="plain">
          <replaceable class="parameter">string</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        This command adds the named string to the beginning of the keyboard
        buffer. The string may contain control characters, key names and
        function names like the sequence string in the
        <link linkend="macro">macro</link> command. You may use it to
        automatically run a sequence of commands at startup, or when entering
        certain folders. For example, <xref linkend="ex-folder-hook-push" />
        shows how to automatically collapse all threads when entering a folder.
      </para>
      <example id="ex-folder-hook-push">
        <title>Embedding
        <command>push</command> in
        <command>folder-hook</command></title>
        <screen>folder-hook . 'push &lt;collapse-all&gt;'</screen>
      </example>
      <para>
        For using functions like shown in the example, it's important to use
        angle brackets (<quote>&lt;</quote> and <quote>&gt;</quote>) to make
        NeoMutt recognize the input as a function name. Otherwise it will
        simulate individual just keystrokes, i.e.
        <quote><literal>push collapse-all</literal></quote> would be
        interpreted as if you had typed <quote>c</quote>, followed by
        <quote>o</quote>, followed by <quote>l</quote>, ..., which is not
        desired and may lead to very unexpected behavior.
      </para>
      <para>
        Keystrokes can be used, too, but are less portable because of
        potentially changed key bindings. With default bindings, this is
        equivalent to the above example:
      </para>
      <screen>folder-hook . 'push \eV'</screen>
      <para>
        because it simulates that Esc+V was pressed (which is the default
        binding of <literal>&lt;collapse-all&gt;</literal>).
      </para>
    </sect1>

    <sect1 id="exec">
      <title>Executing Functions</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>exec</command>
        <arg choice="plain">
          <replaceable class="parameter">function</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">function</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        This command can be used to execute any function. Functions are listed
        in the <link linkend="functions">function reference</link>.
        <quote><command>exec</command> <literal>function</literal></quote> is
        equivalent to <quote><literal>push &lt;function&gt;</literal></quote>.
      </para>
    </sect1>

    <sect1 id="score-command">
      <title>Message Scoring</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>score</command>
        <arg choice="plain">
          <replaceable class="parameter">pattern</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">value</replaceable>
        </arg>
        <command>unscore</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">pattern</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        The <command>score</command> commands adds <emphasis>value</emphasis>
        to a message's score if <emphasis>pattern</emphasis> matches it.
        <emphasis>pattern</emphasis> is a string in the format described in the
        <link linkend="patterns">patterns</link> section (note: For efficiency
        reasons, patterns which scan information not available in the index,
        such as <literal>~b</literal>, <literal>~B</literal>,
        <literal>~h</literal>, <literal>~M</literal>, or <literal>~X</literal>
        may not be used).  <emphasis>value</emphasis> is a positive or negative
        integer. A message's final score is the sum total of all matching
        <command>score</command> entries. However, you may optionally prefix
        <emphasis>value</emphasis> with an equal sign (<quote>=</quote>) to
        cause evaluation to stop at a particular entry if there is a match.
        Negative final scores are rounded up to 0.
      </para>
      <para>
        The <command>unscore</command> command removes score entries from the
        list. You <emphasis>must</emphasis> specify the same pattern specified
        in the <command>score</command> command for it to be removed. The
        pattern <quote>*</quote> is a special token which means to clear the
        list of all score entries.
      </para>
      <para>
        Scoring occurs as the messages are read in, before the mailbox is
        sorted. Because of this, patterns which depend on threading, such as
        <emphasis>~=</emphasis>, <emphasis>~$</emphasis>, and
        <emphasis>~()</emphasis>, will not work by default. A workaround is to
        push the scoring command in a folder hook. This will cause the mailbox
        to be rescored after it is opened and input starts being processed:
      </para>

<screen>
folder-hook . 'push "&lt;enter-command&gt;score ~= 10&lt;enter&gt;"'
</screen>

    </sect1>

    <sect1 id="spam">
      <title>Spam Detection</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>spam</command>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">format</replaceable>
        </arg>
        <command>nospam</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        NeoMutt has generalized support for external spam-scoring filters. By
        defining your spam regular expressions with the <command>spam</command> and
        <literal>nospam</literal> commands, you can <emphasis>limit</emphasis>,
        <emphasis>search</emphasis>, and <emphasis>sort</emphasis> your mail
        based on its spam attributes, as determined by the external filter. You
        also can display the spam attributes in your index display using the
        <literal>%H</literal> selector in the
        <link linkend="index-format">$index_format</link> variable. (Tip: try
        <literal>%&lt;H?[%H] &gt;</literal> to display spam tags only when they are
        defined for a given message.)
      </para>
      <para>
        Note: the value displayed by <literal>%H</literal> and searched by
        <literal>~H</literal> is stored in the
        <link linkend="caching">header cache</link>. NeoMutt isn't smart enough to
        invalidate a header cache entry based on changing <literal>spam</literal>
        rules, so if you aren't seeing correct <literal>%H</literal> values, try
        temporarily turning off the header cache. If that fixes the problem,
        then once your spam rules are set to your liking, remove your stale
        header cache files and turn the header cache back on.
      </para>
      <para>
        Your first step is to define your external filter's spam headers using
        the <command>spam</command> command. <emphasis>regex</emphasis>
        should be a regular expression that matches a header in a mail message.
        If any message in the mailbox matches this regular expression, it will
        receive a <quote>spam tag</quote> or <quote>spam attribute</quote>
        (unless it also matches a <command>nospam</command> regular expression
        – see below.) The appearance of this attribute is entirely up to you,
        and is governed by the <emphasis>format</emphasis> parameter.
        <emphasis>format</emphasis> can be any static text, but it also can
        include back-references from the <emphasis>regex</emphasis>
        expression. (A regular expression <quote>back-reference</quote> refers
        to a sub-expression contained within parentheses.)
        <literal>%1</literal> is replaced with the first back-reference in the
        regex, <literal>%2</literal> with the second, etc.
      </para>
      <para>
        To match spam tags, NeoMutt needs the corresponding header information
        which is always the case for local and POP folders but not for IMAP in
        the default configuration. Depending on the spam header to be analyzed,
        <link linkend="imap-headers">$imap_headers</link> may need to be
        adjusted.
      </para>
      <para>
        If you're using multiple spam filters, a message can have more than one
        spam-related header. You can define <command>spam</command> rules
        for each filter you use. If a message matches two or more of these
        regular expressions, and the <link linkend="spam-separator">$spam_separator</link>
        variable is set to a string, then the message's spam tag will consist
        of all the <emphasis>format</emphasis> strings joined together, with
        the value of <link linkend="spam-separator">$spam_separator</link>
        separating them.
      </para>
      <para>
        For example, suppose one uses DCC, SpamAssassin, and PureMessage, then
        the configuration might look like in <xref linkend="ex-spam" />.
      </para>
      <example id="ex-spam">
        <title>Configuring spam detection</title>

<screen>
spam "X-DCC-.*-Metrics:.*(....)=many"         "90+/DCC-%1"
spam "X-Spam-Status: Yes"                     "90+/SA"
spam "X-PerlMX-Spam: .*Probability=([0-9]+)%" "%1/PM"
set spam_separator=", "
</screen>

      </example>
      <para>
        If then a message is received that DCC registered with
        <quote>many</quote> hits under the <quote>Fuz2</quote> checksum, and
        that PureMessage registered with a 97% probability of being spam, that
        message's spam tag would read <literal>90+/DCC-Fuz2, 97/PM</literal>.
        (The four characters before <quote>=many</quote> in a DCC report
        indicate the checksum used – in this case, <quote>Fuz2</quote>.)
      </para>
      <para>
        If the <link linkend="spam-separator">$spam_separator</link> variable
        is unset, then each spam rule match supersedes the previous one.
        Instead of getting joined <emphasis>format</emphasis> strings, you'll
        get only the last one to match.
      </para>
      <para>
        The spam tag is what will be displayed in the index when you use
        <literal>%H</literal> in the
        <link linkend="index-format">$index_format</link> variable. It's also
        the string that the <literal>~H</literal> pattern-matching expression
        matches against for <literal>&lt;search&gt;</literal> and
        <literal>&lt;limit&gt;</literal> functions. And it's what sorting by
        spam attribute will use as a sort key.
      </para>
      <para>
        That's a pretty complicated example, and most people's actual
        environments will have only one spam filter. The simpler your
        configuration, the more effective NeoMutt can be, especially when it
        comes to sorting.
      </para>
      <para>
        Generally, when you sort by spam tag, NeoMutt will sort
        <emphasis>lexically</emphasis> – that is, by ordering strings
        alphanumerically. However, if a spam tag begins with a number, NeoMutt
        will sort numerically first, and lexically only when two numbers are
        equal in value. (This is like UNIX's <literal>sort -n</literal>.)
        A message with no spam attributes at all – that is, one that didn't
        match <emphasis>any</emphasis> of your <command>spam</command> rules
        – is sorted at lowest priority. Numbers are sorted next, beginning with
        0 and ranging upward. Finally, non-numeric strings are sorted, with
        <quote>a</quote> taking lower priority than <quote>z</quote>. Clearly,
        in general, sorting by spam tags is most effective when you can coerce
        your filter to give you a raw number. But in case you can't, NeoMutt
        can still do something useful.
      </para>
      <para>
        The <command>nospam</command> command can be used to write exceptions
        to <command>spam</command> rules. If a header field matches
        something in a <command>spam</command> command, but you nonetheless do
        not want it to receive a spam tag, you can list a more precise regular
        expression under a <command>nospam</command> command.
      </para>
      <para>
        If the <emphasis>regex</emphasis> given to <command>nospam</command>
        is exactly the same as the <emphasis>regex</emphasis> on an existing
        <command>spam</command> rule entry, the effect will be to remove the
        entry from the spam rules list, instead of adding an exception. Likewise, if
        the <emphasis>regex</emphasis> for a <command>spam</command> command
        matches an entry on the <command>nospam</command> rule list, that
        nospam entry will be removed. If the <emphasis>regex</emphasis> for
        <command>nospam</command> is <quote>*</quote>,
        <emphasis>all entries on both lists</emphasis> will be removed. This
        might be the default action if you use <command>spam</command> and
        <command>nospam</command> in conjunction with
        a <command>folder-hook</command>.
      </para>
      <para>
        You can have as many <command>spam</command> or
        <command>nospam</command> commands as you like. You can even do your
        own primitive <command>spam</command> detection within NeoMutt – for
        example, if you consider all mail from <literal>MAILER-DAEMON</literal>
        to be spam, you can use a <command>spam</command> command like this:
      </para>
      <screen>spam "^From: .*MAILER-DAEMON"       "999"</screen>
    </sect1>

    <sect1 id="set">
      <title>Setting and Querying Variables</title>

      <sect2 id="var-types">
        <title>Variable Types</title>
        <para>
          NeoMutt supports these types of configuration variables:
        </para>
        <variablelist>
          <varlistentry>
            <term>boolean</term>
            <listitem>
              <para>
                A boolean expression, either <quote>yes</quote> or
                <quote>no</quote>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>number</term>
            <listitem>
              <para>
                A signed integer number in the range -32768 to 32767.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>number (long)</term>
            <listitem>
              <para>
                A signed integer number in the range -2147483648 to 2147483647.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>string</term>
            <listitem>
              <para>
                Arbitrary text.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>path</term>
            <listitem>
              <para>
                A specialized string for representing paths including support
                for mailbox shortcuts (see <xref linkend="shortcuts" />) as
                well as tilde (<quote>~</quote>) for a user's home directory
                and more.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>quadoption</term>
            <listitem>
              <para>
                Like a boolean but triggers a prompt when set to
                <quote>ask-yes</quote> or <quote>ask-no</quote> with
                <quote>yes</quote> and <quote>no</quote> preselected
                respectively.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>sort order</term>
            <listitem>
              <para>
                A specialized string allowing only particular words as values
                depending on the variable.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>regular expression</term>
            <listitem>
              <para>
                A regular expression, see <xref linkend="regex" /> for an
                introduction.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>folder type</term>
            <listitem>
              <para>
                Specifies the type of folder to use: <emphasis>mbox</emphasis>,
                <emphasis>mmdf</emphasis>, <emphasis>mh</emphasis> or
                <emphasis>maildir</emphasis>. Currently only used to determine
                the type for newly created folders.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>e-mail address</term>
            <listitem>
              <para>
                An email address either with or without real_name. The older
                <quote><literal>user@example.org (Joe User)</literal></quote>
                form is supported but strongly deprecated.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>user-defined</term>
            <listitem>
              <para>
                Arbitrary text, see <xref linkend="set-myvar" /> for details.
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="set-commands">
        <title>Commands</title>
        <para>
          The following commands are available to manipulate and query
          variables:
        </para>
        <para>
          Usage:
        </para>
        <cmdsynopsis>
          <command>set</command>
          <group choice="req">
            <arg choice="plain">
              <group choice="opt">
                <arg choice="plain">
                  <option>no</option>
                </arg>
                <arg choice="plain">
                  <option>inv</option>
                </arg>
                <arg choice="plain">
                  <option>&amp;</option>
                </arg>
                <arg choice="plain">
                  <option>?</option>
                </arg>
              </group>
              <replaceable class="parameter">variable</replaceable>
            </arg>
          </group>
          <arg choice="opt" rep="repeat"></arg>
          <command>set</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable class="parameter">variable=value</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">variable+=increment</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">variable-=decrement</replaceable>
            </arg>
          </group>
          <arg choice="opt" rep="repeat"></arg>
          <command>unset</command>
          <arg choice="plain">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <command>reset</command>
          <arg choice="plain">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <command>toggle</command>
          <arg choice="plain">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <command>set</command>
          <arg choice="plain">
            <replaceable class="parameter">variable</replaceable>
          </arg>
          <arg choice="plain">
            <option>?</option>
          </arg>
        </cmdsynopsis>
        <para>
          This command is used to set (and unset)
          <link linkend="variables">configuration variables</link>. There are
          several basic types of variables: boolean, number, string, string list
          and quadoption. <emphasis>boolean</emphasis> variables can be
          <emphasis>set</emphasis> (true) or <emphasis>unset</emphasis>
          (false). <emphasis>number</emphasis> variables can be assigned
          a positive integer value. The value of numeric variables can be
          incremented <emphasis>+=</emphasis> and decremented
          <emphasis>-=</emphasis>. <emphasis>String list</emphasis> variables
          use <emphasis>+=</emphasis> for appending to the string list
          and <emphasis>-=</emphasis> for removal from the string list.
          <emphasis>string</emphasis> variables
          consist of any number of printable characters and must be enclosed in
          quotes if they contain spaces or tabs. You may also use the escape
          sequences <quote>\n</quote> and <quote>\t</quote> for newline and
          tab, respectively. Content of a <emphasis>string</emphasis> variable
          can be extended using <emphasis>+=</emphasis>.
          <emphasis>quadoption</emphasis> variables are used to control whether
          or not to be prompted for certain actions, or to specify a default action.
          A value of <emphasis>yes</emphasis> will cause the action to be carried
          out automatically as if you had answered yes to the question. Similarly,
          a value of <emphasis>no</emphasis> will cause the action to be carried
          out as if you had answered <quote>no.</quote> A value of
          <emphasis>ask-yes</emphasis> will cause a prompt with a default
          answer of <quote>yes</quote> and <emphasis>ask-no</emphasis> will
          provide a default answer of <quote>no.</quote>
        </para>
        <para>
          Prefixing a variable with <quote>no</quote> will unset it. Example:
          <literal><command>set</command> noask_bcc</literal>.
        </para>
        <para>
          For <emphasis>boolean</emphasis> variables, you may optionally prefix
          the variable name with <literal>inv</literal> to toggle the value (on
          or off). This is useful when writing macros. Example:
          <literal><command>set</command> invsmart_wrap</literal>.
        </para>
        <para>
          The <command>toggle</command> command automatically prepends the
          <literal>inv</literal> prefix to all specified variables.
        </para>
        <para>
          The <command>unset</command> command automatically prepends the
          <literal>no</literal> prefix to all specified variables.
        </para>
        <para>
          Using the <literal>&lt;enter-command&gt;</literal> function in the
          <emphasis>index</emphasis> menu, you can query the value of
          a variable by suffixing the name of the variable with a question
          mark:
        </para>
        <screen>set allow_8bit?</screen>
        <para>
          The old prefix query syntax (<literal><command>set</command>
          ?allow_8bit</literal>) is also still supported.
        </para>
        <para>
          The question mark is actually only required for boolean and
          quadoption variables.
        </para>
        <para>
          The <command>reset</command> command resets all given variables to
          the compile time defaults (hopefully mentioned in this manual). If
          you use the command <command>set</command> and prefix the variable
          with <quote>&amp;</quote> this has the same behavior as the
          <command>reset</command> command.
        </para>
        <para>
          With the <command>reset</command> command there exists the special
          variable <quote>all</quote>, which allows you to reset all variables
          to their system defaults.
        </para>
      </sect2>

      <sect2 id="set-myvar">
        <title>User-Defined Variables</title>

        <sect3 id="set-myvar-intro">
          <title>Introduction</title>
          <para>
            Along with the variables listed in the
            <link linkend="variables">Configuration variables</link> section,
            NeoMutt supports user-defined variables with names starting with
            <literal>my_</literal> as in, for example,
            <literal>my_cfgdir</literal>.
          </para>
          <para>
            The <command>set</command> command either creates a custom
            <literal>my_</literal> variable or changes its value if it
            exists already. Use of <emphasis>+=</emphasis> will adjust
            a custom variable using the same behavior as a string
            variable, by appending additional characters (this is true
            even if the current contents of the variable resemble an
            integer, which is different than the behavior of
            <emphasis>+=</emphasis> on built-in numeric
            variables). The <command>unset</command> and
            <command>reset</command> commands remove the variable
            entirely.
          </para>
          <para>
            Since user-defined variables are expanded in the same way that
            environment variables are (except for the
            <link linkend="shell-escape">shell-escape</link> command and
            backtick expansion), this feature can be used to make configuration
            files more readable.
          </para>
        </sect3>

        <sect3 id="set-myvar-examples">
          <title>Examples</title>
          <para>
            The following example defines and uses the variable
            <literal>my_cfgdir</literal> to abbreviate the calls of the
            <link linkend="source"><command>source</command></link> command:
          </para>
          <example id="ex-myvar1">
            <title>Using user-defined variables for config file
            readability</title>

<screen>
set my_cfgdir = $HOME/neomutt/config
source $my_cfgdir/hooks $my_cfgdir/macros
<emphasis role="comment"># more source commands...</emphasis>
</screen>

          </example>
          <para>
            A custom variable can also be used in macros to backup the current
            value of another variable. In the following example, the value of
            the <link linkend="delete">$delete</link> is changed temporarily
            while its original value is saved as <literal>my_delete</literal>.
            After the macro has executed all commands, the original value of
            <link linkend="delete">$delete</link> is restored.
          </para>
          <example id="ex-myvar2">
            <title>Using user-defined variables for backing up other config
            option values</title>

<screen>
macro pager ,x '\
&lt;enter-command&gt;set my_delete=$delete&lt;enter&gt;\
&lt;enter-command&gt;set delete=yes&lt;enter&gt;\
...\
&lt;enter-command&gt;set delete=$my_delete&lt;enter&gt;'
</screen>

          </example>
          <para>
            Since NeoMutt expands such values already when parsing the
            configuration file(s), the value of <literal>$my_delete</literal>
            in the last example would be the value of
            <link linkend="delete">$delete</link> exactly as it was at that
            point during parsing the configuration file. If another statement
            would change the value for <link linkend="delete">$delete</link>
            later in the same or another file, it would have no effect on
            <literal>$my_delete</literal>. However, the expansion can be
            deferred to runtime, as shown in the next example, when escaping
            the dollar sign.
          </para>
          <example id="ex-myvar3">
            <title>Deferring user-defined variable expansion to runtime</title>

<screen>
macro pager &lt;PageDown&gt; "\
&lt;enter-command&gt; set my_old_pager_stop=\$pager_stop pager_stop&lt;Enter&gt;\
&lt;next-page&gt;\
&lt;enter-command&gt; set pager_stop=\$my_old_pager_stop&lt;Enter&gt;\
&lt;enter-command&gt; unset my_old_pager_stop&lt;Enter&gt;"
</screen>

          </example>
          <para>
            Note that there is a space between
            <literal>&lt;enter-command&gt;</literal> and the
            <command>set</command> configuration command, preventing NeoMutt
            from recording the <command>macro</command>'s commands into its
            history.
          </para>
        </sect3>
      </sect2>

      <sect2 id="set-conversions">
        <title>Type Conversions</title>
        <para>
          Variables are always assigned string values which NeoMutt parses into
          its internal representation according to the type of the variable,
          for example an integer number for numeric types. For all queries
          (including $-expansion) the value is converted from its internal type
          back into string. As a result, any variable can be assigned any value
          given that its content is valid for the target. This also counts for
          custom variables which are of type string. In case of parsing errors,
          NeoMutt will print error messages. <xref linkend="ex-myvar4" />
          demonstrates type conversions.
        </para>
        <example id="ex-myvar4">
          <title>Type conversions using variables</title>

<screen>
set my_lines = "5"                <emphasis role="comment"># value is string "5"</emphasis>
set pager_index_lines = $my_lines <emphasis role="comment"># value is integer 5</emphasis>
set my_sort = "date-received"     <emphasis role="comment"># value is string "date-received"</emphasis>
set sort = "last-$my_sort"        <emphasis role="comment"># value is sort last-date-received</emphasis>
set my_inc = $read_inc            <emphasis role="comment"># value is string "10" (default of $read_inc)</emphasis>
set my_foo = $my_inc              <emphasis role="comment"># value is string "10"</emphasis>
</screen>

        </example>
        <para>
          These assignments are all valid. If, however, the value of
          <literal>$my_lines</literal> would have been <quote>five</quote> (or
          something else that cannot be parsed into a number), the assignment
          to <literal>$pager_index_lines</literal> would have produced an error
          message.
        </para>
        <para>
          Type conversion applies to all configuration commands which take
          arguments. But please note that every expanded value of a variable is
          considered just a single token. A working example is:
        </para>

<screen>
set my_pattern = "~A"
set my_number = "10"
<emphasis role="comment"># same as: score ~A +10</emphasis>
score $my_pattern +$my_number
</screen>

        <para>
          What does <emphasis>not</emphasis> work is:
        </para>

<screen>
set my_mx = "+mailbox1 +mailbox2"
mailboxes $my_mx +mailbox3
</screen>

        <para>
          because the value of <literal>$my_mx</literal> is interpreted as
          a single mailbox named <quote>+mailbox1 +mailbox2</quote> and not two
          distinct mailboxes.
        </para>
      </sect2>
    </sect1>

    <sect1 id="source">
      <title>Reading Initialization Commands From Another File</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>source</command>
        <arg choice="plain">
          <replaceable class="parameter">filename</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable class="parameter">filename</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        This command allows the inclusion of initialization commands from other
        files. For example, I place all of my aliases in
        <literal>~/.mail_aliases</literal> so that I can make my
        <literal>~/.neomuttrc</literal> readable and keep my aliases private.
      </para>
      <para>
        If the filename begins with a tilde (<quote>~</quote>), it will be
        expanded to the path of your home directory.
      </para>
      <para>
        If the filename is relative and the command <command>source</command>
        is executed from the context of a configuration file, then the filename
        is interpreted relative to the directory of that configuration file.
        If the command is executed outside of a configuration file, e.g. from
        the prompt, then the filename is interpreted relative to the current
        working directory (see <link linkend="cd"><command>cd</command></link>
        on how to change the current working directory at runtime).
      </para>
      <note>
        <para>
          A hook remembers the configuration file it was defined in and sets the
          context to that file when executing its commands.  As a result
          a <command>source</command> command inside a hook is executed in the
          context of the configuration file the hook was defined in.  Thus
          relative filenames are interpreted relative to the configuration file
          the hook is defined in.
        </para>
      </note>
      <para>
        If the filename ends with a vertical bar (<quote>|</quote>), then
        <emphasis>filename</emphasis> is considered to be an executable program
        from which to read input (e.g.
        <literal><command>source</command> ~/bin/myscript|</literal>).
      </para>
    </sect1>

    <sect1 id="unhook">
      <title>Removing Hooks</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>unhook</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">hook-type</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        This command permits you to flush hooks you have previously defined.
        You can either remove all hooks by giving the <quote>*</quote>
        character as an argument, or you can remove all hooks of a specific
        type by saying something like
        <literal><command>unhook</command> send-hook</literal>.
      </para>
    </sect1>

    <sect1 id="formatstrings">
      <title>Format Strings</title>

      <sect2 id="formatstrings-basics">
        <title>Basic usage</title>
        <para>
          Format strings are a general concept you'll find in several locations
          through the NeoMutt configuration, especially in the
          <link linkend="index-format">$index_format</link>,
          <link linkend="pager-format">$pager_format</link>,
          <link linkend="status-format">$status_format</link>, and other
          related variables. These can be very straightforward, and it's quite
          possible you already know how to use them.
        </para>
        <para>
          The most basic format string element is a percent symbol followed by
          another character. For example, <literal>%s</literal> represents
          a message's Subject: header in the
          <link linkend="index-format">$index_format</link> variable. The
          <quote>expandos</quote> available are documented with each format
          variable, but there are general modifiers available with all
          formatting expandos, too. Those are our concern here.
        </para>
        <para>
          Some of the modifiers are borrowed right out of C (though you might
          know them from Perl, Python, shell, or another language). These are
          the <literal>[-]m.n</literal> modifiers, as in
          <literal>%-12.12s</literal>. As with such programming languages,
          these modifiers allow you to specify the minimum and maximum size of
          the resulting string, as well as its justification. If the
          <quote>-</quote> sign follows the percent, the string will be
          left-justified instead of right-justified. If there's a number
          immediately following that, it's the minimum amount of space the
          formatted string will occupy – if it's naturally smaller than that,
          it will be padded out with spaces. If a decimal point and another
          number follow, that's the maximum space allowable – the string will
          not be permitted to exceed that width, no matter its natural size.
          Each of these three elements is optional, so that all these are legal
          format strings: <literal>%-12s</literal>, <literal>%4c</literal>,
          <literal>%.15F</literal> and <literal>%-12.15L</literal>.
        </para>
        <para>
          NeoMutt adds some other modifiers to format strings. If you use an
          equals symbol (<literal>=</literal>) as a numeric prefix (like the
          minus above), it will force the string to be centered within its
          minimum space range. For example, <literal>%=14y</literal> will
          reserve 14 characters for the %y expansion – that's the set of
          message keywords (formerly X-Label). If the expansion results in
          a string less than 14 characters, it will be centered in
          a 14-character space. If the X-Label for a message were
          <quote>test</quote>, that expansion would look like
          <quote>&#160;&#160;&#160;&#160;&#160;test&#160;&#160;&#160;&#160;&#160;</quote>.
        </para>
        <para>
          There are two very little-known modifiers that affect the way that an
          expando is replaced. If there is an underline (<quote>_</quote>)
          character between any format modifiers (as above) and the expando
          letter, it will expands in all lower case. And if you use a colon
          (<quote>:</quote>), it will replace all decimal points with
          underlines.
        </para>
      </sect2>

      <sect2 id="formatstrings-conditionals">
        <title>Conditionals</title>
        <para>
          Depending on the format string variable, some of its sequences can be
          used to optionally print a string if their value is nonzero. For
          example, you may only want to see the number of flagged messages if
          such messages exist, since zero is not particularly meaningful. To
          optionally print a string based upon one of the above sequences, the
          following construct is used:
        </para>
        <screen>%&lt;sequence_char?optional_string&gt;</screen>
        <para>
          where <emphasis>sequence_char</emphasis> is an expando, and
          <emphasis>optional_string</emphasis> is the string you would like
          printed if <emphasis>sequence_char</emphasis> is nonzero.
          <emphasis>optional_string</emphasis> may contain other sequences as
          well as normal text, but you may not nest optional strings.
        </para>
        <para>
          Here is an example illustrating how to optionally print the number of
          new messages (<literal>%n</literal>) in a mailbox in
          <link linkend="status-format">$status_format</link>:
        </para>
        <screen>%&lt;n?%n new messages&gt;</screen>
        <para>
          You can also switch between two strings using the following
          construct:
        </para>

<screen>
%&lt;sequence_char?if_string&amp;else_string&gt;
</screen>

        <para>
          If the value of <emphasis>sequence_char</emphasis> is non-zero,
          <emphasis>if_string</emphasis> will be expanded, otherwise
          <emphasis>else_string</emphasis> will be expanded.
        </para>
        <para>
          The conditional sequences can also be nested by using the %&lt; and
          &gt; operators. The %? notation can still be used but requires
          quoting. For example:
        </para>

<screen>
%&lt;x?true&amp;false&gt;
%&lt;x?%&lt;y?%&lt;z?xyz&amp;xy&gt;&amp;x&gt;&amp;none&gt;
</screen>

        <para>
          For more examples, see <xref linkend="nested-if" />
        </para>
      </sect2>

      <sect2 id="formatstrings-filters">
        <title>Filters</title>
        <para>
          Any format string ending in a vertical bar (<quote>|</quote>) will
          be expanded and piped through the first word in the string, using
          spaces as separator. The string returned will be used for display. If
          the returned string ends in %, it will be passed through the
          formatter a second time. This allows the filter to generate
          a replacement format string including % expandos.
        </para>
        <para>
          All % expandos in a format string are expanded before the script is
          called so that:
        </para>
        <example id="ex-fmtpipe">
          <title>Using external filters in format strings</title>
          <screen>set status_format="script.sh '%r %f (%L)'|"</screen>
        </example>
        <para>
          will make NeoMutt expand <literal>%r</literal>, <literal>%f</literal>
          and <literal>%L</literal> before calling the script. The example also
          shows that arguments can be quoted: the script will receive the
          expanded string between the single quotes as the only argument.
        </para>
        <para>
          A practical example is the <literal>mutt_xtitle</literal> script
          installed in the <literal>samples</literal> subdirectory of the
          NeoMutt documentation: it can be used as filter for
          <link linkend="status-format">$status_format</link> to set the
          current terminal's title, if supported.
        </para>
      </sect2>

      <sect2 id="formatstrings-padding">
        <title>Padding</title>
        <para>
          In most format strings, NeoMutt supports different types of padding
          using special %-expandos:
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <literal>%|X</literal>
            </term>
            <listitem>
              <para>
                When this occurs, NeoMutt will fill the rest of the line with
                the character <literal>X</literal>. For example, filling the
                rest of the line with dashes is done by setting:
              </para>

<screen>
set status_format = "%v on %h: %B: %&lt;n?%n&amp;no&gt; new messages %|-"
</screen>

            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>%&gt;X</literal>
            </term>
            <listitem>
              <para>
                Since the previous expando stops at the end of line, there must
                be a way to fill the gap between two items via the
                <literal>%&gt;X</literal> expando: it puts as many characters
                <literal>X</literal> in between two items so that the rest of
                the line will be right-justified. For example, to not put the
                version string and hostname the above example on the left but
                on the right and fill the gap with spaces, one might use (note
                the space after <literal>%&gt;</literal>):
              </para>

<screen>
set status_format = "%B: %&lt;n?%n&amp;no&gt; new messages %&gt; (%v on %h)"
</screen>

            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>%*X</literal>
            </term>
            <listitem>
              <para>
                Normal right-justification will print everything to the left of
                the <literal>%&gt;</literal>, displaying padding and whatever
                lies to the right only if there's room. By contrast,
                <quote>soft-fill</quote> gives priority to the right-hand side,
                guaranteeing space to display it and showing padding only if
                there's still room. If necessary, soft-fill will eat text
                leftwards to make room for rightward text. For example, to
                right-justify the subject making sure as much as possible of it
                fits on screen, one might use (note two spaces after
                <literal>%*</literal>: the second ensures there's a space
                between the truncated right-hand side and the subject):
              </para>

<screen>
set index_format="%4C %Z %{%b %d} %-15.15L (%&lt;l?%4l&amp;%4c&gt;)%*  %s"
</screen>

            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="formatstrings-conditional-dates">
        <title>Conditional Dates</title>
        <para>
          This feature allows the format of dates in the index to vary based on
          how recent the message is. This is especially useful in combination
          with the <link linkend="nested-if">nested-if feature</link>.
        </para>
        <para>
          For example, using
          <literal>%&lt;[y?%&lt;[d?%[%H:%M]&amp;%[%m/%d]&gt;&amp;%[%y.%m]&gt;</literal>
          for the date in the <literal>$index_format</literal> will produce
          a display like:
        </para>

<screen>
   1   + 14.12 Grace Hall      (   13) Gulliver's Travels
   2   + 10/02 Callum Harrison (   48) Huckleberry Finn
   3     12:17 Rhys Lee        (   42) The Lord Of The Rings
</screen>

      </sect2>

      <sect2 id="formatstrings-size">
        <title>Bytes size display</title>

        <para>
          Various format strings contain expandos that display the size of
          messages in bytes.  This includes
          <literal>%s</literal> in <link linkend="attach-format">$attach_format</link>,
          <literal>%l</literal> in <link linkend="compose-format">$compose_format</link>,
          <literal>%s</literal> in <link linkend="folder-format">$folder_format</link>,
          <literal>%c</literal> and <literal>%cr</literal>
            in <link linkend="index-format">$index_format</link>,
          and %l and %L in <link linkend="status-format">$status_format</link>.
          There are four configuration variables that can be used to customize
          how the numbers are displayed.
        </para>

        <para>
          <link linkend="size-show-bytes">$size_show_bytes</link>
          will display the number of bytes when the size is &lt; 1
          kilobyte.  When unset, kilobytes will be displayed instead.
        </para>

        <para>
          <link linkend="size-show-mb">$size_show_mb</link> will display the
          number of megabytes when the size is &gt;= 1 megabyte.  When
          unset, kilobytes will be displayed instead (which could be a large
          number).
        </para>

        <para>
          <link linkend="size-show-fractions">$size_show_fractions</link>,
          will display numbers with a single decimal place for values from
          0 to 10 kilobytes, and 1 to 10 megabytes.
        </para>

        <para>
          <link linkend="size-units-on-left">$size_units_on_left</link> will
          display the unit (<quote>K</quote> or <quote>M</quote>) to the left
          of the number, instead of the right if unset.
        </para>

        <para>
          These variables also affect size display in a few other places, such
          as progress indicators and attachment delimiters in the pager.
        </para>
      </sect2>
    </sect1>

    <sect1 id="mailto-allow">
      <title>Control allowed header fields in a mailto: URL</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>mailto_allow</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">header-field</replaceable>
          </arg>
        </group>
        <command>unmailto_allow</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain" rep="repeat">
            <replaceable class="parameter">header-field</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        As a security measure, NeoMutt will only add user-approved header
        fields from a <literal>mailto:</literal> URL. This is necessary since
        NeoMutt will handle certain header fields, such as
        <literal>Attach:</literal>, in a special way. The
        <literal>mailto_allow</literal> and <literal>unmailto_allow</literal>
        commands allow the user to modify the list of approved headers.
      </para>
      <para>
        NeoMutt initializes the default list to contain only the
        <literal>Subject</literal> and <literal>Body</literal> header fields,
        which are the only requirement specified by the
        <literal>mailto:</literal> specification in RFC2368, and the
        <literal>Cc</literal>, <literal>In-Reply-To</literal>,
        <literal>References</literal> headers to aid with replies to mailing
        lists.
      </para>
    </sect1>
  </chapter>

  <chapter id="advancedusage">
    <title>Advanced Usage</title>

    <sect1 id="charset-handling">
      <title>Character Set Handling</title>
      <para>
        A <quote>character set</quote> is basically a mapping between bytes and
        glyphs and implies a certain character encoding scheme. For example,
        for the ISO 8859 family of character sets, an encoding of 8bit per
        character is used. For the Unicode character set, different character
        encodings may be used, UTF-8 being the most popular. In UTF-8,
        a character is represented using a variable number of bytes ranging
        from 1 to 4.
      </para>
      <para>
        Since NeoMutt is a command-line tool run from a shell, and delegates
        certain tasks to external tools (such as an editor for
        composing/editing messages), all of these tools need to agree on
        a character set and encoding. There exists no way to reliably deduce
        the character set a plain text file has. Interoperability is gained by
        the use of well-defined environment variables. The full set can be
        printed by issuing <literal>locale</literal> on the command line.
      </para>
      <para>
        Upon startup, NeoMutt determines the character set on its own using
        routines that inspect locale-specific environment variables. Therefore,
        it is generally not necessary to set the <literal>$charset</literal>
        variable in NeoMutt. It may even be counter-productive as NeoMutt uses
        system and library functions that derive the character set themselves
        and on which NeoMutt has no influence. It's safest to let NeoMutt work
        out the locale setup itself.
      </para>
      <para>
        If you happen to work with several character sets on a regular basis,
        it's highly advisable to use Unicode and an UTF-8 locale. Unicode can
        represent nearly all characters in a message at the same time. When not
        using a Unicode locale, it may happen that you receive messages with
        characters not representable in your locale. When displaying such
        a message, or replying to or forwarding it, information may get lost
        possibly rendering the message unusable (not only for you but also for
        the recipient, this breakage is not reversible as lost information
        cannot be guessed).
      </para>
      <para>
        A Unicode locale makes all conversions superfluous which eliminates the
        risk of conversion errors. It also eliminates potentially wrong
        expectations about the character set between NeoMutt and external
        programs.
      </para>
      <para>
        The terminal emulator used also must be properly configured for the
        current locale. Terminal emulators usually do <emphasis>not</emphasis>
        derive the locale from environment variables, they need to be
        configured separately. If the terminal is incorrectly configured,
        NeoMutt may display random and unexpected characters (question marks,
        octal codes, or just random glyphs), format strings may not work as
        expected, you may not be abled to enter non-ascii characters, and
        possible more. Data is always represented using bytes and so a correct
        setup is very important as to the machine, all character sets
        <quote>look</quote> the same.
      </para>
      <para>
        Warning: A mismatch between what system and library functions think the
        locale is and what NeoMutt was told what the locale is may make it
        behave badly with non-ascii input: it will fail at seemingly random
        places. This warning is to be taken seriously since not only local mail
        handling may suffer: sent messages may carry wrong character set
        information the <emphasis>receiver</emphasis> has too deal with. The
        need to set <literal>$charset</literal> directly in most cases points
        at terminal and environment variable setup problems, not NeoMutt
        problems.
      </para>
      <para>
        A list of officially assigned and known character sets can be found at
        <ulink url="http://www.iana.org/assignments/character-sets">IANA</ulink>,
        a list of locally supported locales can be obtained by running
        <literal>locale -a</literal>.
      </para>
    </sect1>

    <sect1 id="regex">
      <title>Regular Expressions</title>
      <para>
        All string patterns in NeoMutt including those in more complex
        <link linkend="patterns">patterns</link> must be specified using
        regular expressions (regex) in the <quote>POSIX extended</quote> syntax
        (which is more or less the syntax used by egrep and GNU awk). For your
        convenience, we have included below a brief description of this syntax.
      </para>
      <para>
        The search is case sensitive if the regular expression contains at
        least one upper case letter, and case insensitive otherwise.
      </para>
      <note>
        <para>
          <quote>\</quote> must be quoted if used for a regular expression in
          an initialization command: <quote>\\</quote>.
        </para>
      </note>
      <para>
        A regular expression is a pattern that describes a set of strings.
        Regular expressions are constructed analogously to arithmetic
        expressions, by using various operators to combine smaller expressions.
      </para>
      <note>
        <para>
          The regular expression can be enclosed/delimited by either " or
          ' which is useful if the regular expression includes a white-space
          character. See <xref linkend="neomuttrc-syntax" /> for more
          information on " and ' delimiter processing. To match a literal " or
          ' you must preface it with \ (backslash).
        </para>
      </note>
      <para>
        The fundamental building blocks are the regular expressions that match
        a single character. Most characters, including all letters and digits,
        are regular expressions that match themselves. Any metacharacter with
        special meaning may be quoted by preceding it with a backslash.
      </para>
      <para>
        The following matches a literal dot <quote>.</quote> in an address:
      </para>
      <example id="ex-literal-dot-in-regex">
        <title>Matching a literal dot</title>
<screen>
<emphasis role="comment"># no quotes</emphasis>
alternates only\\.dot@example\\.org

<emphasis role="comment"># single quotes</emphasis>
lists 'only\.dot@example\.org'

<emphasis role="comment"># Double quotes</emphasis>
subscribe "only\\.dot@example\\.org"
</screen>
      </example>
      <para>
        The period <quote>.</quote> matches any single character. The caret
        <quote>^</quote> and the dollar sign <quote>$</quote> are
        metacharacters that respectively match the empty string at the
        beginning and end of a line.
      </para>
      <para>
        A list of characters enclosed by <quote>[</quote> and <quote>]</quote>
        matches any single character in that list; if the first character of
        the list is a caret <quote>^</quote> then it matches any character
        <emphasis>not</emphasis> in the list. For example, the regular
        expression <emphasis>[0123456789]</emphasis> matches any single digit.
        A range of ASCII characters may be specified by giving the first and
        last characters, separated by a hyphen <quote>-</quote>. Most
        metacharacters lose their special meaning inside lists. To include
        a literal <quote>]</quote> place it first in the list. Similarly, to
        include a literal <quote>^</quote> place it anywhere but first.
        Finally, to include a literal hyphen <quote>-</quote> place it last.
      </para>
      <para>
        Certain named classes of characters are predefined. Character classes
        consist of <quote>[:</quote>, a keyword denoting the class, and
        <quote>:]</quote>. The following classes are defined by the POSIX
        standard in <xref linkend="posix-regex-char-classes" />
      </para>

      <table id="posix-regex-char-classes">
        <title>POSIX regular expression character classes</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Character class</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>[:alnum:]</entry>
              <entry>
                Alphanumeric characters
              </entry>
            </row>
            <row>
              <entry>[:alpha:]</entry>
              <entry>
                Alphabetic characters
              </entry>
            </row>
            <row>
              <entry>[:blank:]</entry>
              <entry>
                Space or tab characters
              </entry>
            </row>
            <row>
              <entry>[:cntrl:]</entry>
              <entry>
                Control characters
              </entry>
            </row>
            <row>
              <entry>[:digit:]</entry>
              <entry>
                Numeric characters
              </entry>
            </row>
            <row>
              <entry>[:graph:]</entry>
              <entry>
                Characters that are both printable and visible. (A space is
                printable, but not visible, while an <quote>a</quote> is both)
              </entry>
            </row>
            <row>
              <entry>[:lower:]</entry>
              <entry>
                Lower-case alphabetic characters
              </entry>
            </row>
            <row>
              <entry>[:print:]</entry>
              <entry>
                Printable characters (characters that are not control
                characters)
              </entry>
            </row>
            <row>
              <entry>[:punct:]</entry>
              <entry>
                Punctuation characters (characters that are not letter, digits,
                control characters, or space characters)
              </entry>
            </row>
            <row>
              <entry>[:space:]</entry>
              <entry>
                Space characters (such as space, tab and formfeed, to name
                a few)
              </entry>
            </row>
            <row>
              <entry>[:upper:]</entry>
              <entry>
                Upper-case alphabetic characters
              </entry>
            </row>
            <row>
              <entry>[:xdigit:]</entry>
              <entry>
                Characters that are hexadecimal digits
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        A character class is only valid in a regular expression inside the
        brackets of a character list.
      </para>
      <note>
        <para>
          Note that the brackets in these class names are part of the symbolic
          names, and must be included in addition to the brackets delimiting
          the bracket list. For example, <emphasis>[[:digit:]]</emphasis> is
          equivalent to <emphasis>[0-9]</emphasis>.
        </para>
      </note>
      <para>
        Two additional special sequences can appear in character lists. These
        apply to non-ASCII character sets, which can have single symbols
        (called collating elements) that are represented with more than one
        character, as well as several characters that are equivalent for
        collating or sorting purposes:
      </para>
      <variablelist>
        <varlistentry>
          <term>Collating Symbols</term>
          <listitem>
            <para>
              A collating symbol is a multi-character collating element
              enclosed in <quote>[.</quote> and <quote>.]</quote>. For example,
              if <quote>ch</quote> is a collating element, then
              <emphasis>[[.ch.]]</emphasis> is a regex that matches this
              collating element, while <emphasis>[ch]</emphasis> is a regex
              that matches either <quote>c</quote> or <quote>h</quote>.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Equivalence Classes</term>
          <listitem>
            <para>
              An equivalence class is a locale-specific name for a list of
              characters that are equivalent. The name is enclosed in
              <quote>[=</quote> and <quote>=]</quote>. For example, the name
              <quote>e</quote> might be used to represent all of
              <quote>e</quote> with grave (<quote>è</quote>), <quote>e</quote>
              with acute (<quote>é</quote>) and <quote>e</quote>. In this
              case, <emphasis>[[=e=]]</emphasis> is a regex that matches any
              of: <quote>e</quote> with grave (<quote>è</quote>),
              <quote>e</quote> with acute (<quote>é</quote>) and
              <quote>e</quote>.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>
        A regular expression matching a single character may be followed by one
        of several repetition operators described in
        <xref linkend="regex-repeat" />.
      </para>

      <table id="regex-repeat">
        <title>Regular expression repetition operators</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Operator</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>?</entry>
              <entry>
                The preceding item is optional and matched at most once
              </entry>
            </row>
            <row>
              <entry>*</entry>
              <entry>
                The preceding item will be matched zero or more times
              </entry>
            </row>
            <row>
              <entry>+</entry>
              <entry>
                The preceding item will be matched one or more times
              </entry>
            </row>
            <row>
              <entry>{n}</entry>
              <entry>
                The preceding item is matched exactly <emphasis>n</emphasis>
                times
              </entry>
            </row>
            <row>
              <entry>{n,}</entry>
              <entry>
                The preceding item is matched <emphasis>n</emphasis> or more
                times
              </entry>
            </row>
            <row>
              <entry>{,m}</entry>
              <entry>
                The preceding item is matched at most <emphasis>m</emphasis>
                times
              </entry>
            </row>
            <row>
              <entry>{n,m}</entry>
              <entry>
                The preceding item is matched at least <emphasis>n</emphasis>
                times, but no more than <emphasis>m</emphasis> times
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Two regular expressions may be concatenated; the resulting regular
        expression matches any string formed by concatenating two substrings
        that respectively match the concatenated subexpressions.
      </para>
      <para>
        Two regular expressions may be joined by the infix operator
        <quote>|</quote>; the resulting regular expression matches any string
        matching either subexpression.
      </para>
      <para>
        Repetition takes precedence over concatenation, which in turn takes
        precedence over alternation. A whole subexpression may be enclosed in
        parentheses to override these precedence rules.
      </para>
      <note>
        <para>
          If you compile NeoMutt with the included regular expression engine,
          the following operators may also be used in regular expressions as
          described in <xref linkend="regex-gnu-ext" />.
        </para>
      </note>

      <table id="regex-gnu-ext">
        <title>GNU regular expression extensions</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Expression</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>\y</entry>
              <entry>
                Matches the empty string at either the beginning or the end of
                a word
              </entry>
            </row>
            <row>
              <entry>\B</entry>
              <entry>
                Matches the empty string within a word
              </entry>
            </row>
            <row>
              <entry>\&lt;</entry>
              <entry>
                Matches the empty string at the beginning of a word
              </entry>
            </row>
            <row>
              <entry>\&gt;</entry>
              <entry>
                Matches the empty string at the end of a word
              </entry>
            </row>
            <row>
              <entry>\w</entry>
              <entry>
                Matches any word-constituent character (letter, digit, or
                underscore)
              </entry>
            </row>
            <row>
              <entry>\W</entry>
              <entry>
                Matches any character that is not word-constituent
              </entry>
            </row>
            <row>
              <entry>\`</entry>
              <entry>
                Matches the empty string at the beginning of a buffer (string)
              </entry>
            </row>
            <row>
              <entry>\'</entry>
              <entry>
                Matches the empty string at the end of a buffer
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        Please note however that these operators are not defined by POSIX, so
        they may or may not be available in stock libraries on various systems.
      </para>
    </sect1>

    <sect1 id="patterns">
      <title>Patterns: Searching, Limiting and Tagging</title>

      <sect2 id="patterns-modifier">
        <title>Pattern Modifier</title>
        <para>
          Many of NeoMutt's commands allow you to specify a pattern to match
          (<literal>limit</literal>, <literal>tag-pattern</literal>,
          <literal>delete-pattern</literal>, etc.).
          <xref linkend="tab-patterns" /> shows several ways to select
          messages while <xref linkend="tab-patterns-alias" /> shows ways of selecting aliases.
        </para>

        <table id="tab-patterns">
          <title>Pattern modifiers</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Pattern modifier</entry>
                <entry>Notes</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>~A</entry>
                <entry></entry>
                <entry>
                  all messages
                </entry>
              </row>
              <row>
                <entry>~b <emphasis>EXPR</emphasis></entry>
                <entry>d)</entry>
                <entry>
                  messages which contain <emphasis>EXPR</emphasis> in the
                  message body
                </entry>
              </row>
              <row>
                <entry>=b <emphasis>STRING</emphasis></entry>
                <entry></entry>
                <entry>
                  If IMAP is enabled, like ~b but searches for
                  <emphasis>STRING</emphasis> on the server, rather than
                  downloading each message and searching it locally.
                </entry>
              </row>
              <row>
                <entry>~B <emphasis>EXPR</emphasis></entry>
                <entry>d)</entry>
                <entry>
                  messages which contain <emphasis>EXPR</emphasis> in the whole
                  message
                </entry>
              </row>
              <row>
                <entry>=B <emphasis>STRING</emphasis></entry>
                <entry></entry>
                <entry>
                  If IMAP is enabled, like ~B but searches for
                  <emphasis>STRING</emphasis> on the server, rather than
                  downloading each message and searching it locally.
                </entry>
              </row>
              <row>
                <entry>~c <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages carbon-copied to <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>%c <emphasis>GROUP</emphasis></entry>
                <entry></entry>
                <entry>
                  messages carbon-copied to any member of
                  <emphasis>GROUP</emphasis>
                </entry>
              </row>
              <row>
                <entry>~C <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages either to:, cc: or bcc: <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>%C <emphasis>GROUP</emphasis></entry>
                <entry></entry>
                <entry>
                  messages either to:, cc: or bcc: to any member of
                  <emphasis>GROUP</emphasis>
                </entry>
              </row>
              <row>
                <entry>~d [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry>
                <entry></entry>
                <entry>
                  messages with <quote>date-sent</quote> in a Date range
                </entry>
              </row>
              <row>
                <entry>~D</entry>
                <entry></entry>
                <entry>
                  deleted messages
                </entry>
              </row>
              <row>
                <entry>~e <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages which contains <emphasis>EXPR</emphasis> in the
                  <quote>Sender</quote> field
                </entry>
              </row>
              <row>
                <entry>%e <emphasis>GROUP</emphasis></entry>
                <entry></entry>
                <entry>
                  messages which contain a member of <emphasis>GROUP</emphasis>
                  in the <quote>Sender</quote> field
                </entry>
              </row>
              <row>
                <entry>~E</entry>
                <entry></entry>
                <entry>
                  expired messages
                </entry>
              </row>
              <row>
                <entry>~F</entry>
                <entry></entry>
                <entry>
                  flagged messages
                </entry>
              </row>
              <row>
                <entry>~f <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages originating from <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>%f <emphasis>GROUP</emphasis></entry>
                <entry></entry>
                <entry>
                  messages originating from any member of
                  <emphasis>GROUP</emphasis>
                </entry>
              </row>
              <row>
                <entry>~g</entry>
                <entry></entry>
                <entry>
                  cryptographically signed messages
                </entry>
              </row>
              <row>
                <entry>~G</entry>
                <entry></entry>
                <entry>
                  cryptographically encrypted messages
                </entry>
              </row>
              <row>
                <entry>~h <emphasis>EXPR</emphasis></entry>
                <entry>d)</entry>
                <entry>
                  messages which contain <emphasis>EXPR</emphasis> in the
                  message header
                </entry>
              </row>
              <row>
                <entry>=h <emphasis>STRING</emphasis></entry>
                <entry></entry>
                <entry>
                  If IMAP is enabled, like ~h but searches for
                  <emphasis>STRING</emphasis> on the server, rather than
                  downloading each message and searching it locally;
                  <emphasis>STRING</emphasis> must be of the form
                  <quote>header: substring</quote>(see below).
                </entry>
              </row>
              <row>
                <entry>~H <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages with a spam attribute matching
                  <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>~i <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages which match <emphasis>EXPR</emphasis> in the
                  <quote>Message-ID</quote> field
                </entry>
              </row>
              <row>
                <entry>~I <emphasis>QUERY</emphasis></entry>
                <entry></entry>
                <entry>
                  messages whose <quote>Message-ID</quote> field is included in
                  the results returned from an external search program, when the program
                  is run with <emphasis>QUERY</emphasis> as its argument.
                  This is explained in greater detail in the variable reference entry
                  <xref linkend="external-search-command"/>,
                </entry>
              </row>
              <row>
                <entry>~k</entry>
                <entry></entry>
                <entry>
                  messages which contain PGP key material
                </entry>
              </row>
              <row>
                <entry>~K <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages blind carbon-copied to <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>~L <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages either originated or received by
                  <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>%L <emphasis>GROUP</emphasis></entry>
                <entry></entry>
                <entry>
                  message either originated or received by any member of
                  <emphasis>GROUP</emphasis>
                </entry>
              </row>
              <row>
                <entry>~l</entry>
                <entry></entry>
                <entry>
                  messages addressed to a known mailing list
                </entry>
              </row>
              <row>
                <entry>~m [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry>
                <entry>c)</entry>
                <entry>
                  messages with numbers in the range <emphasis>MIN</emphasis>
                  to <emphasis>MAX</emphasis>
                </entry>
              </row>
              <row>
                <entry>~m &lt;[<emphasis>MAX</emphasis>]</entry>
                <entry>c)</entry>
                <entry>
                  messages with numbers less than <emphasis>MAX</emphasis>
                </entry>
              </row>
              <row>
                <entry>~m &gt;[<emphasis>MIN</emphasis>]</entry>
                <entry>c)</entry>
                <entry>
                  messages with numbers greater than <emphasis>MIN</emphasis>
                </entry>
              </row>
              <row>
                <entry>~m [<emphasis>M</emphasis>]</entry>
                <entry>c)</entry>
                <entry>
                  just message number <emphasis>M</emphasis>
                </entry>
              </row>
              <row>
                <entry>~m [<emphasis>MIN</emphasis>],[<emphasis>MAX</emphasis>]</entry>
                <entry>c)</entry>
                <entry>
                  messages with offsets (from selected message) in the range
                  <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis>
                </entry>
              </row>
              <row>
                <entry>~M <emphasis>EXPR</emphasis></entry>
                <entry>d)</entry>
                <entry>
                   messages which contain a mime Content-Type matching
                   <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>~n [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry>
                <entry>a)</entry>
                <entry>
                  messages with a score in the range <emphasis>MIN</emphasis>
                  to <emphasis>MAX</emphasis>
                </entry>
              </row>
              <row>
                <entry>~N</entry>
                <entry></entry>
                <entry>
                  new messages
                </entry>
              </row>
              <row>
                <entry>~O</entry>
                <entry></entry>
                <entry>
                  old messages
                </entry>
              </row>
              <row>
                <entry>~p</entry>
                <entry></entry>
                <entry>
                  messages addressed to you (consults <link linkend="from">$from</link>,
                  <command>alternates</command>, and local account/hostname information)
                </entry>
              </row>
              <row>
                <entry>~P</entry>
                <entry></entry>
                <entry>
                  messages from you (consults <link linkend="from">$from</link>,
                  <command>alternates</command>, and local account/hostname information)
                </entry>
              </row>
              <row>
                <entry>~Q</entry>
                <entry></entry>
                <entry>
                  messages which have been replied to
                </entry>
              </row>
              <row>
                <entry>~r [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry>
                <entry></entry>
                <entry>
                  messages with <quote>date-received</quote> in a Date range
                </entry>
              </row>
              <row>
                <entry>~R</entry>
                <entry></entry>
                <entry>
                  read messages
                </entry>
              </row>
              <row>
                <entry>~s <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages having <emphasis>EXPR</emphasis> in the
                  <quote>Subject</quote> field.
                </entry>
              </row>
              <row>
                <entry>~S</entry>
                <entry></entry>
                <entry>
                  superseded messages
                </entry>
              </row>
              <row>
                <entry>~t <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages addressed to <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>~T</entry>
                <entry></entry>
                <entry>
                  tagged messages
                </entry>
              </row>
              <row>
                <entry>~u</entry>
                <entry></entry>
                <entry>
                  messages addressed to a subscribed mailing list
                </entry>
              </row>
              <row>
                <entry>~U</entry>
                <entry></entry>
                <entry>
                  unread messages
                </entry>
              </row>
              <row>
                <entry>~v</entry>
                <entry></entry>
                <entry>
                  messages part of a collapsed thread.
                </entry>
              </row>
              <row>
                <entry>~V</entry>
                <entry></entry>
                <entry>
                  cryptographically verified messages
                </entry>
              </row>
              <row>
                <entry>~w <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  newsgroups matching EXPR
                </entry>
              </row>
              <row>
                <entry>~x <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages which contain <emphasis>EXPR</emphasis> in the
                  <quote>References</quote> or <quote>In-Reply-To</quote> field
                </entry>
              </row>
              <row>
                <entry>~X [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry>
                <entry>a), d)</entry>
                <entry>
                  messages with <emphasis>MIN</emphasis> to <emphasis>MAX</emphasis> attachments
                </entry>
              </row>
              <row>
                <entry>~y <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages which contain <emphasis>EXPR</emphasis> in their
                  keywords
                </entry>
              </row>
              <row>
                <entry>~Y <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  messages whose tags match <emphasis>EXPR</emphasis>
                </entry>
              </row>
              <row>
                <entry>~z [<emphasis>MIN</emphasis>]-[<emphasis>MAX</emphasis>]</entry>
                <entry>a), b)</entry>
                <entry>
                  messages with a size in the range <emphasis>MIN</emphasis> to
                  <emphasis>MAX</emphasis>
                </entry>
              </row>
              <row>
                <entry>=/ <emphasis>STRING</emphasis></entry>
                <entry></entry>
                <entry>
                  IMAP custom server-side search for
                  <emphasis>STRING</emphasis>. Currently only defined for
                  Gmail. See:
                  <link linkend="gmail-patterns">Gmail Patterns</link>
                </entry>
              </row>
              <row>
                <entry>~=</entry>
                <entry></entry>
                <entry>
                  duplicated messages (see
                  <link linkend="duplicate-threads">$duplicate_threads</link>)
                </entry>
              </row>
              <row>
                <entry>~#</entry>
                <entry></entry>
                <entry>
                  broken threads (see
                  <link linkend="strict-threads">$strict_threads</link>)
                </entry>
              </row>
              <row>
                <entry>~$</entry>
                <entry></entry>
                <entry>
                  unreferenced messages (requires threaded view)
                </entry>
              </row>
              <row>
                <entry>~(<emphasis>PATTERN</emphasis>)</entry>
                <entry></entry>
                <entry>
                  messages in threads containing messages matching
                  <emphasis>PATTERN</emphasis>, e.g. all threads containing
                  messages from you: ~(~P)
                </entry>
              </row>
              <row>
                <entry>~&lt;(<emphasis>PATTERN</emphasis>)</entry>
                <entry></entry>
                <entry>
                  messages whose immediate parent matches
                  <emphasis>PATTERN</emphasis>, e.g. replies to your messages:
                  ~&lt;(~P)
                </entry>
              </row>
              <row>
                <entry>~&gt;(<emphasis>PATTERN</emphasis>)</entry>
                <entry></entry>
                <entry>
                  messages having an immediate child matching
                  <emphasis>PATTERN</emphasis>, e.g. messages you replied to:
                  ~&gt;(~P)
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table id="tab-patterns-alias">
          <title>Alias pattern modifiers</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Pattern modifier</entry>
                <entry>Notes</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>~c <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  aliases which contain <emphasis>EXPR</emphasis> in the
                  alias comment
                </entry>
              </row>
              <row>
                <entry>~f <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  aliases which contain <emphasis>EXPR</emphasis> in the
                  alias name (<emphasis>From</emphasis> part of alias)
                </entry>
              </row>
              <row>
                <entry>~t <emphasis>EXPR</emphasis></entry>
                <entry></entry>
                <entry>
                  aliases which contain <emphasis>EXPR</emphasis> in the
                  alias address (<emphasis>To</emphasis> part of alias)
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
          Where <emphasis>EXPR</emphasis> is a
          <link linkend="regex">regular expression</link>, and
          <emphasis>GROUP</emphasis> is an
          <link linkend="addrgroup">address group</link>.
        </para>
        <para>
          a) The forms <quote>&lt;[<emphasis>MAX</emphasis>]</quote>,
          <quote>&gt;[<emphasis>MIN</emphasis>]</quote>,
          <quote>[<emphasis>MIN</emphasis>]-</quote> and
          <quote>-[<emphasis>MAX</emphasis>]</quote> are allowed, too.
        </para>
        <para>
          b) The suffixes <quote>K</quote> and <quote>M</quote> are allowed to
          specify kilobyte and megabyte respectively.
        </para>
        <para>
          c) The message number ranges (introduced by <literal>~m</literal>)
          are even more general and powerful than the other types of ranges.
          Read on and see <xref linkend="message-ranges" /> below.
        </para>
        <para>
          d) These patterns read each message in, and can therefore be much
          slower.  Over IMAP this will entail downloading each message.  They
          can not be used for <link linkend="score-command">message scoring</link>,
          and it is recommended to avoid using them for index coloring.
        </para>
        <para>
          Special attention has to be paid when using regular expressions
          inside of patterns. Specifically, NeoMutt's parser for these patterns
          will strip one level of backslash (<quote>\</quote>), which is
          normally used for quoting. If it is your intention to use a backslash
          in the regular expression, you will need to use two backslashes
          instead (<quote>\\</quote>).
        </para>
      <example id="ex-literal-dot-in-pattern">
        <title>Using <literal>\s</literal> and matching a literal dot in patterns</title>
<screen>
<emphasis role="comment"># no quotes</emphasis>
save-hook ~h\ list-id:\\\\s*&lt;only\\\\.dot&gt;    '=archive'
save-hook ~hlist-id:\\\\s*&lt;only\\\\.dot-here&gt; '=archive'

<emphasis role="comment"># single quotes</emphasis>
save-hook '~h list-id:\\s&lt;only\\.dot&gt;'        '=archive'
save-hook ~h'list-id:\\s*&lt;only\\.dot-here&gt;'   '=archive'

<emphasis role="comment"># Double quotes</emphasis>
save-hook "~h list-id:\\\\s&lt;only\\\\.dot&gt;"    '=archive'
save-hook ~h"list-id:\\\\s*&lt;only\\\\.dot&gt;"    '=archive'
</screen>
      </example>
        <para>
          You can force NeoMutt to treat
          <emphasis>EXPR</emphasis> as a simple substring instead of a regular
          expression by using = instead of ~ in the pattern name. For example,
          <literal>=b *.*</literal> will find all messages that contain the
          literal string <quote>*.*</quote>. Simple string matches are less
          powerful than regular expressions but can be considerably faster.
        </para>
        <para>
          For IMAP folders, string matches <literal>=b</literal>,
          <literal>=B</literal>, and <literal>=h</literal> will be performed on
          the server instead of by fetching every message. IMAP treats
          <literal>=h</literal> specially: it must be of the form
          <quote>header: substring</quote> and will not partially match header
          names. The substring part may be omitted if you simply wish to find
          messages containing a particular header without regard to its value.
        </para>
        <para>
          Patterns matching lists of addresses (notably c, C, p, P and t) match
          if there is at least one match in the whole list. If you want to make
          sure that all elements of that list match, you need to prefix your
          pattern with <quote>^</quote>. This example matches all mails which
          only has recipients from Germany.
        </para>
        <example id="ex-recips">
          <title>Matching all addresses in address lists</title>
          <screen>^~C \.de$</screen>
        </example>
        <para>
          You can restrict address pattern matching to aliases that you have
          defined with the "@" modifier. This example matches messages whose
          recipients are all from Germany, and who are known to your alias
          list.
        </para>
        <example id="ex-restrict-to-aliases">
          <title>Matching restricted to aliases</title>
          <screen>^@~C \.de$</screen>
        </example>
        <para>
          To match any defined alias, use a regular expression that matches any
          string. This example matches messages whose senders are known
          aliases.
        </para>
        <example id="ex-match-alias">
          <title>Matching any defined alias</title>
          <screen>@~f .</screen>
        </example>

        <sect3 id="message-ranges">
          <title>Message Ranges</title>
          <para>
            If a message number range (from now on: MNR) contains a comma
            (<literal>,</literal>), it is a <emphasis>relative</emphasis> MNR.
            That means the numbers denote <emphasis>offsets</emphasis> from the
            highlighted message. For example:
          </para>

          <table id="relative-mnrs">
            <title>Relative Message Number Ranges</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Pattern</entry>
                  <entry>Explanation</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <literal>~m -2,2</literal>
                  </entry>
                  <entry>Previous 2, highlighted and next 2 emails</entry>
                </row>
                <row>
                  <entry>
                    <literal>~m 0,1</literal>
                  </entry>
                  <entry>Highlighted and next email</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            In addition to numbers, either side of the range can also contain
            one of the special characters (shortcuts) <literal>.^$</literal>.
            The meaning is:
          </para>

          <table id="mnrs-shortcuts">
            <title>Message Number Shortcuts</title>
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>Shortcut</entry>
                  <entry>Explanation</entry>
                  <entry>Example</entry>
                  <entry>Meaning</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><literal>.</literal></entry>
                  <entry>Current / Highlighted</entry>
                  <entry><literal>~m -3,.</literal></entry>
                  <entry>Previous 3 emails plus the highlighted one</entry>
                </row>
                <row>
                  <entry><literal>$</literal></entry>
                  <entry>Last</entry>
                  <entry><literal>~m .,$</literal></entry>
                  <entry>Highlighted email and all the later ones</entry>
                </row>
                <row>
                  <entry><literal>^</literal></entry>
                  <entry>First</entry>
                  <entry><literal>~m ^,1</literal></entry>
                  <entry>Highlighted, next and all preceding ones</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            Lastly, you can also leave either side of the range blank, to make
            it extend as far as possible. For example, <literal>~m ,1</literal>
            has the same meaning as the last example in
            <xref linkend="mnrs-shortcuts" />.
          </para>
          <para>
            Otherwise, if a MNR <emphasis>doesn't</emphasis> contain a comma,
            the meaning is similar to other ranges, except that the shortcuts
            are still available. Examples:
          </para>

          <table id="mnrs-absolute">
            <title>Absolute Message Number Ranges</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Pattern</entry>
                  <entry>Explanation</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><literal>~m 3-10</literal></entry>
                  <entry>Emails 3 to 10</entry>
                </row>
                <row>
                  <entry><literal>~m -10</literal></entry>
                  <entry>Emails 1 to 10</entry>
                </row>
                <row>
                  <entry><literal>~m 10-</literal></entry>
                  <entry>Emails 10 to last</entry>
                </row>
                <row>
                  <entry><literal>~m &lt;3</literal></entry>
                  <entry>First and second email</entry>
                </row>
                <row>
                  <entry><literal>~m ^-2</literal></entry>
                  <entry>First and second email</entry>
                </row>
                <row>
                  <entry><literal>~m &gt;1</literal></entry>
                  <entry>Everything but first email</entry>
                </row>
                <row>
                  <entry><literal>~m 2-$</literal></entry>
                  <entry>Everything but first email</entry>
                </row>
                <row>
                  <entry><literal>~m 2</literal></entry>
                  <entry>Just the second email</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </sect3>
      </sect2>

      <sect2 id="simple-searches">
        <title>Simple Searches</title>
        <para>
          NeoMutt supports two versions of so called
          <quote>simple searches</quote>. These are issued if the query entered
          for searching, limiting and similar operations does not seem to
          contain a valid pattern modifier (i.e. it does not contain one of
          these characters: <quote>~</quote>, <quote>=</quote> or
          <quote>%</quote>). If the query is supposed to contain one of these
          special characters, they must be escaped by prepending a backslash
          (<quote>\</quote>).
        </para>
        <para>
          The first type is by checking whether the query string equals
          a keyword case-insensitively from
          <xref linkend="tab-simplesearch-keywords" />: If that is the case,
          NeoMutt will use the shown pattern modifier instead. If a keyword
          would conflict with your search keyword, you need to turn it into
          a regular expression to avoid matching the keyword table. For
          example, if you want to find all messages matching
          <quote>flag</quote> (using
          <link linkend="simple-search">$simple_search</link>) but don't want
          to match flagged messages, simply search for
          <quote><literal>[f]lag</literal></quote>.
        </para>

        <table id="tab-simplesearch-keywords">
          <title>Simple search keywords</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Keyword</entry>
                <entry>Pattern modifier</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>all</entry>
                <entry>~A</entry>
              </row>
              <row>
                <entry>.</entry>
                <entry>~A</entry>
              </row>
              <row>
                <entry>^</entry>
                <entry>~A</entry>
              </row>
              <row>
                <entry>del</entry>
                <entry>~D</entry>
              </row>
              <row>
                <entry>flag</entry>
                <entry>~F</entry>
              </row>
              <row>
                <entry>new</entry>
                <entry>~N</entry>
              </row>
              <row>
                <entry>old</entry>
                <entry>~O</entry>
              </row>
              <row>
                <entry>repl</entry>
                <entry>~Q</entry>
              </row>
              <row>
                <entry>read</entry>
                <entry>~R</entry>
              </row>
              <row>
                <entry>tag</entry>
                <entry>~T</entry>
              </row>
              <row>
                <entry>unread</entry>
                <entry>~U</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          The second type of simple search is to build a complex search pattern
          using <link linkend="simple-search">$simple_search</link> as
          a template. NeoMutt will insert your query properly quoted and search
          for the composed complex query.
        </para>
      </sect2>

      <sect2 id="complex-patterns">
        <title>Nesting and Boolean Operators</title>
        <para>
          Logical AND is performed by specifying more than one criterion. For
          example:
        </para>
        <screen>~t work ~f smith</screen>
        <para>
          would select messages which contain the word <quote>work</quote> in
          the list of recipients <emphasis>and</emphasis> that have the word
          <quote>smith</quote> in the <quote>From</quote> header field.
        </para>
        <para>
          NeoMutt also recognizes the following operators to create more
          complex search patterns:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              ! – logical NOT operator
            </para>
          </listitem>
          <listitem>
            <para>
              | – logical OR operator
            </para>
          </listitem>
          <listitem>
            <para>
              () – logical grouping operator
            </para>
          </listitem>
        </itemizedlist>
        <para>
          Here is an example illustrating a complex search pattern. This
          pattern will select all messages which do not contain
          <quote>work</quote> in the <quote>To</quote> or <quote>Cc</quote>
          field and which are from <quote>smith</quote>.
        </para>
        <example id="ex-pattern-bool">
          <title>Using boolean operators in patterns</title>
          <screen>!(~t work|~c work) ~f smith</screen>
        </example>
        <para>
          Here is an example using white space in the regular expression (note
          the <quote>'</quote> and <quote>"</quote> delimiters). For this to
          match, the mail's subject must match the
          <quote>^Junk +From +Me$</quote> and it must be from either
          <quote>Jim +Somebody</quote> or <quote>Ed +SomeoneElse</quote>:
        </para>

<screen>
'~s "^Junk +From +Me$" ~f ("Jim +Somebody"|"Ed +SomeoneElse")'
</screen>

        <note>
          <para>
            If a regular expression contains parenthesis, or a vertical bar
            ("|"), you <emphasis>must</emphasis> enclose the expression in
            double or single quotes since those characters are also used to
            separate different parts of NeoMutt's pattern language. For
            example: <literal>~f "user@(home\.org|work\.com)"</literal> Without
            the quotes, the parenthesis wouldn't end. This would be separated
            to two OR'd patterns: <emphasis>~f user@(home\.org</emphasis> and
            <emphasis>work\.com)</emphasis>. They are never what you want.
          </para>
        </note>
      </sect2>

      <sect2 id="date-patterns">
        <title>Searching by Date</title>
        <para>
          NeoMutt supports two types of dates, <emphasis>absolute</emphasis>
          and <emphasis>relative</emphasis>.
        </para>

        <sect3 id="date-absolute">
          <title>Absolute Dates</title>
          <para>
            Dates <emphasis>must</emphasis> be in DD/MM/YY format (month and year
            are optional, defaulting to the current month and year) or YYYYMMDD.  An
            example of a valid range of dates is:
          </para>
<screen>
Limit to messages matching: ~d 20/1/95-31/10
Limit to messages matching: ~d 19950120-19951031
</screen>
          <para>
            If you omit the minimum (first) date, and just specify
            <quote>-DD/MM/YY</quote> or <quote>-YYYYMMDD</quote>, all messages
            <emphasis>before</emphasis> the given date will be selected.  If you omit the
            maximum(second) date, and specify <quote>DD/MM/YY-</quote>, all messages
            <emphasis>after</emphasis> the given date will be selected. If you
            specify a single date with no dash (<quote>-</quote>), only
            messages sent on the given date will be selected.
          </para>
          <para>
            You can add error margins to absolute dates. An error margin is
            a sign (+ or -), followed by a digit, followed by one of the units
            in <xref linkend="tab-date-units" />. As a special case, you can
            replace the sign by a <quote>*</quote> character, which is
            equivalent to giving identical plus and minus error margins.
          </para>

          <table id="tab-date-units">
            <title>Date units</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Unit</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>y</entry>
                  <entry>Years</entry>
                </row>
                <row>
                  <entry>m</entry>
                  <entry>Months</entry>
                </row>
                <row>
                  <entry>w</entry>
                  <entry>Weeks</entry>
                </row>
                <row>
                  <entry>d</entry>
                  <entry>Days</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            Example: To select any messages two weeks around January 15, 2001,
            you'd use the following pattern:
          </para>
          <screen>Limit to messages matching: ~d 15/1/2001*2w</screen>
        </sect3>

        <sect3 id="dates-relative">
          <title>Relative Dates</title>
          <para>
            This type of date is relative to the current date, and may be
            specified as:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                &gt; <emphasis>offset</emphasis> for messages older than
                <emphasis>offset</emphasis> units
              </para>
            </listitem>
            <listitem>
              <para>
                &lt; <emphasis>offset</emphasis> for messages newer than
                <emphasis>offset</emphasis> units
              </para>
            </listitem>
            <listitem>
              <para>
                = <emphasis>offset</emphasis> for messages exactly
                <emphasis>offset</emphasis> units old
              </para>
            </listitem>
          </itemizedlist>
          <para>
            <emphasis>offset</emphasis> is specified as a positive number with
            one of the units from <xref linkend="tab-rel-date-units" />.
          </para>
          <table id="tab-rel-date-units">
            <title>Relative date units</title>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Unit</entry>
                  <entry>Description</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>y</entry>
                  <entry>Years</entry>
                </row>
                <row>
                  <entry>m</entry>
                  <entry>Months</entry>
                </row>
                <row>
                  <entry>w</entry>
                  <entry>Weeks</entry>
                </row>
                <row>
                  <entry>d</entry>
                  <entry>Days</entry>
                </row>
                <row>
                  <entry>H</entry>
                  <entry>Hours</entry>
                </row>
                <row>
                  <entry>M</entry>
                  <entry>Minutes</entry>
                </row>
                <row>
                  <entry>S</entry>
                  <entry>Seconds</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            Example: to select messages less than 1 month old, you would use
          </para>
          <screen>Limit to messages matching: ~d &lt;1m</screen>
          <note>
            <para>
              All dates used when searching are relative to the
              <emphasis>local</emphasis> time zone, so unless you change the
              setting of your <link linkend="index-format">$index_format</link>
              to include a <literal>%[...]</literal> format, these are
              <emphasis>not</emphasis> the dates shown in the main index.
            </para>
          </note>
        </sect3>
      </sect2>

      <sect2 id="gmail-patterns">
        <title>Gmail Patterns</title>
        <para>
          <literal>=/ "search terms"</literal> invokes server-side search,
          passing along the search terms provided. Search results are
          constrained by IMAP to be within the current folder. At present this
          only supports Gmail's search API IMAP extension. The search language
          is entirely up to the mail provider and changes at their discretion.
          Using <literal>~/</literal> will silently fail.
        </para>
        <para>
          For up-to-date information about searching, see:
          <ulink url="https://support.google.com/mail/answer/7190?hl=en">Gmail's Support Page</ulink>.
          You will need to (once) use a web-browser to visit Settings/Labels
          and enable "Show in IMAP" for "All Mail". When searching, visit that
          folder in NeoMutt to most closely match Gmail search semantics.
        </para>

        <table id="gmail-example-patterns">
          <title>Gmail Example Patterns</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Pattern</entry>
                <entry>Matches</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <literal>=/ "list:foo.example.org has:attachment is:important"</literal>
                </entry>
                <entry>
                  the foo.example.org mailing-list per Gmail's definitions, and
                  has an attachment, and has been marked as important
                </entry>
              </row>
              <row>
                <entry>
                  <literal>=/ "{has:purple-star has:yellow-star} older_than:2m"</literal>
                </entry>
                <entry>
                  is older than two months and has either a purple-star or
                  a yellow-star
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>
    </sect1>

    <sect1 id="markmsg">
      <title>Marking Messages</title>
      <para>
        There are times that it's useful to ask NeoMutt to "remember" which
        message you're currently looking at, while you move elsewhere in your
        mailbox. You can do this with the <quote>mark-message</quote> operator,
        which is bound to the <quote>~</quote> key by default. Press this key
        to enter an identifier for the marked message. When you want to return
        to this message, press <quote>'</quote> and the name that you
        previously entered.
      </para>
      <para>
        (Message marking is really just a shortcut for defining a macro that
        returns you to the current message by searching for its Message-ID.
        You can choose a different prefix by setting the
        <link linkend="mark-macro-prefix">$mark_macro_prefix</link> variable.)
      </para>
    </sect1>

    <sect1 id="tags">
      <title>Using Tags</title>
      <para>
        Sometimes it is desirable to perform an operation on a group of
        messages all at once rather than one at a time. An example might be to
        save messages to a mailing list to a separate folder, or to delete all
        messages with a given subject. To tag all messages matching a pattern,
        use the <literal>&lt;tag-pattern&gt;</literal> function, which is bound
        to <quote>shift-T</quote> by default. Patterns are completable in the
        editor menu. Invoke the <literal>&lt;complete&gt;</literal> function
        (by default bound to <quote>Tab</quote>) after typing <quote>~</quote>
        to get a selectable list. Or you can select individual messages by hand
        using the <literal>&lt;tag-message&gt;</literal> function, which is
        bound to <quote>t</quote> by default.
        See <link linkend="patterns">patterns</link> for NeoMutt's pattern
        matching syntax.
      </para>
      <para>
        Once you have tagged the desired messages, you can use the
        <quote>tag-prefix</quote> operator, which is the <quote>;</quote>
        (semicolon) key by default. When the <quote>tag-prefix</quote> operator
        is used, the <emphasis>next</emphasis> operation will be applied to all
        tagged messages if that operation can be used in that manner. If the
        <link linkend="auto-tag">$auto_tag</link> variable is set, the next
        operation applies to the tagged messages automatically, without
        requiring the <quote>tag-prefix</quote>.
      </para>
      <para>
        In <link linkend="macro"><command>macro</command></link>s or
        <link linkend="push"><command>push</command></link> commands, you can
        use the <literal>&lt;tag-prefix-cond&gt;</literal> operator. If there
        are no tagged messages, NeoMutt will <quote>eat</quote> the rest of the
        macro to abort its execution. NeoMutt will stop <quote>eating</quote>
        the macro when it encounters the <literal>&lt;end-cond&gt;</literal>
        operator; after this operator the rest of the macro will be executed as
        normal.
      </para>
    </sect1>

    <sect1 id="hooks">
      <title>Using Hooks</title>
      <para>
        A <emphasis>hook</emphasis> is a concept found in many other programs
        which allows you to execute arbitrary commands before performing some
        operation. For example, you may wish to tailor your configuration based
        upon which mailbox you are reading, or to whom you are sending mail. In
        the NeoMutt world, a <emphasis>hook</emphasis> consists of a
        <link linkend="regex">regular expression</link> or
        <link linkend="patterns">pattern</link> along with a configuration
        option/command. See:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <link linkend="account-hook"><command>account-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="charset-hook"><command>charset-hook</command></link>
          </para>
          <para>
            <link linkend="iconv-hook"><command>iconv-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="index-format-hook"><command>index-format-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="crypt-hook"><command>crypt-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="fcc-save-hook"><command>fcc-save-hook</command></link>
          </para>
          <para>
            <link linkend="fcc-hook"><command>fcc-hook</command></link>
          </para>
          <para>
            <link linkend="save-hook"><command>save-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="folder-hook"><command>folder-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="mbox-hook"><command>mbox-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="message-hook"><command>message-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="open-hook"><command>open-hook</command></link>
          </para>
          <para>
            <link linkend="close-hook"><command>close-hook</command></link>
          </para>
          <para>
            <link linkend="append-hook"><command>append-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="reply-hook"><command>reply-hook</command></link>
          </para>
          <para>
            <link linkend="send-hook"><command>send-hook</command></link>
          </para>
          <para>
            <link linkend="send2-hook"><command>send2-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="global-hooks"><command>timeout-hook</command></link>
          </para>
          <para>
            <link linkend="global-hooks"><command>startup-hook</command></link>
          </para>
          <para>
            <link linkend="global-hooks"><command>shutdown-hook</command></link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="unhook"><command>unhook</command></link>
          </para>
        </listitem>
      </itemizedlist>
      <para>
        for specific details on each type of <emphasis>hook</emphasis>
        available.  Also see <link linkend="compose-flow">Message Composition
        Flow</link> for an overview of the composition process.
      </para>
      <note>
        <para>
          If a hook changes configuration settings, these changes remain
          effective until the end of the current NeoMutt session. As this is
          generally not desired, a <quote>default</quote> hook needs to be
          added before all other hooks of that type to restore configuration
          defaults.
        </para>
      </note>
      <example id="ex-default-hook">
        <title>Specifying a <quote>default</quote> hook</title>

<screen>
send-hook . 'unmy_hdr From:'
send-hook ~C'^b@b\\.b$' my_hdr from: c@c.c
</screen>

      </example>
      <para>
        In <xref linkend="ex-default-hook" />, by default the value of
        <link linkend="from">$from</link> and
        <link linkend="real-name">$real_name</link> is not overridden. When
        sending messages either To: or Cc: to <literal>&lt;b@b.b&gt;</literal>,
        the From: header is changed to <literal>&lt;c@c.c&gt;</literal>.
      </para>

      <sect2 id="pattern-hook" xreflabel="Message Matching in Hooks">
        <title>Message Matching in Hooks</title>
        <para>
          Hooks that act upon messages (<command>message-hook</command>,
          <command>reply-hook</command>, <command>send-hook</command>,
          <command>send2-hook</command>, <command>save-hook</command>,
          <command>fcc-hook</command>, <command>index-format-hook</command>)
          are evaluated in a slightly different
          manner. For the other types of hooks, a
          <link linkend="regex">regular expression</link> is sufficient. But in
          dealing with messages a finer grain of control is needed for matching
          since for different purposes you want to match different criteria.
        </para>
        <para>
          NeoMutt allows the use of the
          <link linkend="patterns">search pattern</link> language for matching
          messages in hook commands. This works in exactly the same way as it
          would when <emphasis>limiting</emphasis> or
          <emphasis>searching</emphasis> the mailbox, except that you are
          restricted to those operators which match information NeoMutt
          extracts from the header of the message (i.e., from, to, cc, date,
          subject, etc.).
        </para>
        <para>
          For example, if you wanted to set your return address based upon
          sending mail to a specific address, you could do something like:
        </para>

<screen>
send-hook '~t ^user@work\\.com$' 'my_hdr From: John Smith &lt;user@host&gt;'
</screen>

        <para>
          which would execute the given command when sending mail to
          <emphasis>user@work.com</emphasis>.
        </para>
        <para>
          However, it is not required that you write the pattern to match using
          the full searching language. You can still specify a simple
          <emphasis>regular expression</emphasis> like the other hooks, in
          which case NeoMutt will translate your pattern into the full
          language, using the translation specified by the
          <link linkend="default-hook">$default_hook</link> variable. The
          pattern is translated at the time the hook is declared, so the value
          of <link linkend="default-hook">$default_hook</link> that is in
          effect at that time will be used.
        </para>
      </sect2>

      <sect2 id="mailbox-hook" xreflabel="Mailbox Matching in Hooks">
        <title>Mailbox Matching in Hooks</title>
        <para>
          Hooks that match against mailboxes (<command>folder-hook</command>,
          <command>mbox-hook</command>) apply both
          <link linkend="regex">regular expression</link> syntax as well as
          <link linkend="shortcuts">mailbox shortcut</link> expansion on the
          regex parameter. There is some overlap between these, so special
          attention should be paid to the first character of the regex.
        </para>

<screen>
<emphasis role="comment"># Here, ^ will expand to "the current mailbox" not "beginning of string":</emphasis>
folder-hook ^/home/user/Mail/bar "set sort=threads"
<emphasis role="comment"># If you want ^ to be interpreted as "beginning of string", one workaround</emphasis>
<emphasis role="comment"># is to enclose the regex in parenthesis:</emphasis>
folder-hook (^/home/user/Mail/bar) "set sort=threads"
<emphasis role="comment"># This will expand to the default save folder for the alias "imap.example.com", which</emphasis>
<emphasis role="comment"># is probably not what you want:</emphasis>
folder-hook @imap\\.example\\.com "set sort=threads"
<emphasis role="comment"># A workaround is to use parenthesis or a backslash:</emphasis>
folder-hook (@imap\\.example\\.com) "set sort=threads"
folder-hook '\@imap\.example\.com' "set sort=threads"
</screen>

        <para>
          Keep in mind that mailbox shortcut expansion on the regex parameter
          takes place when the hook is initially parsed, not when the hook is
          matching against a mailbox. When NeoMutt starts up and is reading the
          .neomuttrc, some mailbox shortcuts may not be usable. For example,
          the "current mailbox" shortcut, ^, will expand to an empty string
          because no mailbox has been opened yet. NeoMutt will issue an error
          for this case or if the mailbox shortcut results in an empty regex.
        </para>
      </sect2>
    </sect1>

    <sect1 id="setenv">
      <title>Managing the Environment</title>
      <para>
        You can alter the environment that NeoMutt passes on to its child
        processes using the <quote>setenv</quote> and <quote>unsetenv</quote>
        commands. You can also query current environment values by adding a
        <quote>?</quote> character.
      </para>

      <note>
        <para>
          These follow NeoMutt-style syntax, not shell-style!
        </para>
      </note>

<screen>
setenv TERM vt100
setenv ORGANIZATION "The NeoMutt Development Team"
unsetenv DISPLAY
setenv LESS?
</screen>

      <para>
        Running <command>setenv</command> with no parameters will show a list of
        all the environment variables.
      </para>
    </sect1>

    <sect1 id="query">
      <title>External Address Queries</title>
      <para>
        NeoMutt supports connecting to external directory databases such as
        LDAP, ph/qi, bbdb, or NIS through a wrapper script which connects to
        NeoMutt using a simple interface. Using the
        <link linkend="query-command">$query_command</link> variable, you
        specify the wrapper command to use. For example:
      </para>
      <screen>set query_command = "mutt_ldap_query.pl %s"</screen>
      <para>
        The wrapper script should accept the query on the command-line. It
        should return a one line message, then each matching response on
        a single line, each line containing a tab separated address then name
        then some other optional information. On error, or if there are no
        matching addresses, return a non-zero exit code and a one line error
        message.
      </para>
      <para>
        An example multiple response output:
      </para>

<screen>
Searching database ... 70 entries ... 5 matching:
ji@papaya.com   Jeremy Irons    Emmy, Oscar, Tony
jc@damson.com   James Cagney    Oscar
mr@ilama.com    Meg Ryan
mjf@kumquat.com Michael J Fox
ma@yew.com      Murray Abraham  Oscar
</screen>

      <para>
        There are two mechanisms for accessing the query function of NeoMutt.
        One is to do a query from the index menu using the
        <literal>&lt;query&gt;</literal> function (default: Q). This will
        prompt for a query, then bring up the query menu which will list the
        matching responses. From the query menu, you can select addresses to
        create aliases, or to mail. You can tag multiple addresses to mail,
        start a new query, or have a new query appended to the current
        responses.
      </para>
      <para>
        The other mechanism for accessing the query function is for address
        completion, similar to the alias completion. In any prompt for address
        entry, you can use the <literal>&lt;complete-query&gt;</literal>
        function (default: ^T) to run a query based on the current address you
        have typed. Like aliases, NeoMutt will look for what you have typed
        back to the last space or comma. If there is a single response for that
        query, NeoMutt will expand the address in place. If there are multiple
        responses, NeoMutt will activate the query menu. At the query menu, you
        can select one or more addresses to be added to the prompt.
      </para>
      <note>
        <para>
          The query menu is affected by <link linkend="sort-alias">$sort_alias</link>,
          thus overruling the order of entries as generated by
          <link linkend="query-command">$query_command</link>.
        </para>
      </note>
    </sect1>

    <sect1 id="mailbox-formats">
      <title>Mailbox Formats</title>
      <para>
        NeoMutt supports reading and writing of four different local mailbox
        formats: mbox, MMDF, MH and Maildir. The mailbox type is auto detected,
        so there is no need to use a flag for different mailbox types. When
        creating new mailboxes, NeoMutt uses the default specified with the
        <link linkend="mbox-type">$mbox_type</link> variable. A short
        description of the formats follows.
      </para>
      <para>
        <emphasis>mbox</emphasis>. This is a widely used mailbox format for
        UNIX. All messages are stored in a single file. Each message has
        a line of the form:
      </para>
      <screen>From me@ox.ac.uk Fri, 11 Apr 1997 11:44:56 PST</screen>
      <para>
        to denote the start of a new message (this is often referred to as the
        <quote>From_</quote> line). The mbox format requires mailbox locking,
        is prone to mailbox corruption with concurrently writing clients or
        misinterpreted From_ lines. Depending on the environment, new mail
        detection can be unreliable. Mbox folders are fast to open and easy to
        archive.
      </para>
      <para>
        <emphasis>MMDF</emphasis>. This is a variant of the
        <emphasis>mbox</emphasis> format. Each message is surrounded by lines
        containing <quote>^A^A^A^A</quote> (four times control-A's). The same
        problems as for mbox apply (also with finding the right message
        separator as four control-A's may appear in message bodies).
      </para>
      <para>
        <emphasis>MH</emphasis>. A radical departure from
        <emphasis>mbox</emphasis> and <emphasis>MMDF</emphasis>, a mailbox
        consists of a directory and each message is stored in a separate file.
        The filename indicates the message number (however, this is may not
        correspond to the message number NeoMutt displays). Deleted messages
        are renamed with a comma (<quote>,</quote>) prepended to the filename.
        NeoMutt detects this type of mailbox by looking for either
        <literal>.mh_sequences</literal> or <literal>.xmhcache</literal> files
        (needed to distinguish normal directories from MH mailboxes). MH is
        more robust with concurrent clients writing the mailbox, but still may
        suffer from lost flags; message corruption is less likely to occur than
        with mbox/mmdf. It's usually slower to open compared to mbox/mmdf since
        many small files have to be read (NeoMutt provides
        <xref linkend="header-caching" /> to greatly speed this process up).
        Depending on the environment, MH is not very disk-space efficient.
      </para>
      <para>
        <emphasis>Maildir</emphasis>. The newest of the mailbox formats, used
        by the Qmail MTA (a replacement for sendmail). Similar to
        <emphasis>MH</emphasis>, except that it adds three subdirectories of
        the mailbox: <emphasis>tmp</emphasis>, <emphasis>new</emphasis> and
        <emphasis>cur</emphasis>. Filenames for the messages are chosen in such
        a way they are unique, even when two programs are writing the mailbox
        over NFS, which means that no file locking is needed and corruption is
        very unlikely. Maildir maybe slower to open without caching in NeoMutt,
        it too is not very disk-space efficient depending on the environment.
        Since no additional files are used for metadata (which is embedded in
        the message filenames) and Maildir is locking-free, it's easy to sync
        across different machines using file-level synchronization tools.
      </para>
    </sect1>

    <sect1 id="shortcuts">
      <title>Mailbox Shortcuts</title>
      <para>
        There are a number of built in shortcuts which refer to specific
        mailboxes. These shortcuts can be used anywhere you are prompted for
        a file or mailbox path or in path-related configuration variables. Note
        that these only work at the beginning of a string.
      </para>

      <table id="tab-mailbox-shortcuts">
        <title>Mailbox shortcuts</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Shortcut</entry>
              <entry>Refers to...</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>!</literal></entry>
              <entry>
                your <link linkend="spool-file">$spool_file</link> (incoming)
                mailbox
              </entry>
            </row>
            <row>
              <entry><literal>&gt;</literal></entry>
              <entry>
                your <link linkend="mbox">$mbox</link> file
              </entry>
            </row>
            <row>
              <entry><literal>&lt;</literal></entry>
              <entry>
                your <link linkend="record">$record</link> file
              </entry>
            </row>
            <row>
              <entry><literal>^</literal></entry>
              <entry>
                the current mailbox
              </entry>
            </row>
            <row>
              <entry><literal>-</literal> or <literal>!!</literal></entry>
              <entry>
                the file you've last visited
              </entry>
            </row>
            <row>
              <entry><literal>~</literal></entry>
              <entry>
                your home directory
              </entry>
            </row>
            <row>
              <entry><literal>=</literal> or <literal>+</literal></entry>
              <entry>
                your <link linkend="folder">$folder</link> directory
              </entry>
            </row>
            <row>
              <entry><emphasis>@alias</emphasis></entry>
              <entry>
                to the
                <link linkend="default-save-mailbox">default save folder</link>
                as determined by the address of the alias
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        For example, to store a copy of outgoing messages in the folder they
        were composed in, a
        <link linkend="folder-hook"><command>folder-hook</command></link> can
        be used to set <link linkend="record">$record</link>:
      </para>
      <screen>folder-hook . 'set record=^'</screen>
      <para>
        Note: the current mailbox shortcut,
        <quote><literal>^</literal></quote>, has no value in some cases.  No
        mailbox is opened when NeoMutt is invoked to send an email from the
        command-line.  In interactive mode, NeoMutt reads the muttrc before
        opening the mailbox, so immediate expansion won't work as expected
        either.  This can be an issue when trying to directly assign to <link
        linkend="record">$record</link>, but also affects the <link
        linkend="fcc-hook">fcc-hook</link> mailbox, which is expanded
        immediately too.  The folder-hook example above works because the
        command is executed later, when the folder-hook fires.
      </para>
    </sect1>

    <sect1 id="using-lists">
      <title>Handling Mailing Lists</title>
      <para>
        NeoMutt has a few configuration options that make dealing with large
        amounts of mail easier. The first thing you must do is to let NeoMutt
        know what addresses you consider to be mailing lists (technically this
        does not have to be a mailing list, but that is what it is most often
        used for), and what lists you are subscribed to. This is accomplished
        through the use of the
        <link linkend="lists"><command>lists</command></link> and
        <link linkend="lists"><command>subscribe</command></link> commands in
        your <literal>.neomuttrc</literal>. Alternatively or additionally, you
        can set <link linkend="auto-subscribe">$auto_subscribe</link> to
        automatically subscribe addresses found in a <literal>List-Post</literal>
        header.
      </para>
      <para>
        Now that NeoMutt knows what your mailing lists are, it can do several
        things, the first of which is the ability to show the name of a list
        through which you received a message (i.e., of a subscribed list) in
        the <emphasis>index</emphasis> menu display. This is useful to
        distinguish between personal and list mail in the same mailbox. In the
        <link linkend="index-format">$index_format</link> variable, the expando
        <quote>%L</quote> will print the string <quote>To &lt;list&gt;</quote>
        when <quote>list</quote> appears in the <quote>To</quote> field, and
        <quote>Cc &lt;list&gt;</quote> when it appears in the <quote>Cc</quote>
        field (otherwise it prints the name of the author).
      </para>
      <para>
        Often times the <quote>To</quote> and <quote>Cc</quote> fields in
        mailing list messages tend to get quite large. Most people do not
        bother to remove the author of the message they reply to from the list,
        resulting in two or more copies being sent to that person. The
        <literal>&lt;list-reply&gt;</literal> function, which by default is
        bound to <quote>L</quote> in the <emphasis>index</emphasis> menu and
        <emphasis>pager</emphasis>, helps reduce the clutter by only replying
        to the known mailing list addresses instead of all recipients (except
        as specified by <literal>Mail-Followup-To</literal>, see below).
      </para>
      <para>
        NeoMutt also supports the <literal>Mail-Followup-To</literal> header.
        When you send a message to a list of recipients which includes one or
        several known mailing lists, and if the
        <link linkend="followup-to">$followup_to</link> option is set, NeoMutt
        will generate a Mail-Followup-To header.  If any of the recipients are
        subscribed mailing lists, this header will contain all the recipients
        to whom you send this message, but not your address. This indicates
        that group-replies or list-replies (also known as
        <quote>followups</quote>) to this message should only be sent to the
        original recipients of the message, and not separately to you - you'll
        receive your copy through one of the mailing lists you are subscribed
        to.  If none of the recipients are subscribed mailing lists, the header
        will also contain your address, ensuring you receive a copy of replies.
      </para>
      <para>
        Conversely, when group-replying or list-replying to a message which has
        a <literal>Mail-Followup-To</literal> header, NeoMutt will respect this
        header if the
        <link linkend="honor-followup-to">$honor_followup_to</link>
        configuration variable is set. Using
        <link linkend="list-reply">list-reply</link> will in this case also
        make sure that the reply goes to the mailing list, even if it's not
        specified in the list of recipients in the
        <literal>Mail-Followup-To</literal>.
      </para>
      <note>
        <para>
          When header editing is enabled, you can create
          a <literal>Mail-Followup-To</literal> header manually. NeoMutt will
          only auto-generate this header if it doesn't exist when you send the
          message.
        </para>
      </note>
      <para>
        The other method some mailing list admins use is to generate
        a <quote>Reply-To</quote> field which points back to the mailing list
        address rather than the author of the message. This can create problems
        when trying to reply directly to the author in private, since most mail
        clients will automatically reply to the address given in the
        <quote>Reply-To</quote> field. NeoMutt uses the
        <link linkend="reply-to">$reply_to</link> variable to help decide which
        address to use. If set to <emphasis>ask-yes</emphasis> or
        <emphasis>ask-no</emphasis>, you will be prompted as to whether or not
        you would like to use the address given in the <quote>Reply-To</quote>
        field, or reply directly to the address given in the
        <quote>From</quote> field. When set to <emphasis>yes</emphasis>, the
        <quote>Reply-To</quote> field will be used when present.
      </para>
      <para>
        You can change or delete the <quote>X-Label:</quote> field within
        NeoMutt using the <quote>edit-label</quote> command, bound to the
        <quote>y</quote> key by default. This works for tagged messages, too.
        While in the edit-label function, pressing the &lt;complete&gt; binding
        (TAB, by default) will perform completion against all labels currently
        in use.
      </para>
      <para>
        Lastly, NeoMutt has the ability to <link linkend="sort">sort</link> the
        mailbox into <link linkend="threads">threads</link>. A thread is
        a group of messages which all relate to the same subject. This is
        usually organized into a tree-like structure where a message and all of
        its replies are represented graphically. If you've ever used a threaded
        news client, this is the same concept. It makes dealing with large
        volume mailing lists easier because you can easily delete uninteresting
        threads and quickly find topics of value.
      </para>
    </sect1>

    <sect1 id="display-munging">
      <title>Display Munging</title>
      <para>
        Working within the confines of a console or terminal window, it is
        often useful to be able to modify certain information elements in
        a non-destructive way – to change how they display, without changing
        the stored value of the information itself. This is especially so of
        message subjects, which may often be polluted with extraneous metadata
        that either is reproduced elsewhere, or is of secondary interest.
      </para>
      <cmdsynopsis>
        <command>subjectrx</command>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">replacement</replaceable>
        </arg>
        <command>unsubjectrx</command>
        <group choice="req">
          <arg choice="plain">
            <replaceable class="parameter">*</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        <literal>subjectrx</literal> specifies a regular expression
        which, if detected in a message subject, causes
        the subject to be replaced with the <quote>replacement</quote> value.
        The replacement is subject to substitutions in the same way as for the
        <link linkend="spam">spam</link> command: <literal>%L</literal> for the
        text to the left of the match, <literal>%R</literal> for text to the
        right of the match, and <literal>%1</literal> for the first subgroup in
        the match (etc). If you simply want to erase the match, set it to
        <quote>%L%R</quote>. Any number of <literal>subjectrx</literal>
        commands may coexist.
      </para>
      <para>
        Note this well: the <quote>replacement</quote> value replaces the
        entire subject, not just the match!
      </para>
      <para>
        <literal>unsubjectrx</literal> removes a given subjectrx from the
        substitution list. If <literal>*</literal> is used as the argument, all
        substitutions will be removed.
      </para>
      <example id="ex-subjectrx">
        <title>Subject Munging</title>

<screen>
<emphasis role="comment"># Erase [rt #12345] tags from Request Tracker (RT) e-mails</emphasis>
subjectrx '\[rt #[0-9]+\] *' '%L%R'
<emphasis role="comment"># Servicedesk is another RT that sends more complex subjects.</emphasis>
<emphasis role="comment"># Keep the ticket number.</emphasis>
subjectrx '\[servicedesk #([0-9]+)\] ([^.]+)\.([^.]+) - (new|open|pending|update) - ' '%L[#%1] %R'
<emphasis role="comment"># Strip out annoying [listname] prefixes in subjects</emphasis>
subjectrx '\[[^]]*\]:? *' '%L%R'
</screen>

      </example>
    </sect1>

    <sect1 id="new-mail">
      <title>New Mail Detection</title>
      <para>
        NeoMutt supports setups with multiple folders, allowing all of them to
        be monitored for new mail (see <xref linkend="mailboxes" /> for
        details).
      </para>

      <sect2 id="new-mail-formats">
        <title>How New Mail Detection Works</title>
        <para>
          For Mbox and Mmdf folders, new mail is detected by comparing access
          and/or modification times of files: NeoMutt assumes a folder has new
          mail if it wasn't accessed after it was last modified. Utilities like
          <literal>biff</literal> or <literal>frm</literal> or any other
          program which accesses the mailbox might cause NeoMutt to never
          detect new mail for that mailbox if they do not properly reset the
          access time. Other possible causes of NeoMutt not detecting new mail
          in these folders are backup tools (updating access times) or
          filesystems mounted without access time update support (for Linux
          systems, see the <literal>relatime</literal> option).
        </para>
        <note>
          <para>
            Contrary to older NeoMutt releases, it now maintains the new mail
            status of a folder by properly resetting the access time if the
            folder contains at least one message which is neither read, nor
            deleted, nor marked as old.
          </para>
        </note>
        <para>
          In cases where new mail detection for Mbox or Mmdf folders appears to
          be unreliable, the
          <link linkend="check-mbox-size">$check_mbox_size</link> option can be
          used to make NeoMutt track and consult file sizes for new mail
          detection instead which won't work for size-neutral changes.
        </para>
        <para>
          New mail for Maildir is assumed if there is one message in the
          <literal>new/</literal> subdirectory which is not marked deleted (see
          <link linkend="maildir-trash">$maildir_trash</link>). For MH folders,
          a mailbox is considered having new mail if there's at least one
          message in the <quote>unseen</quote> sequence as specified by
          <link linkend="mh-seq-unseen">$mh_seq_unseen</link>. Optionally,
          <link linkend="new-mail-command">$new_mail_command</link> can be
          configured to execute an external program every time new mail is
          detected in the current inbox.
        </para>
        <para>
          NeoMutt does not poll POP3 folders for new mail, it only periodically
          checks the currently opened folder (if it's a POP3 folder).
        </para>
        <para>
          For IMAP, by default NeoMutt uses recent message counts provided by
          the server to detect new mail. If the
          <link linkend="imap-idle">$imap_idle</link> option is set, it'll use
          the IMAP IDLE extension if advertised by the server.
        </para>
        <para>
          The <link linkend="mail-check-recent">$mail_check_recent</link>
          option changes whether NeoMutt will notify you of new mail in an
          already visited mailbox. When set (the default) it will only notify
          you of new mail received since the last time you opened the mailbox.
          When unset, NeoMutt will notify you of any new mail in the mailbox.
        </para>
      </sect2>

      <sect2 id="new-mail-polling">
        <title>Polling For New Mail</title>
        <para>
          When in the index menu and being idle (also see
          <link linkend="timeout">$timeout</link>), NeoMutt periodically checks
          for new mail in all folders which have been configured via the
          <command>mailboxes</command> command (excepting those specified with
          the <literal>-nopoll</literal> flag). The interval depends on the
          folder type: for local/IMAP folders it consults
          <link linkend="mail-check">$mail_check</link> and
          <link linkend="pop-check-interval">$pop_check_interval</link> for POP
          folders.
        </para>
        <para>
          Outside the index menu the directory browser supports checking for
          new mail using the <literal>&lt;check-new&gt;</literal> function
          which is unbound by default. Pressing TAB will bring up a menu
          showing the files specified by the <command>mailboxes</command>
          command, and indicate which contain new messages. NeoMutt will
          automatically enter this mode when invoked from the command line with
          the <literal>-y</literal> option, or from the index/pager via the
          <literal>&lt;browse-mailboxes&gt;</literal> function.
        </para>
        <para>
          For the pager, index and directory browser menus, NeoMutt contains
          the <literal>&lt;mailbox-list&gt;</literal> function (bound to
          <quote>.</quote> by default) which will print a list of folders with
          new mail in the command line at the bottom of the screen.
        </para>
        <para>
          For the index, by default NeoMutt displays the number of mailboxes
          with new mail in the status bar, please refer to the
          <link linkend="status-format">$status_format</link> variable for
          details.
        </para>
        <para>
          When changing folders, NeoMutt fills the prompt with the first folder
          from the mailboxes list containing new mail (if any), pressing
          <literal>&lt;Space&gt;</literal> will cycle through folders with new
          mail. The (by default unbound) function
          <literal>&lt;next-unread-mailbox&gt;</literal> in the index can be
          used to immediately open the next folder with unread mail (if any).
        </para>
      </sect2>

      <sect2 id="new-mail-monitoring">
        <title>Monitoring New Mail</title>
        <para>
          When the <emphasis>Inotify</emphasis> mechanism for monitoring of
          files is supported (Linux only) and not disabled at compilation time,
          NeoMutt immediately notifies about new mail for all folders configured
          via the <link linkend="mailboxes"><command>mailboxes</command></link>
          command (excepting those specified with the <literal>-nopoll</literal> flag).
          Dependent on <link linkend="mailbox-formats">mailbox format</link>
          also added <emphasis>old</emphasis> mails are tracked (not for Maildir).
        </para>
        <para>
          No configuration variables are available. Trace output is given when
          debugging is enabled via <link linkend="tab-commandline-options">command line option</link>
          <literal>-d3</literal>. The lower level 2 only shows errors, the
          higher level 5 all including raw Inotify events.
        </para>
        <note>
          <para>
            Getting events about new mail is limited to the capabilities of the
            underlying mechanism.  <emphasis>inotify</emphasis> only reports
            local changes, i. e. new mail notification works for mails
            delivered by an agent on the same machine as NeoMutt, but not when
            delivered remotely on a network file system as nfs. also the
            monitoring handles might fail in rare conditions, so you better
            don't completely rely on this feature.
          </para>
        </note>
        <note>
          <para>
            When using Maildir, you don't have to manually specify all your mailboxes. You can use this command instead:
          </para>
<screen>
mailboxes `find ~/.mail/ -type d -name cur | sed -e 's:/cur/*$::' -e 's/ /\\ /g' | sort | tr '\n' ' '`
</screen>
        </note>
      </sect2>

      <sect2 id="calc-mailbox-counts">
        <title>Calculating Mailbox Message Counts</title>
        <para>
          If <link linkend="mail-check-stats">$mail_check_stats</link> is set,
          NeoMutt will periodically calculate the unread, flagged, and total
          message counts for each mailbox watched by the
          <command>mailboxes</command> command.  (Note: IMAP mailboxes only support
          unread and total counts).  This calculation takes place at the same
          time as new mail polling, but is controlled by a separate timer:
          <link linkend="mail-check-stats-interval">$mail_check_stats_interval</link>.
        </para>
        <para>
          The sidebar can display these message counts. See
          <link linkend="sidebar-format">$sidebar_format</link>.
        </para>
      </sect2>
    </sect1>

    <sect1 id="editing-threads">
      <title>Editing Threads</title>
      <para>
        NeoMutt has the ability to dynamically restructure threads that are
        broken either by misconfigured software or bad behavior from some
        correspondents. This allows to clean your mailboxes from these
        annoyances which make it hard to follow a discussion.
      </para>

      <sect2 id="link-threads">
        <title>Linking Threads</title>
        <para>
          Some mailers tend to <quote>forget</quote> to correctly set the
          <quote>In-Reply-To:</quote> and <quote>References:</quote> headers
          when replying to a message. This results in broken discussions
          because NeoMutt has not enough information to guess the correct
          threading. You can fix this by tagging a number of replies, then
          moving to the parent message and using the <literal>
          &lt;link-threads&gt; </literal> function (bound to &amp; by default).
          The replies will then be connected to this parent message.
        </para>
      </sect2>

      <sect2 id="break-threads">
        <title>Breaking Threads</title>
        <para>
          On mailing lists, some people are in the bad habit of starting a new
          discussion by hitting <quote>reply</quote> to any message from the
          list and changing the subject to a totally unrelated one. You can fix
          such threads by using the <literal>&lt;break-thread&gt;</literal>
          function (bound by default to #), which will turn the subthread
          starting from the current message into a whole different thread.
        </para>
      </sect2>
    </sect1>

    <sect1 id="dsn">
      <title>Delivery Status Notification (DSN) Support</title>
      <para>
        RFC1894 defines a set of MIME content types for relaying information
        about the status of electronic mail messages. These can be thought of
        as <quote>return receipts.</quote>
      </para>
      <para>
        To support DSN, there are two variables.
        <link linkend="dsn-notify">$dsn_notify</link> is used to request
        receipts for different results (such as failed message, message
        delivered, etc.). <link linkend="dsn-return">$dsn_return</link>
        requests how much of your message should be returned with the receipt
        (headers or full message).
      </para>
      <para>
        When using <link linkend="sendmail">$sendmail</link> for mail delivery,
        you need to use either Berkeley sendmail 8.8.x (or greater) a MTA
        supporting DSN command line options compatible to Sendmail: The -N and
        -R options can be used by the mail client to make requests as to what
        type of status messages should be returned. Please consider your MTA
        documentation whether DSN is supported.
      </para>
      <para>
        For SMTP delivery using <link linkend="smtp-url">$smtp_url</link>, it
        depends on the capabilities announced by the server whether NeoMutt
        will attempt to request DSN or not.
      </para>
    </sect1>

    <sect1 id="urlview">
      <title>Start a WWW Browser on URLs</title>
      <para>
        If a message contains URLs, it is efficient to get a menu with all the
        URLs and start a WWW browser on one of them. This functionality is
        provided by the external urlview program which can be retrieved at
        <ulink url="ftp://ftp.mutt.org/mutt/contrib/">ftp://ftp.mutt.org/mutt/contrib/</ulink>
        and the configuration commands:
      </para>

<screen>
macro index \cb |urlview\n
macro pager \cb |urlview\n
</screen>

    </sect1>

    <sect1 id="echo">
      <title>Echoing Text</title>
      <para>Usage:</para>
      <cmdsynopsis>
        <command>echo</command>
        <arg choice="plain">
          <replaceable class="parameter">message</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        You can print messages to the message window using the "echo" command.
        This might be useful after a macro finishes executing. After printing
        the message, echo will pause for the number of seconds specified by
        <link linkend="sleep-time">$sleep_time</link>.
      </para>

<screen>
echo "Sourcing muttrc file"
unset confirm_append
macro index ,a "&lt;save-message&gt;=archive&lt;enter&gt;&lt;enter-command&gt;echo 'Saved to archive'&lt;enter&gt;"
</screen>

    </sect1>

    <sect1 id="compose-flow">
      <title>Message Composition Flow</title>
        <para>
          This is a brief overview of the steps NeoMutt takes during message
          composition. It also shows the order and timing of hook execution.
        </para>
      <itemizedlist>
        <listitem>
          <para>Reply envelope settings.
            <link linkend="reverse-name">$reverse_name</link> processing. To, Cc,
            Subject, References header defaults.
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="my-hdr">my_hdr</link> processing for To, Cc, Bcc,
            Subject headers.
          </para>
        </listitem>
        <listitem>
          <para>Prompts for To, Cc, Bcc, Subject headers. See
          <link linkend="ask-cc">$ask_cc</link>,
          <link linkend="ask-bcc">$ask_bcc</link>,
          <link linkend="fast-reply">$fast_reply</link>.</para>
        </listitem>
        <listitem>
          <para>
            From header setting. Note: this is so
            <link linkend="send-hook">send-hook</link>s below can match ~P, but
            From is re-set further below in case a send-hook changes the value.
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="reply-hook">reply-hook</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="send-hook">send-hook</link>
          </para>
        </listitem>
        <listitem>
          <para>From header setting.</para>
        </listitem>
        <listitem>
          <para>
            <link linkend="my-hdr">my_hdr</link> processing for From, Reply-To,
            Message-ID and user-defined headers. The To, Cc, Bcc, Subject, and
            Return-Path headers are ignored at this stage.
          </para>
        </listitem>
        <listitem>
          <para>Message body and signature generation.</para>
        </listitem>
        <listitem>
          <para>
            <link linkend="send2-hook">send2-hook</link>
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="real-name">$real_name</link> part of From header setting.
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="editor">$editor</link> invocation for the message.
          </para>
        </listitem>
        <listitem>
          <para>
            <link linkend="send2-hook">send2-hook</link>
          </para>
        </listitem>
        <listitem>
          <para>Cryptographic settings.</para>
        </listitem>
        <listitem>
          <para>
          <link linkend="fcc-hook">fcc-hook</link>. Fcc setting.</para>
        </listitem>
        <listitem>
          <para>
            <link linkend="compose-menu">Compose menu</link>. Note:
            <link linkend="send2-hook">send2-hook</link>
            is evaluated each time the headers are changed.
          </para>
        </listitem>
        <listitem>
          <para>Message encryption and signing. Key selection.</para>
        </listitem>
        <listitem>
          <para>
            Fcc saving if <link
            linkend="fcc-before-send">$fcc_before_send</link> is set.  (Note the
            variable documentation for caveats of Fcc'ing before sending.)
          </para>
        </listitem>
        <listitem>
          <para>Message sending.</para>
        </listitem>
        <listitem>
          <para>
            Fcc saving if <link linkend="fcc-before-send">$fcc_before_send</link>
            is unset (the default).  The Fcc used to be saved before sending the
            message.  It is now by default saved afterwards, but if the saving
            fails, the user is prompted.
          </para>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="misc-topics">
      <title>Miscellany</title>
      <para>
        This section documents various features that fit nowhere else.
      </para>
      <variablelist>
        <varlistentry>
          <term>Address normalization</term>
          <listitem>
            <para>
              NeoMutt normalizes all e-mail addresses to the simplest form
              possible. If an address contains a real_name, the form
              <emphasis>Joe User &lt;joe@example.com&gt;</emphasis> is used and
              the pure e-mail address without angle brackets otherwise, i.e.
              just <emphasis>joe@example.com</emphasis>.
            </para>
            <para>
              This normalization affects all headers NeoMutt generates
              including aliases.
            </para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Initial folder selection</term>
          <listitem>
            <para>
              The folder NeoMutt opens at startup is determined as follows: the
              folder specified in the <literal>$MAIL</literal> environment
              variable if present. Otherwise, the value of
              <literal>$MAILDIR</literal> is taken into account. If that isn't
              present either, NeoMutt takes the user's mailbox in the mailspool
              as determined at compile-time (which may also reside in the home
              directory). The <link linkend="spool-file">$spool_file</link>
              setting overrides this selection. Highest priority has the
              mailbox given with the <literal>-f</literal> command line option.
            </para>
          </listitem>
        </varlistentry>
      </variablelist>
    </sect1>
  </chapter>

  <chapter id="mimesupport">
    <title>NeoMutt's MIME Support</title>
    <para>
      Quite a bit of effort has been made to make NeoMutt the premier text-mode
      MIME MUA. Every effort has been made to provide the functionality that
      the discerning MIME user requires, and the conformance to the standards
      wherever possible. When configuring NeoMutt for MIME, there are two extra
      types of configuration files which NeoMutt uses. One is the
      <literal>mime.types</literal> file, which contains the mapping of file
      extensions to IANA MIME types. The other is the
      <literal>mailcap</literal> file, which specifies the external commands to
      use for handling specific MIME types.
    </para>

    <sect1 id="using-mime">
      <title>Using MIME in NeoMutt</title>

      <sect2 id="mime-overview">
        <title>MIME Overview</title>
        <para>
          MIME is short for <quote>Multipurpose Internet Mail Extension</quote>
          and describes mechanisms to internationalize and structure mail
          messages. Before the introduction of MIME, messages had a single text
          part and were limited to us-ascii header and content. With MIME,
          messages can have attachments (and even attachments which itself have
          attachments and thus form a tree structure), nearly arbitrary
          characters can be used for sender names, recipients and subjects.
        </para>
        <para>
          Besides the handling of non-ascii characters in message headers, to
          NeoMutt the most important aspect of MIME are so-called MIME types.
          These are constructed using a <emphasis>major</emphasis> and
          <emphasis>minor</emphasis> type separated by a forward slash. These
          specify details about the content that follows. Based upon these,
          NeoMutt decides how to handle this part. The most popular major type
          is <quote><literal>text</literal></quote> with minor types for
          plain text, HTML and various other formats. Major types also exist
          for images, audio, video and of course general application data (e.g.
          to separate cryptographically signed data with a signature, send
          office documents, and in general arbitrary binary data). There's also
          the <literal>multipart</literal> major type which represents the root
          of a subtree of MIME parts. A list of supported MIME types can be
          found in <xref linkend="supported-mime-types" />.
        </para>
        <para>
          MIME also defines a set of encoding schemes for transporting MIME
          content over the network: <literal>7bit</literal>,
          <literal>8bit</literal>, <literal>quoted-printable</literal>,
          <literal>base64</literal> and <literal>binary</literal>. There're
          some rules when to choose what for encoding headers and/or body (if
          needed), and NeoMutt will in general make a good choice.
        </para>
        <para>
          NeoMutt does most of MIME encoding/decoding behind the scenes to form
          messages conforming to MIME on the sending side. On reception, it can
          be flexibly configured as to how what MIME structure is displayed
          (and if it's displayed): these decisions are based on the content's
          MIME type. There are three areas/menus in dealing with MIME: the
          pager (while viewing a message), the attachment menu and the compose
          menu.
        </para>
      </sect2>

      <sect2 id="mime-pager">
        <title>Viewing MIME Messages in the Pager</title>
        <para>
          When you select a message from the index and view it in the pager,
          NeoMutt decodes as much of a message as possible to a text
          representation. NeoMutt internally supports a number of MIME types,
          including the <literal>text/plain</literal> type, the
          <literal>message/rfc822</literal> (mail messages) type and some
          <literal>multipart</literal> types. In addition, it recognizes
          a variety of PGP MIME and S/MIME types, including PGP/MIME and
          <literal>application/pgp</literal>, and
          <literal>application/pkcs7-mime</literal>.
        </para>
        <para>
          NeoMutt will denote attachments with a couple lines describing them.
          These lines are of the form:
        </para>

<screen>
[-- Attachment #1: Description --]
[-- Type: text/plain, Encoding: 7bit, Size: 10000 --]
</screen>

        <para>
          Where the <emphasis>Description</emphasis> is the description or
          filename given for the attachment, and the
          <emphasis>Encoding</emphasis> is one of the already mentioned content
          encodings.
        </para>
        <para>
          If NeoMutt cannot deal with a MIME type, it will display a message
          like:
        </para>

<screen>
[-- image/gif is unsupported (use 'v' to view this part) --]
</screen>

      </sect2>

      <sect2 id="attach-menu">
        <title>The Attachment Menu</title>
        <para>
          The default binding for <literal>&lt;view-attachments&gt;</literal>
          is <quote>v</quote>, which displays the attachment menu for
          a message. The attachment menu displays a list of the attachments in
          a message. From the attachment menu, you can save, print, pipe,
          delete, and view attachments. You can apply these operations to
          a group of attachments at once, by tagging the attachments and by
          using the <literal>&lt;tag-prefix&gt;</literal> operator. You can
          also reply to the current message from this menu, and only the
          current attachment (or the attachments tagged) will be quoted in your
          reply. You can view attachments as text, or view them using the
          mailcap viewer definition (the mailcap mechanism is explained later
          in detail).
        </para>
        <para>
          Finally, you can apply the usual message-related functions (like
          <link linkend="resend-message"><literal>&lt;resend-message&gt;</literal></link>,
          and the
          <literal>&lt;reply&gt;</literal> and
          <literal>&lt;forward&gt;</literal> functions) to attachments of type
          <literal>message/rfc822</literal>.
        </para>
        <para>
          See table <xref linkend="tab-attachment-bindings" /> for all
          available functions.
        </para>

        <sect3 id="attach-viewers">
          <title>Viewing Attachments</title>

          <para>
          There are four(!) ways of viewing attachments, so the functions
          deserve some extra explanation.
          </para>

          <variablelist>
            <varlistentry>
              <term>
                <literal>&lt;view-mailcap&gt;</literal>
                (default keybinding: m)
              </term>
              <listitem>
                <para>
                  This will use the first matching mailcap entry.
                </para>
                <para>
                  If no matching mailcap entries are found, it will abort with an
                  error message.
                </para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>
                <literal>&lt;view-attach&gt;</literal>
                (default keybinding: &lt;Enter&gt;)
              </term>
              <listitem>
                <para>
                  NeoMutt will display internally supported MIME types (see <xref
                  linkend="mime-pager"/>) in the pager.  This will respect
                  <link linkend="auto-view">auto_view</link> settings, to determine
                  whether to use a <literal>copiousoutput</literal> mailcap entry or
                  just directly display the attachment.
                </para>
                <para>
                  Other MIME types will use the first matching mailcap entry.
                </para>
                <para>
                  If no matching mailcap entries are found, the attachment will
                  be displayed in the pager as raw text.
                </para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>
                <literal>&lt;view-pager&gt;</literal>
              </term>
              <listitem>
                <para>
                  NeoMutt will use the first matching
                  <literal>copiousoutput</literal> mailcap entry to display the
                  attachment in the pager (regardless of <link
                  linkend="auto-view">auto_view</link> settings).
                </para>
                <para>
                  If no matching mailcap entries are found, the attachment will
                  be displayed in the pager as raw text.
                </para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>
                <literal>&lt;view-text&gt;</literal>
                (default keybinding: T)
              </term>
              <listitem>
                <para>
                  The attachment will always be displayed in the pager as raw
                  text.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect3>

        <sect3 id="attach-saving">
          <title>Saving Attachments</title>

          <variablelist>
            <varlistentry>
              <term>
                <literal>&lt;save-entry&gt;</literal>
                (default keybinding: s)
              </term>
              <listitem>
                <para>
                  This will save the attachment to disk.
                </para>
                <para>
                  The permissions of the saved file will depend on the user's
                  <literal>umask</literal>. e.g. <literal>umask 022</literal>
                  will create a file with permissions <literal>rw-r--r--</literal>.
                </para>
                <para>
                  See also: <link linkend="attach-save-dir">$attach_save_dir</link>,
                  <link linkend="attach-save-without-prompting">$attach_save_without_prompting</link>,
                  <link linkend="attach-sep">$attach_sep</link>,
                  <link linkend="attach-split">$attach_split</link>
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect3>

      </sect2>

      <sect2 id="compose-menu">
        <title>The Compose Menu</title>
        <para>
          The compose menu is the menu you see before you send a message. It
          allows you to edit the recipient list, the subject, and other aspects
          of your message. It also contains a list of the attachments of your
          message, including the main body. From this menu, you can print,
          copy, filter, pipe, edit, compose, review, and rename an attachment
          or a list of tagged attachments. You can also modifying the
          attachment information, notably the type, encoding and description.
        </para>
        <para>
          Attachments appear as follows by default:
        </para>

<screen>
- 1 [text/plain, 7bit, 1K]           /tmp/neomutt-euler-8082-0 &lt;no description&gt;
  2 [applica/x-gunzip, base64, 422K] ~/src/neomutt-0.85.tar.gz &lt;no description&gt;
</screen>

        <para>
          The <quote>-</quote> denotes that NeoMutt will delete the file after
          sending (or postponing, or canceling) the message. It can be toggled
          with the <literal>&lt;toggle-unlink&gt;</literal> command (default:
          u). The next field is the MIME content-type, and can be changed with
          the <literal>&lt;edit-type&gt;</literal> command (default: ^T). The
          next field is the encoding for the attachment, which allows a binary
          message to be encoded for transmission on 7bit links. It can be
          changed with the <literal>&lt;edit-encoding&gt;</literal> command
          (default: ^E). The next field is the size of the attachment, rounded
          to kilobytes or megabytes. The next field is the filename, which can
          be changed with the <literal>&lt;rename-file&gt;</literal> command
          (default: R). The final field is the description of the attachment,
          and can be changed with the
          <literal>&lt;edit-description&gt;</literal> command (default: d). See
          <link linkend="attach-format">$attach_format</link> for a full list
          of available expandos to format this display to your needs.
        </para>
      </sect2>
    </sect1>

    <sect1 id="mime-types">
      <title>MIME Type Configuration with <literal>mime.types</literal></title>
      <para>
        To get most out of MIME, it's important that a MIME part's content type
        matches the content as closely as possible so that the recipient's
        client can automatically select the right viewer for the content.
        However, there's no reliable way for NeoMutt to know how to detect every
        possible file type. Instead, it uses a simple plain text mapping file
        that specifies what file extension corresponds to what MIME type. This
        file is called <literal>mime.types</literal>.
      </para>
      <para>
        When you add an attachment to your mail message, NeoMutt searches the
        system <literal>mime.types</literal> file at
        <literal>/etc/mime.types</literal>,
        <literal>$SYSCONFDIR/mime.types</literal> or
        <literal>$PKGDATADIR/mime.types</literal> and then your personal
        <literal>mime.types</literal> file at
        <literal>$HOME/.mime.types</literal>.
      </para>
      <para>
        Where <literal>$HOME</literal> is your home directory. The
        <literal>$PKGDATADIR</literal> and the <literal>$SYSCONFDIR</literal>
        directories depend on where NeoMutt is installed: the former is the
        default for shared data, the latter for system configuration files.
      </para>
      <para>
        Each line starts with the full MIME type, followed by a space and
        space-separated list of file extensions. For example you could use:
      </para>
      <example id="ex-mime-types">
        <title><literal>mime.types</literal></title>

<screen>
application/postscript          ps eps
application/pgp                 pgp
audio/x-aiff                    aif aifc aiff
</screen>

      </example>
      <para>
        A sample <literal>mime.types</literal> file comes with the NeoMutt
        distribution, and should contain most of the MIME types you are likely
        to use.
      </para>
      <para>
        If NeoMutt can not determine the MIME type by the extension of the file
        you attach, it will run the command specified in
        <link linkend="mime-type-query-command">$mime_type_query_command</link>.
        If that command is not specified, NeoMutt will look at the file. If the
        file is free of binary information, NeoMutt will assume that the file
        is plain text, and mark it as <literal>text/plain</literal>. If the
        file contains binary information, then NeoMutt will mark it as
        <literal>application/octet-stream</literal>. You can change the MIME
        type that NeoMutt assigns to an attachment by using the
        <literal>&lt;edit-type&gt;</literal> command from the compose menu
        (default: ^T), see <xref linkend="supported-mime-types" /> for
        supported major types. NeoMutt recognizes all of these if the
        appropriate entry is found in the <literal>mime.types</literal> file.
        Non-recognized mime types should only be used if the recipient of the
        message is likely to be expecting such attachments.
      </para>

      <table id="supported-mime-types">
        <title>Supported MIME types</title>
        <tgroup cols="3">
          <thead>
            <row>
              <entry>MIME major type</entry>
              <entry>Standard</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry><literal>application</literal></entry>
              <entry>yes</entry>
              <entry>General application data</entry>
            </row>
            <row>
              <entry><literal>audio</literal></entry>
              <entry>yes</entry>
              <entry>Audio data</entry>
            </row>
            <row>
              <entry><literal>image</literal></entry>
              <entry>yes</entry>
              <entry>Image data</entry>
            </row>
            <row>
              <entry><literal>message</literal></entry>
              <entry>yes</entry>
              <entry>Mail messages, message status information</entry>
            </row>
            <row>
              <entry><literal>model</literal></entry>
              <entry>yes</entry>
              <entry>VRML and other modeling data</entry>
            </row>
            <row>
              <entry><literal>multipart</literal></entry>
              <entry>yes</entry>
              <entry>Container for other MIME parts</entry>
            </row>
            <row>
              <entry><literal>text</literal></entry>
              <entry>yes</entry>
              <entry>Text data</entry>
            </row>
            <row>
              <entry><literal>video</literal></entry>
              <entry>yes</entry>
              <entry>Video data</entry>
            </row>
            <row>
              <entry><literal>chemical</literal></entry>
              <entry>no</entry>
              <entry>Mostly molecular data</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        MIME types are not arbitrary, they need to be assigned by
        <ulink url="http://www.iana.org/assignments/media-types/">IANA</ulink>.
      </para>
    </sect1>

    <sect1 id="mailcap">
      <title>MIME Viewer Configuration with Mailcap</title>
      <para>
        NeoMutt supports RFC1524 MIME Configuration, in particular the Unix
        specific format specified in Appendix A of RFC1524. This file format
        is commonly referred to as the <quote>mailcap</quote> format. Many MIME
        compliant programs utilize the mailcap format, allowing you to specify
        handling for all MIME types in one place for all programs. Programs
        known to use this format include Firefox, lynx and metamail.
      </para>
      <para>
        In order to handle various MIME types that NeoMutt doesn't have
        built-in support for, it parses a series of external configuration
        files to find an external handler. The default search string for these
        files is a colon delimited list containing the following files:
      </para>
      <orderedlist>
        <listitem>
          <para>
            <literal>$HOME/.mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>$PKGDATADIR/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>$SYSCONFDIR/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>/etc/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>/usr/etc/mailcap</literal>
          </para>
        </listitem>
        <listitem>
          <para>
            <literal>/usr/local/etc/mailcap</literal>
          </para>
        </listitem>
      </orderedlist>
      <para>
        where <literal>$HOME</literal> is your home directory. The
        <literal>$PKGDATADIR</literal> and the <literal>$SYSCONFDIR</literal>
        directories depend on where NeoMutt is installed: the former is the
        default for shared data, the latter for system configuration files.
      </para>
      <para>
        The default search path can be obtained by running the following
        command:
      </para>
      <screen>neomutt -nF /dev/null -Q mailcap_path</screen>
      <para>
        In particular, the metamail distribution will install a mailcap file,
        usually as <literal>/usr/local/etc/mailcap</literal>, which contains
        some baseline entries.
      </para>

      <sect2 id="mailcap-basics">
        <title>The Basics of the Mailcap File</title>
        <para>
          A mailcap file consists of a series of lines which are comments,
          blank, or definitions.
        </para>
        <para>
          A comment line consists of a # character followed by anything you
          want.
        </para>
        <para>
          A blank line is blank.
        </para>
        <para>
          A definition line consists of a content type, a view command, and any
          number of optional fields. Each field of a definition line is divided
          by a semicolon <quote>;</quote> character.
        </para>
        <para>
          The content type is specified in the MIME standard
          <quote>type/subtype</quote> notation. For example,
          <literal>text/plain</literal>, <literal>text/html</literal>,
          <literal>image/gif</literal>, etc. In addition, the mailcap format
          includes two formats for wildcards, one using the special
          <quote>*</quote> subtype, the other is the implicit wild, where you
          only include the major type. For example, <literal>image/*</literal>,
          or <literal>video</literal> will match all image types and video
          types, respectively.
        </para>
        <para>
          The view command is a Unix command for viewing the type specified.
          There are two different types of commands supported. The default is
          to send the body of the MIME message to the command on stdin. You can
          change this behavior by using <literal>%s</literal> as a parameter to
          your view command. This will cause NeoMutt to save the body of the
          MIME message to a temporary file, and then call the view command with
          the <literal>%s</literal> replaced by the name of the temporary file.
          In both cases, NeoMutt will turn over the terminal to the view
          program until the program quits, at which time NeoMutt will remove
          the temporary file if it exists. This means that mailcap does
          <emphasis>not</emphasis> work out of the box with programs which
          detach themselves from the terminal right after starting, like
          <literal>open</literal> on Mac OS X. In order to nevertheless use
          these programs with mailcap, you probably need custom shell scripts.
        </para>
        <para>
          So, in the simplest form, you can send
          a <literal>text/plain</literal> message to the external pager more on
          standard input:
        </para>
        <screen>text/plain; more</screen>
        <para>
          Or, you could send the message as a file:
        </para>
        <screen>text/plain; more %s</screen>
        <para>
          Perhaps you would like to use lynx to interactively view
          a <literal>text/html</literal> message:
        </para>
        <screen>text/html; lynx %s</screen>
        <para>
          In this case, lynx does not support viewing a file from standard
          input, so you must use the <literal>%s</literal> syntax.
        </para>
        <note>
          <para>
            <emphasis>Some older versions of lynx contain a bug where they will
              check the mailcap file for a viewer for
              <literal>text/html</literal>. They will find the line which calls
              lynx, and run it. This causes lynx to continuously spawn itself
              to view the object.</emphasis>
          </para>
        </note>
        <para>
          On the other hand, maybe you don't want to use lynx interactively,
          you just want to have it convert the <literal>text/html</literal> to
          <literal>text/plain</literal>, then you can use:
        </para>
        <screen>text/html; lynx -dump %s | more</screen>
        <para>
          Perhaps you wish to use lynx to view <literal>text/html</literal>
          files, and a pager on all other text formats, then you would use the
          following:
        </para>

<screen>
text/html; lynx %s
text/*; more
</screen>

      </sect2>

      <sect2 id="secure-mailcap">
        <title>Secure Use of Mailcap</title>
        <para>
          The interpretation of shell meta-characters embedded in MIME
          parameters can lead to security problems in general. NeoMutt tries to
          quote parameters in expansion of <literal>%s</literal> syntaxes
          properly, and avoids risky characters by substituting them, see the
          <link linkend="mailcap-sanitize">$mailcap_sanitize</link> variable.
        </para>
        <para>
          Although NeoMutt's procedures to invoke programs with mailcap seem to
          be safe, there are other applications parsing mailcap, maybe taking
          less care of it. Therefore you should pay attention to the following
          rules:
        </para>
        <para>
          <emphasis>Keep the %-expandos away from shell quoting.</emphasis>
          Don't quote them with single or double quotes. NeoMutt does this for
          you, the right way, as should any other program which interprets
          mailcap. Don't put them into backtick expansions. Be highly careful
          with eval statements, and avoid them if possible at all. Trying to
          fix broken behavior with quotes introduces new leaks – there is no
          alternative to correct quoting in the first place.
        </para>
        <para>
          If you have to use the %-expandos' values in context where you need
          quoting or backtick expansions, put that value into a shell variable
          and reference the shell variable where necessary, as in the following
          example (using <literal>$charset</literal> inside the backtick
          expansion is safe, since it is not itself subject to any further
          expansion):
        </para>

<screen>
text/test-mailcap-bug; cat %s; copiousoutput; test=charset=%{charset} \
        &amp;&amp; test "`echo $charset | tr '[A-Z]' '[a-z]'`" != iso-8859-1
</screen>

      </sect2>

      <sect2 id="advanced-mailcap">
        <title>Advanced Mailcap Usage</title>

        <sect3 id="optional-mailcap-fields">
          <title>Optional Fields</title>
          <para>
            In addition to the required content-type and view command fields,
            you can add semi-colon <quote>;</quote> separated fields to set
            flags and other options. NeoMutt recognizes the following optional
            fields:
          </para>
          <variablelist>
            <varlistentry>
              <term>copiousoutput</term>
              <listitem>
                <para>
                  This flag tells NeoMutt that the command passes possibly
                  large amounts of text on standard output. This causes NeoMutt
                  to invoke a pager (either the internal pager or the external
                  pager defined by the pager variable) on the output of the
                  view command. Without this flag, NeoMutt assumes that the
                  command is interactive. One could use this to replace the
                  pipe to <literal>more</literal> in the
                  <literal>lynx -dump</literal> example in the Basic section:
                </para>
                <screen>text/html; lynx -dump %s ; copiousoutput</screen>
                <para>
                  This will cause lynx to format the
                  <literal>text/html</literal> output as
                  <literal>text/plain</literal> and NeoMutt will use your
                  standard pager to display the results.
                </para>
                <para>
                  NeoMutt will set the <literal>COLUMNS</literal> environment
                  variable to the width of the pager. Some programs make use of
                  this environment variable automatically. Others provide
                  a command line argument that can use this to set the output
                  width:
                </para>

<screen>
text/html; lynx -dump -width ${COLUMNS:-80} %s; copiousoutput
</screen>

                <para>
                  Note that when using the built-in pager,
                  <emphasis>only</emphasis> entries with this flag will be
                  considered a handler for a MIME type – all other entries will
                  be ignored.
              </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>needsterminal</term>
              <listitem>
                <para>
                  NeoMutt uses this flag when viewing attachments with
                  <link linkend="auto-view"><command>auto_view</command></link>,
                  in order to decide whether it should honor the setting of the
                  <link linkend="wait-key">$wait_key</link> variable or not.
                  When an attachment is viewed using an interactive program,
                  and the corresponding mailcap entry has
                  a <emphasis>needsterminal</emphasis> flag, NeoMutt will use
                  <link linkend="wait-key">$wait_key</link> and the exit status
                  of the program to decide if it will ask you to press a key
                  after the external program has exited. In all other
                  situations it will not prompt you for a key.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>compose=&lt;command&gt;</term>
              <listitem>
                <para>
                  This flag specifies the command to use to create a new
                  attachment of a specific MIME type. NeoMutt supports this
                  from the compose menu.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>composetyped=&lt;command&gt;</term>
              <listitem>
                <para>
                  This flag specifies the command to use to create a new
                  attachment of a specific MIME type. This command differs from
                  the compose command in that NeoMutt will expect standard MIME
                  headers on the data. This can be used to specify parameters,
                  filename, description, etc. for a new attachment. NeoMutt
                  supports this from the compose menu.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>print=&lt;command&gt;</term>
              <listitem>
                <para>
                  This flag specifies the command to use to print a specific
                  MIME type. NeoMutt supports this from the attachment and
                  compose menus.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>edit=&lt;command&gt;</term>
              <listitem>
                <para>
                  This flag specifies the command to use to edit a specific
                  MIME type. NeoMutt supports this from the compose menu, and
                  also uses it to compose new attachments. NeoMutt will default
                  to the defined <link linkend="editor">$editor</link> for text
                  attachments.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>nametemplate=&lt;template&gt;</term>
              <listitem>
                <para>
                  This field specifies the format for the file denoted by
                  <literal>%s</literal> in the command fields. Certain programs
                  will require a certain file extension, for instance, to
                  correctly view a file. For instance, lynx will only interpret
                  a file as <literal>text/html</literal> if the file ends in
                  <literal>.html</literal>. So, you would specify lynx as
                  a <literal>text/html</literal> viewer with a line in the
                  mailcap file like:
                </para>
                <screen>text/html; lynx %s; nametemplate=%s.html</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>test=&lt;command&gt;</term>
              <listitem>
                <para>
                  This field specifies a command to run to test whether this
                  mailcap entry should be used. The command is defined with the
                  command expansion rules defined in the next section. If the
                  command returns 0, then the test passed, and NeoMutt uses
                  this entry. If the command returns non-zero, then the test
                  failed, and NeoMutt continues searching for the right entry.
                  Note that the content-type must match before NeoMutt performs
                  the test. For example:
                </para>

<screen>
text/html; firefox -remote 'openURL(%s)' ; test=RunningX
text/html; lynx %s
</screen>

                <para>
                  In this example, NeoMutt will run the program
                  <literal>RunningX</literal> which will return 0 if the
                  X Window manager is running, and non-zero if it isn't. If
                  <literal>RunningX</literal> returns 0, then NeoMutt will run
                  firefox to display the <literal>text/html</literal> object.
                  If RunningX doesn't return 0, then NeoMutt will go on to the
                  next entry and use lynx to display the
                  <literal>text/html</literal> object.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x-neomutt-keep</term>
              <listitem>
                <para>
                  <literal>x-neomutt-keep</literal> tells NeoMutt to
                  <emphasis>not</emphasis> delete the temporary file after the
                  program has been run.
                </para>
                <para>
                  Using it allows you to control the lifespan of the temporary
                  file.  Without this option, the file will be deleted after
                  <link linkend="timeout">$timeout</link> seconds.
                </para>
                <screen>text/html; firefox %s &amp; x-neomutt-keep</screen>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>x-neomutt-nowrap</term>
              <listitem>
                <para>
                  <literal>x-neomutt-nowrap</literal> tells the NeoMutt pager
                  to ignore the <link linkend="wrap">$wrap</link> parameter and
                  to assume the output from the mailcap command to already be
                  correctly wrapped.
                </para>
                <screen>text/html; /usr/local/bin/w3m -s -T text/html -o display_link_number=1 %s; nametemplate=%s.html; copiousoutput; x-neomutt-nowrap;</screen>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect3>

        <sect3 id="mailcap-search-order">
          <title>Search Order</title>
          <para>
            When searching for an entry in the mailcap file, NeoMutt will
            search for the most useful entry for its purpose. For instance, if
            you are attempting to print an <literal>image/gif</literal>, and
            you have the following entries in your mailcap file, NeoMutt will
            search for an entry with the print command:
          </para>

<screen>
image/*;        xv %s
image/gif;      ; print=anytopnm %s | pnmtops | lpr; \
                nametemplate=%s.gif
</screen>

          <para>
            NeoMutt will skip the <literal>image/*</literal> entry and use the
            <literal>image/gif</literal> entry with the print command.
          </para>
          <para>
            In addition, you can use this with
            <link linkend="auto-view"><command>auto_view</command></link> to
            denote two commands for viewing an attachment, one to be viewed
            automatically, the other to be viewed interactively from the
            attachment menu using the <literal>&lt;view-mailcap&gt;</literal>
            function (bound to <quote>m</quote> by default). In addition, you
            can then use the test feature to determine which viewer to use
            interactively depending on your environment.
          </para>

<screen>
text/html;      firefox -remote 'openURL(%s)' ; test=RunningX
text/html;      lynx %s; nametemplate=%s.html
text/html;      lynx -dump %s; nametemplate=%s.html; copiousoutput
</screen>

          <para>
            For <link linkend="auto-view"><command>auto_view</command></link>,
            NeoMutt will choose the third entry because of the
            <literal>copiousoutput</literal> tag. For interactive viewing,
            NeoMutt will run the program <literal>RunningX</literal> to
            determine if it should use the first entry. If the program returns
            non-zero, NeoMutt will use the second entry for interactive
            viewing. The last entry is for inline display in the pager and the
            <literal>&lt;view-attach&gt;</literal> function in the attachment
            menu.
          </para>
          <para>
            Entries with the <literal>copiousoutput</literal> tag should always
            be specified as the last one per type. For non-interactive use, the
            last entry will then actually be the first matching one with the
            tag set. For non-interactive use, only
            <literal>copiousoutput</literal>-tagged entries are considered. For
            interactive use, NeoMutt ignores this tag and treats all entries
            equally. Therefore, if not specified last, all following entries
            without this tag would never be considered for
            <literal>&lt;view-attach&gt;</literal> because the
            <literal>copiousoutput</literal> before them matched already.
          </para>
        </sect3>

        <sect3 id="mailcap-command-expansion">
          <title>Command Expansion</title>
          <para>
            The various commands defined in the mailcap files are passed to the
            <literal>/bin/sh</literal> shell using the
            <literal>system(3)</literal> function. Before the command is passed
            to <literal>/bin/sh -c</literal>, it is parsed to expand various
            special parameters with information from NeoMutt. The keywords
            NeoMutt expands are:
          </para>
          <variablelist>
            <varlistentry>
              <term>%s</term>
              <listitem>
                <para>
                  As seen in the basic mailcap section, this variable is
                  expanded to a filename specified by the calling program. This
                  file contains the body of the message to view/print/edit or
                  where the composing program should place the results of
                  composition. In addition, the use of this keyword causes
                  NeoMutt to not pass the body of the message to the
                  view/print/edit program on stdin.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>%t</term>
              <listitem>
                <para>
                  NeoMutt will expand <literal>%t</literal> to the text
                  representation of the content type of the message in the same
                  form as the first parameter of the mailcap definition line,
                  i.e. <literal>text/html</literal> or
                  <literal>image/gif</literal>.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>%{&lt;parameter&gt;}</term>
              <listitem>
                <para>
                  NeoMutt will expand this to the value of the specified
                  parameter from the Content-Type: line of the mail message.
                  For instance, if your mail message contains:
                </para>
                <screen>Content-Type: text/plain; charset=iso-8859-1</screen>
                <para>
                  then NeoMutt will expand <literal>%{charset}</literal> to
                  <quote>iso-8859-1</quote>. The default metamail mailcap file
                  uses this feature to test the charset to spawn an xterm using
                  the right charset to view the message.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>\%</term>
              <listitem>
                <para>
                  This will be replaced by a literal <literal>%</literal>.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>
            NeoMutt does not currently support the <literal>%F</literal> and
            <literal>%n</literal> keywords specified in RFC1524. The main
            purpose of these parameters is for multipart messages, which is
            handled internally by NeoMutt.
          </para>
        </sect3>
      </sect2>

      <sect2 id="mailcap-example">
        <title>Example Mailcap Files</title>
        <para>
          This mailcap file is fairly simple and standard:
        </para>

<screen>
<emphasis role="comment"># I'm always running X :)</emphasis>
video/*;        xanim %s &gt; /dev/null
image/*;        xv %s &gt; /dev/null
<emphasis role="comment"># I'm always running firefox (if my computer had more memory, maybe)</emphasis>
text/html;      firefox -remote 'openURL(%s)'
</screen>

        <para>
          These mailcap files shows how to control the lifespan of the temporary file.
        </para>

<screen>
<emphasis role="comment"># The `display` program shows an image and doesn't return until the user quits.</emphasis>

<emphasis role="comment"># Display an image, but wait for the user to quit the display program.</emphasis>
<emphasis role="comment"># When the user quits control will return to NeoMutt.</emphasis>
image/png; display %s;

<emphasis role="comment"># Display an image and return to NeoMutt immediately.</emphasis>
image/png; display %s &amp;;

<emphasis role="comment"># The file will be automatically deleted after $timeout seconds.</emphasis>
</screen>

<screen>
<emphasis role="comment"># Some graphical programs return immediately if they're already running.</emphasis>
<emphasis role="comment"># We'll add an ampersand (&amp;), just in case they're not.</emphasis>

<emphasis role="comment"># View the contents of a 'tar' file.</emphasis>
<emphasis role="comment"># The file will be automatically deleted after $timeout seconds.</emphasis>
application/x-tar; file-roller %s &amp;;

<emphasis role="comment"># View the contents of a 'tar' file.</emphasis>
<emphasis role="comment"># The file will <emphasis>not</emphasis> be deleted.</emphasis>
application/x-tar; file-roller %s &amp;; x-neomutt-keep
</screen>

<screen>
<emphasis role="comment"># Some programs watch any files they have open.</emphasis>
<emphasis role="comment"># If NeoMutt deleted the file, the program would close prematurely.</emphasis>

<emphasis role="comment"># Use a custom script to manage the file's lifespan.</emphasis>
application/pdf; my-pdf-script.sh %s; x-neomutt-keep
</screen>

        <para>
          This mailcap file shows quite a number of examples:
        </para>

<screen>
<emphasis role="comment"># Use xanim to view all videos Xanim produces a header on startup,</emphasis>
<emphasis role="comment"># send that to /dev/null so I don't see it</emphasis>
video/*;        xanim %s &gt; /dev/null
<emphasis role="comment"># Send html to a running firefox by remote</emphasis>
text/html;      firefox -remote 'openURL(%s)'; test=RunningFirefox
<emphasis role="comment"># If I'm not running firefox but I am running X, start firefox on the</emphasis>
<emphasis role="comment"># object</emphasis>
text/html;      firefox %s; test=RunningX
<emphasis role="comment"># Else use lynx to view it as text</emphasis>
text/html;      lynx %s
<emphasis role="comment"># This version would convert the text/html to text/plain</emphasis>
text/html;      lynx -dump %s; copiousoutput
<emphasis role="comment"># I use enscript to print text in two columns to a page</emphasis>
text/*;         more %s; print=enscript -2Gr %s
<emphasis role="comment"># Firefox adds a flag to tell itself to view jpegs internally</emphasis>
image/jpeg;     xv %s; x-mozilla-flags=internal
<emphasis role="comment"># Use xv to view images if I'm running X</emphasis>
<emphasis role="comment"># In addition, this uses the \ to extend the line and set my editor</emphasis>
<emphasis role="comment"># for images</emphasis>
image/*;        xv %s; test=RunningX; edit=xpaint %s
<emphasis role="comment"># Convert images to text using the netpbm tools</emphasis>
image/*;        (anytopnm %s | pnmscale -xysize 80 46 | ppmtopgm | pgmtopbm | \
                pbmtoascii -1x2) 2&gt;&amp;1 ; copiousoutput
<emphasis role="comment"># Send excel spreadsheets to my NT box</emphasis>
application/ms-excel;   open.pl %s
</screen>

      </sect2>
    </sect1>

    <sect1 id="auto-view">
      <title>MIME Autoview</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>auto_view</command>
        <arg choice="plain">
          <replaceable>mime-type</replaceable>
        </arg>
        <arg choice="opt">
          <replaceable>/mime-subtype</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <arg choice="plain">
            <replaceable>mime-type</replaceable>
          </arg>
          <arg choice="opt">
            <replaceable>/mime-subtype</replaceable>
          </arg>
        </arg>
        <command>unauto_view</command>
        <group choice="req">
          <arg choice="plain">*</arg>
          <arg choice="opt" rep="repeat">
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable>/mime-subtype</replaceable>
            </arg>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        In addition to explicitly telling NeoMutt to view an attachment with
        the MIME viewer defined in the mailcap file from the attachments menu,
        NeoMutt has support for automatically viewing MIME attachments while in
        the pager.
      </para>
      <para>
        For this to work, you must define a viewer in the mailcap file which
        uses the <literal>copiousoutput</literal> option to denote that it is
        non-interactive. Usually, you also use the entry to convert the
        attachment to a text representation which you can view in the pager.
      </para>
      <para>
        You then use the <command>auto_view</command> configuration command to
        list the content-types that you wish to view automatically. For
        instance, if you set it to:
      </para>

<screen>
auto_view text/html application/x-gunzip \
  application/postscript image/gif application/x-tar-gz
</screen>

      <para>
        ...NeoMutt would try to find corresponding entries for rendering
        attachments of these types as text. A corresponding mailcap could look
        like:
      </para>

<screen>
text/html;              lynx -dump %s; copiousoutput; nametemplate=%s.html
image/*;                anytopnm %s | pnmscale -xsize 80 -ysize 50 | ppmtopgm | \
                        pgmtopbm | pbmtoascii ; copiousoutput
application/x-gunzip;   gzcat; copiousoutput
application/x-tar-gz;   gunzip -c %s | tar -tf - ; copiousoutput
application/postscript; ps2ascii %s; copiousoutput
</screen>

      <para>
        <command>unauto_view</command> can be used to remove previous entries
        from the <command>auto_view</command> list. This can be used with
        <link linkend="message-hook"><command>message-hook</command></link> to
        autoview messages based on size, etc.
        <quote><command>unauto_view</command>&#160;*</quote> will remove all
        previous entries.
      </para>
    </sect1>

    <sect1 id="alternative-order">
      <title>MIME Multipart/Alternative</title>

      <para>
        A <literal>multipart/alternative</literal> email has several
        parts that represent the same content in different formats, such as
        <literal>text/plain</literal> and <literal>text/html</literal>. This
        kind of email is heavily used by many modern mail user agents to send
        HTML messages which contain an alternative plain text representation.
        You can read and write <literal>multipart/alternative</literal> emails
        in NeoMutt.
      </para>

      <sect2 id="read-alternative-order">
        <title>Reading Multipart/Alternative Emails</title>
        <para>
          NeoMutt has some heuristics for determining which attachment of
          a <literal>multipart/alternative</literal> type to display:
        </para>
        <orderedlist>
          <listitem>
            <para>
              First, NeoMutt will check the <command>alternative_order</command>
              list to determine if one of the available types is preferred. It
              consists of a number of MIME types in order, including support for
              implicit and explicit wildcards. For example:
            </para>

<screen>
alternative_order text/enriched text/plain text application/postscript image/*
</screen>

          </listitem>
          <listitem>
            <para>
              Next, NeoMutt will check if any of the types have a defined
              <link linkend="auto-view"><command>auto_view</command></link>, and
              use that.
            </para>
          </listitem>
          <listitem>
            <para>
              Failing that, NeoMutt will look first for
              <literal>text/enriched</literal>, followed by
              <literal>text/plain</literal>, and finally
              <literal>text/html</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              As a last attempt, NeoMutt will look for any type it knows how to
              handle.
            </para>
          </listitem>
        </orderedlist>
        <para>
          To remove a MIME type from the <command>alternative_order</command>
          list, use the <command>unalternative_order</command> command.
        </para>
      </sect2>

      <sect2 id="compose-alternative-order">
        <title>Composing Multipart/Alternative Emails</title>

        <para>
          Noemutt includes some primitive ability to compose multipart/alternative
          emails:
        </para>
        <orderedlist>
          <listitem>
            <para>
              In the Compose menu, attach the two (or more) alternatives as
              usual. For example, attach "invitation.html" and then "invitation.txt".
              (You can reorder them using the <literal>&lt;move-up&gt;</literal> (-)
              and <literal>&lt;move-down&gt;</literal> (+) bindings, and edit the
              descriptions).
            </para>
          </listitem>
          <listitem>
            <para>
              Tag the attachments that are alternatives, and press the
              <literal>&lt;group-alternatives&gt;</literal> (&amp;) binding to group
              them together. After this, the separate parts will be displayed in a tree
              structure. Attachments can still be edited separately and reordered within
              the group, but must be ungrouped using the <literal>&lt;ungroup-attachment&gt;</literal>
              (#) binding for more advanced editing before tagging and grouping together again
              as described above.
            </para>
          </listitem>
          <listitem>
            <para>
              Send the email as usual.
            </para>
          </listitem>
        </orderedlist>
        <para>
          If all the attachments have been grouped and form a single
          <literal>multipart/alternative</literal>, part then this message will be sent
          as a <literal>multipart/alternative</literal> email, otherwise it will be sent
          as a <literal>multipart/mixed</literal> email.
        </para>

        <para>
          Be aware that when sending a <literal>multipart/alternative</literal> email,
          you have to manually prepare the alternative parts and attach them. However,
          you can use Neomutt's macro to perform all the operations needed, such that
          you can compose a plain text email as usual and turn that into a
          <literal>multipart/alternative</literal> email in one single command, with
          one part being <literal>text/plain</literal> and the other
          <literal>text/html</literal>. An example macro which adds an HTML
          part to the main body of an email and sends it could be the following:

<screen>
macro compose Y "&lt;first-entry&gt;&lt;enter-command&gt;set wait_key=no&lt;enter&gt;\
&lt;pipe-entry&gt;pandoc -o /tmp/neomutt-alternative.html&lt;enter&gt;\
&lt;attach-file&gt;/tmp/neomutt-alternative.html&lt;enter&gt;\
&lt;toggle-unlink&gt;&lt;toggle-disposition&gt;\
&lt;tag-entry&gt;&lt;first-entry&gt;&lt;tag-entry&gt;&lt;group-alternatives&gt;\
&lt;enter-command&gt;set wait_key=yes&lt;enter&gt;&lt;send-message&gt;" \
"send the message as 'multipart/alternative'"
</screen>
        </para>
      </sect2>
    </sect1>

    <sect1 id="multipart-multilingual">
      <title>MIME Multipart/Multilingual</title>

      <para>
        Neomutt includes supports for reading and writing <literal>multipart/multilingual</literal>
        emails. A <literal>multipart/multilingual</literal> email is like a
        <literal>multipart/alternative</literal> email, except that it comes with parts of
        different versions of languages instead of appearances. Its format is described by
        <ulink url="https://tools.ietf.org/html/rfc8255">RFC8255</ulink>.
      </para>

      <sect2 id="read-multipart-multilingual">
        <title>Reading Multipart/Multilingual Emails</title>
        <para>
          Neomutt uses the <literal>$preferred_languages</literal> variable to determine which
          languages to display when displaying a <literal>multipart/multilingual</literal> email.
          You can have several preferred languages, separated by <literal>,</literal>
<screen>
set preferred_languages="fr,en,de"
</screen>
          Neomutt will try to match these strings again the multilingual header in the received
          emails "by prefix", e.g., <literal>en</literal> will match both <literal>en</literal>
          and <literal>en_US</literal>.
        </para>

        <para>
          If <literal>$preferred_languages</literal> is not set, it default to None, and the
          first part of the received <literal>multipart/multilingual</literal> email will be
          displayed.
        </para>
      </sect2>

      <sect2 id="compose-multipart-alternative">
        <title>Composing Multipart/Multilingual Emails</title>
        <para>
          The procedures of composing a <literal>multipart/multilingual</literal> email is similar
          to those in <link linkend="compose-alternative-order">Composing Multipart/Alternative</link>.
          You have to prepare every part manually or using some scripts, and then tag and group them
          together into a <literal>multipart/multilingual</literal> bundle before sending it:
        </para>

        <orderedlist>
          <listitem>
            <para>
              Prepare parts of the multilingual emails.
            </para>
          </listitem>

          <listitem>
            <para>
              Attach them as attachments.
            </para>
          </listitem>

          <listitem>
            <para>
              Tag them with <literal>&lt;tag-entry&gt;</literal>
            </para>
          </listitem>

          <listitem>
            <para>
              Edit the <literal>Content-Language</literal> header of every attachment with command
              <literal>&lt;edit-language&gt;</literal> (default to <literal>Ctrl-L</literal>). This
              is important, otherwise the recipient of this email will not know the corresponding
              languages. You can set arbitrary string as <literal>Content-Language</literal>, but it
              is recommended to set it as some common prefixes such as "en", "zh" and "fr".
            </para>
          </listitem>
          <listitem>
            <para>
              Group all the tag messages together by <literal>&lt;group-multilingual&gt;</literal>
              (default to <literal>^</literal>).
            </para>
          </listitem>
          <listitem>
            <para>
              Send the email as usual.
            </para>
          </listitem>

        </orderedlist>

        <para>
          As in <link linkend="compose-alternative-order">Composing Multipart/Alternative</link>, you can
          also use Neomutt's macro and some external scripts to combine this procedure into one.
        </para>

        <para>
          After grouping the separate parts will be displayed in a tree
          structure. Attachments can still be edited separately and reordered within
          the group, but must be ungrouped using the <literal>&lt;ungroup-attachment&gt;</literal>
          (#) binding for more advanced editing before tagging and grouping together again
          as described above.
        </para>
      </sect2>
    </sect1>

    <sect1 id="related">
      <title>MIME Multipart/Related</title>

      <para>
        Neomutt doesn't include any special support for reading <literal>multipart/related</literal>
        emails, but it is possible to write a <literal>multipart/related</literal> email.
        A <literal>multipart/related</literal> attachment is intended for compound objects
        consisting of several inter-related body parts which are linked together using the
        <literal>Content-ID</literal> header. Its format is described by
        <ulink url="https://tools.ietf.org/html/rfc2387">RFC2387</ulink>.
      </para>

      <sect2 id="compose-multipart-related">
        <title>Composing Multipart/Related Emails</title>
        <para>
          The procedure for composing a <literal>multipart/related</literal> email is similar
          to that in <link linkend="compose-alternative-order">Composing Multipart/Alternative</link>.
          You have to prepare every part manually or using some scripts, and then tag and group them
          together into a <literal>multipart/related</literal> bundle before sending it:
        </para>

        <orderedlist>
          <listitem>
            <para>
              Prepare parts of the related email.
            </para>
          </listitem>
          <listitem>
            <para>
              Attach them as attachments.
            </para>
          </listitem>
          <listitem>
            <para>
              Tag them with <literal>&lt;tag-entry&gt;</literal>
            </para>
          </listitem>
          <listitem>
            <para>
              One part can reference another using its <literal>Content-ID</literal> header.
              For example, an HTML part that includes an embedded image needs to contain:
              <literal>&lt;img src="cid:content-id"&gt;</literal> where an
              attached image has a <literal>Content-ID</literal> header of <literal>content-id</literal>.
              The <literal>Content-ID</literal> of an attachment can be set using
              <literal>&lt;edit-content-id&gt;</literal> (default key <literal>Alt-i</literal>).
              <literal>&lt;edit-content-id&gt;</literal> sets a random ID which can then be
              changed if desired. Permitted characters for <literal>Content-ID</literal> are:
              <literal>-.0-9@A-Z_a-z</literal>.
            </para>
            <para>
              If the <literal>multipart/related</literal> group is intended to be inline,
              members of the group should also have their <literal>Content-Disposition</literal>
              header set to <literal>inline</literal> which can be toggled using
              <literal>&lt;toggle-disposition&gt;</literal> (default key <literal>Ctrl-D</literal>).
            </para>
            <para>
              It can also be desirable to give referenced files in the group a
              <literal>filename</literal> even when the <literal>Content-Disposition</literal> is
              set to be <literal>inline</literal>. To do this use <literal>&lt;rename-attachment&gt;</literal>
              (default key <literal>Ctrl-O</literal>).
            </para>
          </listitem>
          <listitem>
            <para>
              Group all the tagged messages together with <literal>&lt;group-related&gt;</literal>
              (default key <literal>%</literal>).
            </para>
            <para>
              Top level attachments (excluding <literal>multipart</literal> ones) in the group
              are automatically given a random <literal>Content-ID</literal> if they do not
              already have one.
            </para>
          </listitem>
          <listitem>
            <para>
              Send the email as usual.
            </para>
          </listitem>
        </orderedlist>

        <para>
          Some care needs to be taken with the construction of a <literal>multipart/related</literal>
          email to ensure it is correctly displayed by the receiving mail client.
          A typical email with a <literal>multipart/alternative</literal> part
          containing a <literal>text/plain</literal> part and a <literal>text/html</literal>
          part with an embedded image, along with a separate attachment might end up like this:
        </para>

<screen>
  I     1 &lt;no description&gt;                                         [multipart/related, 7bit, 0K]
  I     2 ├─>&lt;no description&gt;                                  [multipart/alternative, 7bit, 0K]
- I     3 │ ├─>/tmp/neomutt-hostname-XXXX-XXXXXX-XXXXXXXXXX   [text/plain, 7bit, us-ascii, 0.1K]
- I     4 │ └─>/tmp/neomutt-alternative.html                      [text/html, 8bit, utf-8, 0.6K]
  I     5 └─>image.png                                                  [image/png, base64, 19K]
  A     6 attachment.pdf                                         [application/pdf, quoted, 7.1K]
</screen>

        <para>
          In the above email <literal>/tmp/neomutt-alternative.html</literal> would reference
          <literal>image.png</literal> using <literal>&lt;img src="cid:content-id"&gt;</literal>
          and <literal>image.png</literal> has been given an explicit name of
          <literal>image.png</literal> using <literal>&lt;rename-attachment&gt;</literal>
          (regardless of its initial filename). <literal>&lt;group-related&gt;</literal>
          has set its <literal>Content-ID</literal> header to a random value.
        </para>
      </sect2>
    </sect1>

    <sect1 id="attachments">
      <title>Attachment Searching and Counting</title>
      <para>
        If you ever lose track of attachments in your mailboxes, NeoMutt's
        attachment-counting and -searching support might be for you. You can
        make your message index display the number of qualifying attachments in
        each message, or search for messages by attachment count. You also can
        configure what kinds of attachments qualify for this feature with the
        <command>attachments</command> and <command>unattachments</command>
        commands.
      </para>
      <para>
        In order to provide this information, NeoMutt needs to fully MIME-parse
        all messages affected first. This can slow down operation especially
        for remote mail folders such as IMAP because all messages have to be
        downloaded first regardless whether the user really wants to view them
        or not though using <xref linkend="body-caching" /> usually means to
        download the message just once.
      </para>
      <para>
        By default, NeoMutt will not search inside
        <literal>multipart/alternative</literal> containers.  This can be changed
        via the <link linkend="count-alternatives">$count_alternatives</link>
        configuration variable.
      </para>
      <para>
        The syntax is:
      </para>
      <cmdsynopsis>
        <command>attachments</command>
        <group choice="req">
          <arg choice="plain">+</arg>
          <arg choice="plain">-</arg>
        </group>
        <arg choice="plain">
          <replaceable>disposition</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable>mime-type</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable>mime-type</replaceable>
        </arg>
        <command>unattachments</command>
        <group choice="req">
          <arg choice="plain">+</arg>
          <arg choice="plain">-</arg>
        </group>
        <arg choice="plain">
          <replaceable>disposition</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable>mime-type</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <replaceable>mime-type</replaceable>
        </arg>
        <command>attachments</command>
        <arg choice="plain">
          <option>?</option>
        </arg>
        <command>unattachments</command>
        <arg choice="plain">
          <option>*</option>
        </arg>
      </cmdsynopsis>
      <para>
        <emphasis>disposition</emphasis> is the attachment's
        Content-Disposition type – either <literal>inline</literal> or
        <literal>attachment</literal>. You can abbreviate this to
        <literal>I</literal> or <literal>A</literal>.
      </para>
      <para>
        Disposition is prefixed by either a <quote>+</quote> symbol or
        a <quote>-</quote> symbol. If it's a <quote>+</quote>, you're saying
        that you want to allow this disposition and MIME type to qualify. If
        it's a <quote>-</quote>, you're saying that this disposition and MIME
        type is an exception to previous <quote>+</quote> rules. There are
        examples below of how this is useful.
      </para>
      <para>
        <emphasis>mime-type</emphasis> is the MIME type of the attachment you
        want the command to affect. A MIME type is always of the format
        <literal>major/minor</literal>, where <literal>major</literal>
        describes the broad category of document you're looking at, and
        <literal>minor</literal> describes the specific type within that
        category. The major part of mime-type must be literal text (or the
        special token <quote><literal>*</literal></quote>), but the minor
        part may be a regular expression. (Therefore,
        <quote><literal>*/.*</literal></quote> matches any MIME type.)
      </para>
      <para>
        The MIME types you give to the <command>attachments</command> directive
        are a kind of pattern. When you use the <command>attachments</command>
        directive, the patterns you specify are added to a list. When you use
        <command>unattachments</command>, the pattern is removed from the list.
        The patterns are not expanded and matched to specific MIME types at
        this time – they're just text in a list. They're only matched when
        actually evaluating a message.
      </para>
      <para>
        Note that the first MIME part is treated slightly differently: It is
        almost always the message text.  Thus, it is not counted as an
        attachment if its disposition is <literal>inline</literal> and it is
        not a <literal>multipart/*</literal> or <literal>message/*</literal>
        MIME-type.
      </para>
      <para>
        Some examples might help to illustrate. The examples that are not
        commented out define the default configuration of the lists.
      </para>
      <example id="ex-attach-count">
        <title>Attachment counting</title>

<screen>
<emphasis role="comment"># Removing a pattern from a list removes that pattern literally. It</emphasis>
<emphasis role="comment"># does not remove any type matching the pattern.</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment">#  attachments   +A */.*</emphasis>
<emphasis role="comment">#  attachments   +A image/jpeg</emphasis>
<emphasis role="comment">#  unattachments +A */.*</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment"># This leaves "attached" image/jpeg files on the allowed attachments</emphasis>
<emphasis role="comment"># list. It does not remove all items, as you might expect, because the</emphasis>
<emphasis role="comment"># second */.* is not a matching expression at this time.</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment"># Remember: "unattachments" only undoes what "attachments" has done!</emphasis>
<emphasis role="comment"># It does not trigger any matching on actual messages.</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment"># Qualify any MIME part with an "attachment" disposition, EXCEPT for</emphasis>
<emphasis role="comment"># text/vcard, text/x-vcard, application/pgp.*, application/pkcs7-.* and</emphasis>
<emphasis role="comment"># application/x-pkcs7-.* parts. (PGP and S/MIME parts are already known</emphasis>
<emphasis role="comment"># to NeoMutt, and can be searched for with ~g, ~G, and ~k.)</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment"># I've added pkcs7/x-pkcs7 to this, since it functions (for S/MIME)</emphasis>
<emphasis role="comment"># analogously to PGP signature attachments. S/MIME isn't supported</emphasis>
<emphasis role="comment"># in a stock NeoMutt build, but we can still treat it specially here.</emphasis>
<emphasis role="comment">#</emphasis>
attachments  +A */.*
attachments  -A text/vcard text/x-vcard
attachments  -A application/pgp.*
attachments  -A application/pkcs7-.* application/x-pkcs7-.*
<emphasis role="comment"># Discount all MIME parts with an "inline" disposition, unless they're</emphasis>
<emphasis role="comment"># text/plain. (Why inline a text/plain part unless it's external to the</emphasis>
<emphasis role="comment"># message flow?)</emphasis>
attachments  +I text/plain
<emphasis role="comment"># These two lines make NeoMutt qualify MIME containers. (So, for example,</emphasis>
<emphasis role="comment"># a message/rfc822 forward will count as an attachment.) The first</emphasis>
<emphasis role="comment"># line is unnecessary if you already have "attach-allow */.*", of</emphasis>
<emphasis role="comment"># course. These are off by default! The MIME elements contained</emphasis>
<emphasis role="comment"># within a message/* or multipart/* are still examined, even if the</emphasis>
<emphasis role="comment"># containers themselves don't qualify.</emphasis>
<emphasis role="comment"># Recursion into multipart/alternatives containers is controlled by the</emphasis>
<emphasis role="comment"># $count_alternatives setting.</emphasis>

<emphasis role="comment">#attachments  +A message/.* multipart/.*</emphasis>
<emphasis role="comment">#attachments  +I message/.* multipart/.*</emphasis>
<emphasis role="comment">## You probably don't really care to know about deleted attachments.</emphasis>
attachments  -A message/external-body
attachments  -I message/external-body
</screen>

      </example>
      <para>
        Entering the command <quote><command>attachments</command> ?</quote> as
        a command will list your current settings in neomuttrc format, so that
        it can be pasted elsewhere.
      </para>

      <para>
        Entering the command <quote><command>unattachments</command> *</quote>
        as a command will Clear all attachment settings.
      </para>
    </sect1>

    <sect1 id="mime-lookup">
      <title>MIME Lookup</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>mime_lookup</command>
        <arg choice="plain">
          <replaceable>mime-type</replaceable>
        </arg>
        <arg choice="opt">
          <replaceable>/mime-subtype</replaceable>
        </arg>
        <arg choice="opt" rep="repeat">
          <arg choice="plain">
            <replaceable>mime-type</replaceable>
          </arg>
          <arg choice="opt">
            <replaceable>/mime-subtype</replaceable>
          </arg>
        </arg>
        <command>unmime_lookup</command>
        <group choice="req">
          <arg choice="plain">*</arg>
          <arg choice="opt" rep="repeat">
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable>/mime-subtype</replaceable>
            </arg>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        NeoMutt's <command>mime_lookup</command> list specifies a list of MIME
        types that should <emphasis>not</emphasis> be treated according to
        their mailcap entry. This option is designed to deal with binary types
        such as <literal>application/octet-stream</literal>. When an
        attachment's MIME type is listed in <command>mime_lookup</command>,
        then the extension of the filename will be compared to the list of
        extensions in the <literal>mime.types</literal> file. The MIME type
        associated with this extension will then be used to process the
        attachment according to the rules in the mailcap file and according to
        any other configuration options (such as <command>auto_view</command>)
        specified. Common usage would be:
      </para>

<screen>
mime_lookup application/octet-stream application/X-Lotus-Manuscript
</screen>

      <para>
        In addition, the <literal>unmime_lookup</literal> command may be used
        to disable this feature for any particular MIME type if it had been
        set, for example, in a global <literal>.neomuttrc</literal>.
      </para>
    </sect1>
  </chapter>

  <chapter id="optionalfeatures">
    <title>Optional Features</title>

    <sect1 id="optionalfeatures-notes">
      <title>General Notes</title>

      <sect2 id="compile-time-features">
        <title>Enabling/Disabling Features</title>
        <para>
          NeoMutt supports several of optional features which can be enabled or
          disabled at compile-time by giving the <emphasis>configure</emphasis>
          script certain arguments. These are listed in the
          <quote>Optional features</quote> section of the
          <emphasis>configure --help</emphasis> output.
        </para>
        <para>
          Which features are enabled or disabled can later be determined from
          the output of <literal>neomutt -v</literal>. If a compile option
          starts with <quote>+</quote> it is enabled and disabled if prefixed
          with <quote>-</quote>. For example, if NeoMutt was compiled using
          GnuTLS for encrypted communication instead of OpenSSL,
          <literal>neomutt -v</literal> would contain:
        </para>
        <screen>-openssl +gnutls</screen>
      </sect2>

      <sect2 id="url-syntax">
        <title>URL Syntax</title>
        <para>
          NeoMutt optionally supports the IMAP, POP3 and SMTP protocols which
          require to access servers using URLs. The canonical syntax for
          specifying URLs in NeoMutt is (an item enclosed in
          <literal>[]</literal> means it is optional and may be omitted):
        </para>
        <screen>proto[s]://[username[:password]@]server[:port][/path]</screen>
        <para>
          <emphasis>proto</emphasis> is the communication protocol:
          <literal>imap</literal> for IMAP, <literal>pop</literal> for POP3 and
          <literal>smtp</literal> for SMTP. If <quote>s</quote> for
          <quote>secure communication</quote> is appended, NeoMutt will attempt
          to establish an encrypted communication using SSL or TLS.
        </para>
        <para>
          Since all protocols supported by NeoMutt support/require
          authentication, login credentials may be specified in the URL. This
          has the advantage that multiple IMAP, POP3 or SMTP servers may be
          specified (which isn't possible using, for example,
          <link linkend="imap-user">$imap_user</link>). The username may contain
          the <quote>@</quote> symbol being used by many mail systems as part
          of the login name. The special characters <quote>/</quote>
          (<literal>%2F</literal>), <quote>:</quote> (<literal>%3A</literal>)
          and <quote>%</quote> (<literal>%25</literal>) have to be URL-encoded
          in usernames using the <literal>%</literal>-notation.
        </para>
        <para>
          A password can be given, too but is not recommended if the URL is
          specified in a configuration file on disk.
        </para>
        <para>
          If no port number is given, NeoMutt will use the system's default for
          the given protocol (usually consulting
          <literal>/etc/services</literal>).
        </para>
        <para>
          The optional path is only relevant for IMAP and ignored elsewhere.
        </para>
        <example id="ex-url">
          <title>URLs</title>

<screen>
pops://host/
imaps://user@host/INBOX/Sent
smtp://user@host:587/
</screen>

        </example>
      </sect2>
    </sect1>

    <sect1 id="ssl">
      <title>SSL/TLS Support</title>
      <para>
        If NeoMutt is compiled with IMAP, POP3 and/or SMTP support, it can also
        be compiled with support for SSL or TLS using either OpenSSL or GnuTLS
        (by running the <emphasis>configure</emphasis> script with the
        <emphasis>--ssl=...</emphasis> option for OpenSSL or
        <emphasis>--gnutls=...</emphasis> for GnuTLS). NeoMutt can then
        attempt to encrypt communication with remote servers if these protocols
        are suffixed with <quote>s</quote> for
        <quote>secure communication</quote>.
      </para>

      <sect2 id="starttls">
        <title>STARTTLS</title>
        <para>
          When non-secure URL protocols <literal>imap://</literal>,
          <literal>pop://</literal>, and <literal>smtp://</literal> are
          used, the initial connection to the server will be unencrypted.
          <literal>STARTTLS</literal> can be used to negotiate an encrypted
          connection after the initial unencrypted connection and exchange.
        </para>
        <para>
          Two configuration variables control NeoMutt's behavior with
          <literal>STARTTLS</literal>.  <link
          linkend="ssl-starttls">$ssl_starttls</link> will initiate
          <literal>STARTTLS</literal> if the server advertises support for
          it.  <link linkend="ssl-force-tls">$ssl_force_tls</link> will
          always try to initiate it, whether the server advertises support
          or not.
        </para>
        <para>
          NeoMutt <emphasis>highly recommends</emphasis> setting <link
          linkend="ssl-force-tls">$ssl_force_tls</link> unless you need to
          connect to an unencrypted server.  It's possible for an attacker
          to spoof interactions during the initial connection and hide
          support for <literal>STARTTLS</literal>.  The only way to prevent
          these attacks is by forcing <literal>STARTTLS</literal> with the
          <link linkend="ssl-force-tls">$ssl_force_tls</link> configuration
          variable.
        </para>
      </sect2>

      <sect2 id="secure-tunnel">
        <title>Tunnel</title>
        <para>
          When connecting through a <link linkend="tunnel">$tunnel</link>
          and <link linkend="tunnel-is-secure">$tunnel_is_secure</link> is
          set(the default), NeoMutt will assume the connection to the server
          through the pipe is already secured.  NeoMutt will ignore <link
          linkend="ssl-starttls">$ssl_starttls</link> and <link
          linkend="ssl-force-tls">$ssl_force_tls</link>, behaving as if TLS
          has already been negotiated.
        </para>
        <para>
          When <link linkend="tunnel-is-secure">$tunnel_is_secure</link> is
          unset, NeoMutt will respect the values of <link
          linkend="ssl-starttls">$ssl_starttls</link> and <link
          linkend="ssl-force-tls">$ssl_force_tls</link>.  It is
          <emphasis>highly recommended</emphasis> to set <link
          linkend="ssl-force-tls">$ssl_force_tls</link> in this case, to
          force <literal>STARTTLS</literal> negotiation.  Note that doing so
          will prevent connection to an IMAP server configured for
          preauthentication(<literal>PREAUTH</literal>).  If you use this
          configuration, it is recommended to use a secure tunnel.
        </para>
      </sect2>

    </sect1>

    <sect1 id="pop">
      <title>POP3 Support</title>
      <para>
        NeoMutt has POP3 support and has the ability to work with mailboxes
        located on a remote POP3 server and fetch mail for local browsing.
      </para>
      <para>
        Remote POP3 servers can be accessed using URLs with the
        <literal>pop</literal> protocol for unencrypted and
        <literal>pops</literal> for encrypted communication, see
        <xref linkend="url-syntax" /> for details.
      </para>
      <sect2 id="pop-mailbox">
        <title>Remote POP3 mailboxes</title>
        <para>
          Polling for new mail is more expensive over POP3 than locally. For this
          reason the frequency at which NeoMutt will check for mail remotely can
          be controlled by the
          <link linkend="pop-check-interval">$pop_check_interval</link> variable,
          which defaults to every 60 seconds.
        </para>
        <para>
          Due to limitations in POP3, this method doesn't allow for some
          features such as editing messages, changing their flags or even
          deleting them. However, using
          <xref linkend="header-caching" /> and
          <xref linkend="body-caching" />, NeoMutt simulates the new/old/read
          flags as well as flagged and replied. NeoMutt applies some logic on
          top of remote messages but cannot change them so that modifications
          of flags are lost when messages are downloaded from the POP3 server
          (either by NeoMutt or other tools).
        </para>
<screen>
<emphasis role="comment"># A sample configuration file for setting up a remote POP3 mailbox</emphasis>

<emphasis role="comment"># If an SMTP password has been set, use this to set the same password for POP3.</emphasis>
set pop_pass=$smtp_pass

<emphasis role="comment"># Set the POP3 server and user</emphasis>
set pop_host="pops://user@example.com"

<emphasis role="comment"># Use the remote server as the mailbox</emphasis>
set folder=$pop_host
set spool_file=+
</screen>
      </sect2>
      <sect2 id="fetch-mail">
        <title>Fetching mail from a POP3 server</title>
        <para>
          Another way to access your POP3 mail is the
          <literal>&lt;fetch-mail&gt;</literal> function (default: G). It allows
          to connect to <link linkend="pop-host">$pop_host</link>, fetch all your
          new mail and place it in the local
          <link linkend="spool-file">$spool_file</link>. After this point, NeoMutt
          runs exactly as if the mail had always been local. The
          <literal>&lt;fetch-mail&gt;</literal> function will ask whether you
          want to delete the messages on the remote server, leaving only your
          local copies.
        </para>
        <note>
          <para>
            If you only need to fetch all messages to a local mailbox, you
            should consider using a specialized program, such as
            <literal>fetchmail(1)</literal>, <literal>getmail(1)</literal> or
            similar.
          </para>
        </note>
<screen>
<emphasis role="comment"># A sample configuration file for fetching mail from a POP3 server</emphasis>

<emphasis role="comment"># The spool file contains the local copies of your messages. If it doesn't</emphasis>
<emphasis role="comment"># exist, initialize it as an empty file.</emphasis>
set spool_file="/home/user/.mailspool"

<emphasis role="comment"># The POP3 server and user from which to fetch messages</emphasis>
set pop_host="pops://user@example.com"
</screen>
      </sect2>
    </sect1>

    <sect1 id="imap">
      <title>IMAP Support</title>
      <para>
        NeoMutt has IMAP support and has the ability to work with folders
        located on a remote IMAP server.
      </para>
      <para>
        You can access the remote inbox by selecting the folder by its URL (see
        <xref linkend="url-syntax" /> for details) using the
        <literal>imap</literal> or <literal>imaps</literal> protocol.
        Alternatively, a pine-compatible notation is also supported, i.e.
        <literal>{[username@]imapserver[:port][/ssl]}path/to/folder</literal>
      </para>
      <para>
        Note that not all servers use <quote>/</quote> as the hierarchy
        separator. NeoMutt should correctly notice which separator is being
        used by the server and convert paths accordingly.
      </para>
      <para>
        The IMAP protocol has a subscription feature where the server manages
        a list of of subscribed folders.  To add or remove a folder to the list
        of subscribed folders use the commands:
      </para>
      <cmdsynopsis>
        <command>subscribe-to</command>
        <arg choice="plain">
          <replaceable class="parameter">imap-folder-uri</replaceable>
        </arg>
        <command>unsubscribe-from</command>
        <arg choice="plain">
          <replaceable class="parameter">imap-folder-uri</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        <emphasis>imap-folder-uri</emphasis> must be an IMAP URI,
        from which the server and the folder is derived, e.g.
      </para>
<screen>
subscribe-to imaps://mail.example.org/inbox
</screen>
      <para>
        Instead of the above commands you can also use the
        <literal>&lt;subscribe&gt;</literal> and
        <literal>&lt;unsubscribe&gt;</literal> functions of the browser
        (default keys <literal>s</literal> and <literal>u</literal>) to
        subscribe to or unsubscribe from a folder while browsing the folders on
        the IMAP server.  The browser can be instructed to only display the
        folders you are subscribed to with the
        <literal>&lt;toggle-subscribed&gt;</literal> functions.  See also the
        <link linkend="imap-list-subscribed">$imap_list_subscribed</link>
        variable.
      </para>
      <para>
        Because the list of subscribed folders is managed by the IMAP server,
        NeoMutt can also ask the server for that list.  If
        <link linkend="imap-check-subscribed">$imap_check_subscribed</link> is
        set, NeoMutt will do that and add those folders to its mailboxes list
        just as if you had used the <link linkend="mailboxes">mailboxes</link>
        command on each of them, so that these folders get checked periodically
        for new mail.
      </para>
      <para>
        Polling for new mail on an IMAP server can cause noticeable delays.
        So, you'll want to carefully tune the
        <link linkend="mail-check">$mail_check</link> and
        <link linkend="timeout">$timeout</link> variables. Reasonable values
        are:
      </para>

<screen>
set mail_check=90
set timeout=15
</screen>

      <para>
        with relatively good results even over slow modem lines.
      </para>
      <note>
        <para>
          Note that if you are using mbox as the mail store on UW servers prior
          to v12.250, the server has been reported to disconnect a client if
          another client selects the same folder.
        </para>
      </note>

      <sect2 id="imap-browser">
        <title>The IMAP Folder Browser</title>
        <para>
          As of version 1.2, NeoMutt supports browsing mailboxes on an IMAP
          server. This is mostly the same as the local file browser, with the
          following differences:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              In lieu of file permissions, NeoMutt displays the string
              <quote>IMAP</quote>, possibly followed by the symbol
              <quote>+</quote>, indicating that the entry contains both
              messages and subfolders. On Cyrus-like servers folders will often
              contain both messages and subfolders.  A mailbox name with a
              trailing delimiter (usually <quote>/</quote> or <quote>.</quote>)
              indicates subfolders.
            </para>
          </listitem>
          <listitem>
            <para>
              For the case where an entry can contain both messages and
              subfolders, the selection key (bound to <literal>enter</literal>
              by default) will choose to descend into the subfolder view. If
              you wish to view the messages in that folder, you must use
              <literal>view-file</literal> instead (bound to
              <literal>space</literal> by default).
            </para>
          </listitem>
          <listitem>
            <para>
              You can create, delete and rename mailboxes with the
              <literal>&lt;create-mailbox&gt;</literal>,
              <literal>&lt;delete-mailbox&gt;</literal>, and
              <literal>&lt;rename-mailbox&gt;</literal> commands (default
              bindings: <literal>C</literal>, <literal>d</literal> and
              <literal>r</literal>, respectively). You may also
              <literal>&lt;subscribe&gt;</literal> and
              <literal>&lt;unsubscribe&gt;</literal> to mailboxes (normally
              these are bound to <literal>s</literal> and <literal>u</literal>,
              respectively).
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="imap-authentication">
        <title>Authentication</title>
        <para>
          NeoMutt supports four authentication methods with IMAP servers: SASL,
          GSSAPI, CRAM-MD5, and LOGIN. There is also support for the
          pseudo-protocol ANONYMOUS, which allows you to log in to a public
          IMAP server without having an account. To use ANONYMOUS, simply make
          your username blank or <quote>anonymous</quote>.
        </para>
        <para>
          SASL is a special super-authenticator, which selects among several
          protocols (including GSSAPI, CRAM-MD5, ANONYMOUS, and DIGEST-MD5) the
          most secure method available on your host and the server. Using some
          of these methods (including DIGEST-MD5 and possibly GSSAPI), your
          entire session will be encrypted and invisible to those teeming
          network snoops. It is the best option if you have it. To use it, you
          must have the Cyrus SASL library installed on your system and compile
          NeoMutt with the <emphasis>--with-sasl</emphasis> flag.
        </para>
        <para>
          NeoMutt will try whichever methods are compiled in and available on
          the server, in the following order: SASL, ANONYMOUS, GSSAPI,
          CRAM-MD5, LOGIN.
        </para>
        <para>
          There are a few variables which control authentication:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="imap-user">$imap_user</link> – controls the
              username under which you request authentication on the IMAP
              server, for all authenticators. This is overridden by an explicit
              username in the mailbox path (i.e. by using a mailbox name of the
              form <literal>{user@host}</literal>).
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="imap-pass">$imap_pass</link> – a password which
              you may preset, used by all authentication methods where
              a password is needed.
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="imap-authenticators">$imap_authenticators</link>
              – a colon-delimited list of IMAP authentication methods to try,
              in the order you wish to try them. If specified, this overrides
              NeoMutt's default (attempt everything, in the order listed
              above).
            </para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>

    <sect1 id="smtp">
      <title>SMTP Support</title>
      <para>
        Besides supporting traditional mail delivery through
        a sendmail-compatible program, NeoMutt supports delivery through SMTP.
      </para>
      <para>
        If the configuration variable <link linkend="smtp-url">$smtp_url</link>
        is set, NeoMutt will contact the given SMTP server to deliver messages;
        if it is unset, NeoMutt will use the program specified by
        <link linkend="sendmail">$sendmail</link>.
      </para>
      <para>
        For details on the URL syntax, please see
        <xref linkend="url-syntax" />.
      </para>
      <para>
        The built-in SMTP support supports encryption (the
        <literal>smtps</literal> protocol using SSL or TLS) as well as SMTP
        authentication using SASL. The authentication mechanisms for SASL are
        specified in
        <link linkend="smtp-authenticators">$smtp_authenticators</link>
        defaulting to an empty list which makes NeoMutt try all available
        methods from most-secure to least-secure.
      </para>
    </sect1>

    <sect1 id="oauth">
      <title>OAUTHBEARER and XOAUTH2 Support</title>
      <para>
        Preliminary OAUTH support for IMAP, POP, and SMTP is provided via external scripts.
      </para>
      <para>
        At least for Gmail, you can use the <literal>oauth2.py</literal> script
        from Google's gmail-oauth2-tools:
        <ulink url="https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py">https://github.com/google/gmail-oauth2-tools/blob/master/python/oauth2.py</ulink>
      </para>
      <para>
        You'll need to get your own oauth client credentials for Gmail here:
        <ulink url="https://console.developers.google.com/apis/credentials">https://console.developers.google.com/apis/credentials</ulink>
      </para>
      <para>
        Then, you'd use <literal>oauth2.py</literal> with
        <literal>--generate_oauth2_token</literal> to get a refresh token, and
        configure NeoMutt with:
      </para>

<screen>
set imap_authenticators="oauthbearer"
set imap_oauth_refresh_command="/path/to/oauth2.py --quiet --user=[email_address]\
    --client_id=[client_id] --client_secret=[client_secret]\
    --refresh_token=[refresh_token]"
</screen>

      <para>
        For Office365, you can use the <literal>mutt_oauth2.py</literal> script
        written by Alexander Perlis:
        <ulink url="https://github.com/neomutt/neomutt/blob/main/contrib/oauth2/mutt_oauth2.py">https://github.com/neomutt/neomutt/blob/main/contrib/oauth2/mutt_oauth2.py</ulink>
      </para>
      <para>
        You'll need to get your own oauth client credentials by following the
        script instructions:
        <ulink url="https://github.com/neomutt/neomutt/blob/main/contrib/oauth2/README.md">https://github.com/neomutt/neomutt/blob/main/contrib/oauth2/README.md</ulink>
      </para>

<screen>
set imap_authenticators="xoauth2"
set imap_oauth_refresh_command="/path/to/mutt_oauth2.py /path/to/token"
</screen>

      <para>
        Substitute pop or smtp for imap in the above examples to configure for
        those. Please note that xoauth2 support has not yet been implemented for
        pop.
      </para>
    </sect1>

    <sect1 id="account-hook">
      <title>Managing Multiple Accounts</title>
      <para>
        Usage:
      </para>
      <cmdsynopsis>
        <command>account-hook</command>
        <arg choice="plain">
          <replaceable class="parameter">regex</replaceable>
        </arg>
        <arg choice="plain">
          <replaceable class="parameter">command</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        If you happen to have accounts on multiple IMAP, POP and/or SMTP
        servers, you may find managing all the authentication settings
        inconvenient and error-prone. The
        <link linkend="account-hook"><command>account-hook</command></link>
        command may help. This hook works like
        <link linkend="folder-hook"><command>folder-hook</command></link> but
        is invoked whenever NeoMutt needs to access a remote mailbox (including
        inside the folder browser), not just when you open the mailbox. This
        includes (for example) polling for new mail, storing Fcc messages and
        saving messages to a folder. As a consequence,
        <link linkend="account-hook"><command>account-hook</command></link>
        should only be used to set connection-related settings such as
        passwords or tunnel commands but not settings such as sender address or
        name (because in general it should be considered unpredictable which
        <link linkend="account-hook"><command>account-hook</command></link> was
        last used).
      </para>
      <para>
        Some examples:
      </para>

<screen>
account-hook . 'unset imap_user; unset imap_pass; unset tunnel'
account-hook imap://host1/ 'set imap_user=me1 imap_pass=foo'
account-hook imap://host2/ 'set tunnel="ssh host2 /usr/libexec/imapd"'
account-hook smtp://user@host3/ 'set tunnel="ssh host3 /usr/libexec/smtpd"'
</screen>

      <para>
        To manage multiple accounts with, for example, different values of
        <link linkend="record">$record</link> or sender addresses,
        <link linkend="folder-hook"><command>folder-hook</command></link> has
        to be be used together with the
        <link linkend="mailboxes"><command>mailboxes</command></link> command.
      </para>
      <example id="ex-multiaccount">
        <title>Managing multiple accounts</title>

<screen>
mailboxes imap://user@host1/INBOX
folder-hook imap://user@host1/ 'set folder=imap://host1/ ; set record=+INBOX/Sent'
mailboxes imap://user@host2/INBOX
folder-hook imap://user@host2/ 'set folder=imap://host2/ ; set record=+INBOX/Sent'
</screen>

      </example>
      <para>
        In example
        <xref linkend="ex-multiaccount" /> the folders are defined using
        <link linkend="mailboxes"><command>mailboxes</command></link> so
        NeoMutt polls them for new mail. Each
        <link linkend="folder-hook"><command>folder-hook</command></link>
        triggers when one mailbox below each IMAP account is opened and sets
        <link linkend="folder">$folder</link> to the account's root folder.
        Next, it sets
        <link linkend="record">$record</link> to the
        <emphasis>INBOX/Sent</emphasis> folder below the newly set
        <link linkend="folder">$folder</link>. Please notice that the value the
        <quote>+</quote> <link linkend="shortcuts">mailbox shortcut</link>
        refers to depends on the <emphasis>current</emphasis> value of
        <link linkend="folder">$folder</link> and therefore has to be set
        separately per account. Setting other values like
        <link linkend="from">$from</link> or
        <link linkend="signature">$signature</link> is analogous to setting
        <link linkend="record">$record</link>.
      </para>
    </sect1>

    <sect1 id="caching">
      <title>Local Caching</title>
      <para>
        NeoMutt contains two types of local caching: <emphasis>(1)</emphasis>
        the so-called <quote>header caching</quote> and
        <emphasis>(2)</emphasis> the so-called <quote>body caching</quote>
        which are both described in this section.
      </para>
      <para>
        Header caching is optional as it depends on external libraries, body
        caching is always enabled if NeoMutt is compiled with POP and/or IMAP
        support as these use it (body caching requires no external library).
      </para>

      <sect2 id="header-caching">
        <title>Header Caching</title>
        <para>
          NeoMutt provides optional support for caching message headers for the
          following types of folders: IMAP, POP, Maildir and MH. Header caching
          greatly speeds up opening large folders because for remote folders,
          headers usually only need to be downloaded once. For Maildir and MH,
          reading the headers from a single file is much faster than looking at
          possibly thousands of single files (since Maildir and MH use one file
          per message.)
        </para>
        <para>
          Header caching can be enabled by configuring one of the database
          backends. One of bdb, gdbm, kyotocabinet, lmdb, qdbm, rocksdb, tdb,
          tokyocabinet.
        </para>
        <para>
          If enabled, <link linkend="header-cache">$header_cache</link> can be
          used to either point to a file or a directory. If set to point to
          a file, one database file for all folders will be used (which may
          result in lower performance), but one file per folder if it points to
          a directory.
        </para>
        <para>
          Additionally,
          <link linkend="header-cache-backend">$header_cache_backend</link> can
          be set to specify which backend to use. The list of available
          backends can be specified at configure time with a set of
          --with-&lt;backend&gt; options. Currently, the following backends are
          supported: bdb, gdbm, kyotocabinet, lmdb, qdbm, rocksdb, tdb,
          tokyocabinet.
        </para>
         <para>
          Take a look at the benchmark script provided in the following repository:
           <ulink url="https://github.com/neomutt/contrib-hcache-benchmark">contrib-hcache-benchmark</ulink>.
          There you can find a way of finding the storage backend for your needs.
        </para>
      </sect2>

      <sect2 id="body-caching">
        <title>Body Caching</title>
        <para>
          Both cache methods can be combined using the same directory for
          storage (and for IMAP/POP even provide meaningful file names) which
          simplifies manual maintenance tasks.
        </para>
        <para>
          In addition to caching message headers only, NeoMutt can also cache
          whole message bodies. This results in faster display of messages for
          POP and IMAP folders because messages usually have to be downloaded
          only once.
        </para>
        <para>
          For configuration, the variable
          <link linkend="message-cache-dir">$message_cache_dir</link> must point
          to a directory. There, NeoMutt will create a hierarchy of
          subdirectories named like the account and mailbox path the cache is
          for.
        </para>
      </sect2>

      <sect2 id="cache-dirs">
        <title>Cache Directories</title>
        <para>
          For using both, header and body caching,
          <link linkend="header-cache">$header_cache</link> and
          <link linkend="message-cache-dir">$message_cache_dir</link> can be
          safely set to the same value.
        </para>
        <para>
          In a header or body cache directory, NeoMutt creates a directory
          hierarchy named like: <literal>proto:user@hostname</literal> where
          <literal>proto</literal> is either <quote>pop</quote> or
          <quote>imap.</quote> Within there, for each folder, NeoMutt stores
          messages in single files and header caches in files with the
          <quote>.hcache</quote> extension. All files can be removed as needed
          if the consumed disk space becomes an issue as NeoMutt will silently
          fetch missing items again. Pathnames are always stored in UTF-8
          encoding.
        </para>
        <para>
          For Maildir and MH, the header cache files are named after the MD5
          checksum of the path.
        </para>
      </sect2>

      <sect2 id="maint-cache">
        <title>Maintenance</title>
        <para>
          NeoMutt does not (yet) support maintenance features for header cache
          database files so that files have to be removed in case they grow too
          big. It depends on the database library used for header caching
          whether disk space freed by removing messages is re-used.
        </para>
        <para>
          For body caches, NeoMutt can keep the local cache in sync with the
          remote mailbox if the
          <link linkend="message-cache-clean">$message_cache_clean</link>
          variable is set. Cleaning means to remove messages from the cache
          which are no longer present in the mailbox which only happens when
          other mail clients or instances of NeoMutt using a different body
          cache location delete messages (NeoMutt itself removes deleted
          messages from the cache when syncing a mailbox). As cleaning can take
          a noticeable amount of time, it should not be set in general but only
          occasionally.
        </para>
      </sect2>
    </sect1>

    <sect1 id="account-cmd">
      <title>Account Command Feature</title>
      <subtitle>Populate account credentials via an external command</subtitle>

      <sect2 id="account-cmd-support">
        <title>Support</title>
        <para><emphasis role="bold">Since:</emphasis> NeoMutt 2022-05-16</para>
        <para><emphasis role="bold">Dependencies:</emphasis> None</para>
      </sect2>

      <sect2 id="account-cmd-intro">
        <title>Introduction</title>
        <para>
          NeoMutt provides dedicated config variables to specify credentials
          for network servers. These include <literal>imap_user</literal>,
          <literal>imap_pass</literal>, <literal>smtp_user</literal>,
          <literal>smtp_pass</literal>, etc.  There are a few downsides to this
          approach. For one thing, their use encourages storing usernames and
          passwords in plain text inside a NeoMutt config file. People have
          come up with solutions to this, including using gpg-encrypted files
          and populating <literal>my_</literal> variables via external scripts
          through <literal>source "/path/to/script|"</literal>.
          However, once the variables are set, the secrets can be inspected
          with the <literal>set</literal> command.
          Also, because these config variables are not account-specific, they
          have been the cause of a proliferation of ways to mimic per-account
          setups using a combination of convoluted hooks and macros to modify
          them on folder change or on a keypress.
        </para>

        <para>
          The goal of this feature is to get rid of most <literal>_user</literal>
          and <literal>_pass</literal> variables. To do so, we provide a way of
          specifying an external command that NeoMutt will call to populate
          account credentials for network servers such as IMAP, POP, or SMTP.
          The external command is called with a number of arguments indicating
          the known properties of the account such as the account type and
          hostname; the external command provides NeoMutt with a list of
          additional properties such as username and password.
        </para>
      </sect2>

      <sect2 id="accound-cmd-usage">
        <title>Usage</title>
        <para>
          The variable <literal>account_command</literal> configures an
          external program to be used to gather account credentials.
        </para>
        <screen>set account_command = "/path/to/my/script.sh"</screen>
        <para>
          The program specified will be called by NeoMutt with a number of
          key-value command line arguments.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <literal>--hostname val</literal>: the network host name of the
              service
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>--username val</literal>: the username for the account.
              This might be specified in the URL itself, e.g.,
              <literal>set folder="imaps://me@example.com@example.com"</literal> or
              with a dedicated existing variable, e.g.
              <literal>set imap_user=me@example.com</literal>.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>--type val</literal>: the type of the account, one of
              <literal>imap</literal>, <literal>pop</literal>,
              <literal>smtp</literal>, <literal>nntp</literal>, with an optional
              trailing <literal>s</literal> if SSL/TLS is required.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          The program specified will have to respond by printing to stdout a
          number of <literal>key: value</literal> lines. NeoMutt currently
          recognizes the following keys.
        </para>

        <itemizedlist>
          <listitem><para>login</para></listitem>
          <listitem><para>username</para></listitem>
          <listitem><para>password</para></listitem>
        </itemizedlist>

        <para>
          Because password can contain any characters, including spaces, we
          expect lines to match the regex <literal>^([[:alpha:]]+): (.*)$</literal> exactly.
        </para>
      </sect2>

      <sect2 id="account-cmd-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="account-cmd-credits">
        <title>Credits</title>
        <para>
          Pietro Cerutti
        </para>
      </sect2>

    </sect1>

    <sect1 id="attach-headers-color">
      <title>Attach Headers Color Feature</title>
      <subtitle>Color attachment headers using regex, just like mail
      bodies</subtitle>

      <sect2 id="attach-headers-color-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-09-10
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="attach-headers-color-intro">
        <title>Introduction</title>
        <para>
          This feature allows specifying regexes to color attachment headers
          just like the mail body would. The headers are the parts colored by
          the <literal>attachment</literal> color. Coloring them is useful to
          highlight the results of GPGME's signature checks or simply the
          mimetype or size of the attachment. Only the part matched by the
          regex is colored.
        </para>
      </sect2>

      <sect2 id="attach-headers-color-usage">
        <title>Usage</title>
        <para>
          The <literal>attach_headers</literal> color should be used just like
          the <literal>body</literal> color.
        </para>
        <screen>color attach_headers foreground background pattern</screen>
      </sect2>

      <sect2 id="attach-headers-color-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the attach-headers-color feature.</emphasis>

<emphasis role="comment"># Color if the attachment is autoviewed</emphasis>
color   attach_headers     brightgreen     default    "Autoview"
<emphasis role="comment"># Color only the brackets around the headers</emphasis>
color   attach_headers     brightyellow    default    "^\\[--"
color   attach_headers     brightyellow    default    "--]$"
<emphasis role="comment"># Color the mime type and the size</emphasis>
color   attach_headers     green           default    "Type: [a-z]+/[a-z0-9\-]+"
color   attach_headers     green           default    "Size: [0-9\.]+[KM]"
<emphasis role="comment"># Color GPGME signature checks</emphasis>
color   attach_headers     brightgreen     default    "Good signature from.*"
color   attach_headers     brightred       default    "Bad signature from.*"
color   attach_headers     brightred       default    "BAD signature from.*"
color   attach_headers     brightred       default    "Note: This key has expired!"
color   attach_headers     brightmagenta   default    "Problem signature from.*"
color   attach_headers     brightmagenta   default    "WARNING: This key is not certified with a trusted signature!"
color   attach_headers     brightmagenta   default    "         There is no indication that the signature belongs to the owner."
color   attach_headers     brightmagenta   default    "can't handle these multiple signatures"
color   attach_headers     brightmagenta   default    "signature verification suppressed"
color   attach_headers     brightmagenta   default    "invalid node with packet of type"

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="attach-headers-color-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="color">Color command</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="regex">Regular Expressions</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="attach-headers-color-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="attach-headers-color-credits">
        <title>Credits</title>
        <para>
          Guillaume Brogi
        </para>
      </sect2>
    </sect1>

    <sect1 id="cli-crypto">
      <title>Command-line Crypto (-C) Feature</title>
      <subtitle>Enable message security in modes that by default don't
      enable it</subtitle>

      <sect2 id="cli-crypto-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2024-01-21
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> Gpgme
        </para>
      </sect2>

      <sect2 id="cli-crypto-intro">
        <title>Introduction</title>
        <para>
          This feature allows enabling message security in modes that
          don't enable it by default.  Those include batch mode, sending
          a postponed message, and resending a message.
        </para>
        <para>
          This allows using NeoMutt as a driver for git-send-email(1),
          to send patches in signed and/or encrypted mail.
        </para>
      </sect2>

      <sect2 id="cli-crypto-usage">
        <title>Usage</title>
        <para>
          To send an email from a file, enabling cryptographic
          operations as when sending interactively, simply use the
          <literal>-C</literal> flag.
        </para>
        <screen>$ neomutt -C -H - &lt; /mail/to/be/sent</screen>
      </sect2>

      <sect2 id="cli-crypto-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the cli-crypto feature.</emphasis>

set pgp_default_key = "1111111111111111111111111111111111111111"
<emphasis role="comment"># Sign all mail</emphasis>
set crypt_autosign = yes
<emphasis role="comment"># Encrypt mail if all recipients have valid public keys</emphasis>
set crypt_opportunistic_encrypt = yes
<emphasis role="comment"># Self encrypt mail</emphasis>
set crypt_self_encrypt = yes

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="cli-crypto-gitconfig">
        <title>gitconfig</title>

<screen>
<emphasis role="comment"># Example .gitconfig config file for the cli-crypto feature.</emphasis>

[sendemail]
sendmailcmd = neomutt -C -H - &amp;&amp; true
</screen>

      </sect2>

      <sect2 id="cli-crypto-credits">
        <title>Credits</title>
        <para>
          Alejandro Colomar, Richard Russon, Jenya Sovetkin
        </para>
      </sect2>
    </sect1>

    <sect1 id="compose-to-sender">
      <title>Compose to Sender Feature</title>
      <subtitle>Send new mail to the sender of the current mail</subtitle>

      <sect2 id="compose-to-sender-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-10-02
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="compose-to-sender-intro">
        <title>Introduction</title>
        <para>
          The compose-to-sender feature adds a new command to start composing
          a new email to the sender of the current message. This is not
          a reply, but a new, separate, message.
        </para>
        <para>
          It works on tagged messages too, sending one email to all of the
          senders of the tagged messages.
        </para>
      </sect2>

      <sect2 id="compose-to-sender-functions">
        <title>Functions</title>
        <para>
          compose-to-sender adds the following function to NeoMutt. By default,
          it is not bound to a key.
        </para>

        <table id="table-compose-to-sender-functions">
          <title>compose-to-sender Functions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;compose-to-sender&gt;</literal></entry>
                <entry>compose a new email to the sender of the current email</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="compose-to-sender-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the compose-to-sender feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># FUNCTIONS – shown with an example mapping</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Compose a new email (not a reply) to the sender</emphasis>
bind index,pager @ compose-to-sender

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="compose-to-sender-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="compose-to-sender-credits">
        <title>Credits</title>
        <para>
          Brian Medley, Guillaume Brogi
        </para>
      </sect2>
    </sect1>

    <sect1 id="compress">
      <title>Compressed Folders Feature</title>
      <subtitle>Read from/write to compressed mailboxes</subtitle>

      <sect2 id="compress-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-05-30
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="compress-intro">
        <title>Introduction</title>
        <para>
          The Compressed Folder feature allows NeoMutt to read mailbox files
          that are compressed. But it isn't limited to compressed files. It
          works well with encrypted files, too. In fact, if you can create
          a program/script to convert to and from your format, then NeoMutt can
          read it.
        </para>
        <para>
          The feature adds three hooks to NeoMutt:
          <literal>open-hook</literal>, <literal>close-hook</literal> and
          <literal>append-hook</literal>. They define commands to: uncompress
          a file; compress a file; append messages to an already compressed
          file.
        </para>
        <para>
          There are some examples of both compressed and encrypted files,
          later. For now, the documentation will just concentrate on compressed
          files.
        </para>
      </sect2>

      <sect2 id="compress-commands">
        <title>Commands</title>
        <cmdsynopsis>
          <command>open-hook</command>
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">&quot;shell-command&quot;</replaceable>
          </arg>
          <command>close-hook</command>
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">&quot;shell-command&quot;</replaceable>
          </arg>
          <command>append-hook</command>
          <arg choice="plain">
            <replaceable class="parameter">regex</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">&quot;shell-command&quot;</replaceable>
          </arg>
        </cmdsynopsis>
        <para>
          The shell-command must contain two placeholders for filenames:
          <literal>%f</literal> and <literal>%t</literal>. These represent
          <quote>from</quote> and <quote>to</quote> filenames. These
          placeholders should be placed inside single-quotes to prevent
          unintended shell expansions.
        </para>
        <para>
          If you need the exact string <quote>%f</quote> or <quote>%t</quote>
          in your command, simply double up the <quote>%</quote> character,
          e.g. <quote>%%f</quote> or <quote>%%t</quote>.
        </para>

        <table id="table-compress-optional">
          <title>Not all Hooks are Required</title>
          <tgroup cols="5">
            <thead>
              <row>
                <entry>Open</entry>
                <entry>Close</entry>
                <entry>Append</entry>
                <entry>Effect</entry>
                <entry>Useful if</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Open</entry>
                <entry>—</entry>
                <entry>—</entry>
                <entry>
                  Folder is readonly
                </entry>
                <entry>The folder is just a backup</entry>
              </row>
              <row>
                <entry>Open</entry>
                <entry>Close</entry>
                <entry>—</entry>
                <entry>
                  Folder is read/write, but the entire folder must be written
                  if anything is changed
                </entry>
                <entry>Your compression format doesn't support appending</entry>
              </row>
              <row>
                <entry>Open</entry>
                <entry>Close</entry>
                <entry>Append</entry>
                <entry>
                  Folder is read/write and emails can be efficiently added to
                  the end
                </entry>
                <entry>Your compression format supports appending</entry>
              </row>
              <row>
                <entry>Open</entry>
                <entry>—</entry>
                <entry>Append</entry>
                <entry>
                  Folder is readonly, but can be appended to
                </entry>
                <entry>You want to store emails, but never change them</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <note>
          <para>
            The command:
          </para>
          <itemizedlist>
            <listitem>
              <para>
                should return a non-zero exit status on failure
              </para>
            </listitem>
            <listitem>
              <para>
                should not delete any files
              </para>
            </listitem>
          </itemizedlist>
        </note>

        <sect3 id="open-hook">
          <title>Read from compressed mailbox</title>
          <screen>open-hook regex &quot;shell-command&quot;</screen>
          <para>
            If NeoMutt is unable to open a file, it then looks for
            <literal>open-hook</literal> that matches the filename.
          </para>
          <para>
            If your compression program doesn't have a well-defined extension,
            then you can use <literal>.</literal> as the regex.
          </para>

          <example id="compress-open-hook-example">
            <title>Example of
            <literal>open-hook</literal></title>

<screen>
open-hook '\.gz$' "gzip --stdout --decompress '%f' &gt; '%t'"
</screen>

            <itemizedlist>
              <listitem>
                <para>
                  NeoMutt finds a file, <quote>example.gz</quote>, that it
                  can't read
                </para>
              </listitem>
              <listitem>
                <para>
                  NeoMutt has an <literal>open-hook</literal> whose regex
                  matches the filename: <literal>\.gz$</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  NeoMutt uses the command <literal>gzip -cd</literal> to
                  create a temporary file that it <emphasis>can</emphasis> read
                </para>
              </listitem>
            </itemizedlist>
          </example>
        </sect3>

        <sect3 id="close-hook">
          <title>Write to a compressed mailbox</title>
          <screen>close-hook regex &quot;shell-command&quot;</screen>
          <para>
            When NeoMutt has finished with a compressed mail folder, it will
            look for a matching <literal>close-hook</literal> to recompress the
            file. This hook is
            <link linkend="table-compress-optional">optional</link>.
          </para>
          <note>
            <para>
              If the folder has not been modified, the
              <literal>close-hook</literal> will not be called.
            </para>
          </note>

          <example id="compress-close-hook-example">
            <title>Example of
            <literal>close-hook</literal></title>
            <screen>close-hook '\.gz$' "gzip --stdout '%t' &gt; '%f'"</screen>
            <itemizedlist>
              <listitem>
                <para>
                  NeoMutt has finished with a folder,
                  <quote>example.gz</quote>, that it opened with
                  <literal>open-hook</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  The folder has been modified
                </para>
              </listitem>
              <listitem>
                <para>
                  NeoMutt has a <literal>close-hook</literal> whose regex
                  matches the filename: <literal>\.gz$</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  NeoMutt uses the command <literal>gzip -c</literal> to create
                  a new compressed file
                </para>
              </listitem>
            </itemizedlist>
          </example>
          <note>
            <para>
              The <literal>close-hook</literal> can also include extra
              options, e.g. compression level: <literal>--best</literal>
            </para>
          </note>
        </sect3>

        <sect3 id="append-hook">
          <title>Append to a compressed mailbox</title>
          <screen>append-hook regex &quot;shell-command&quot;</screen>
          <para>
            When NeoMutt wants to append an email to a compressed mail folder,
            it will look for a matching <literal>append-hook</literal>. This
            hook is <link linkend="table-compress-optional">optional</link>.
          </para>
          <para>
            Using the <literal>append-hook</literal> will save time, but
            NeoMutt won't be able to determine the type of the mail folder
            inside the compressed file.
          </para>
          <para>
            NeoMutt will <emphasis>assume</emphasis> the type to be that of the
            <literal>$mbox_type</literal> variable. NeoMutt also uses this type
            for temporary files.
          </para>
          <para>
            NeoMutt will only use the <literal>append-hook</literal> for
            existing files. The <literal>close-hook</literal> will be used for
            empty, or missing files.
          </para>
          <note>
            <para>
              If your command writes to stdout, it is vital that you use
              <literal>&gt;&gt;</literal> in the <quote>append-hook</quote>. If
              not, data will be lost.
            </para>
          </note>

          <example id="compress-append-hook-example">
            <title>Example of
            <literal>append-hook</literal></title>

<screen>
append-hook '\.gz$' "gzip --stdout '%t' &gt;&gt; '%f'"
</screen>

            <itemizedlist>
              <listitem>
                <para>
                  NeoMutt wants to append an email to a folder,
                  <quote>example.gz</quote>, that it opened with
                  <literal>open-hook</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  NeoMutt has an <literal>append-hook</literal> whose regex
                  matches the filename: <literal>\.gz$</literal>
                </para>
              </listitem>
              <listitem>
                <para>
                  NeoMutt knows the mailbox type from the
                  <literal>$mbox</literal> variable
                </para>
              </listitem>
              <listitem>
                <para>
                  NeoMutt uses the command <literal>gzip -c</literal> to append
                  to an existing compressed file
                </para>
              </listitem>
            </itemizedlist>
          </example>
          <note>
            <para>
              The <literal>append-hook</literal> can also include extra
              options, e.g. compression level: <literal>--best</literal>
            </para>
          </note>
        </sect3>

        <sect3 id="compress-empty">
          <title>Empty Files</title>
          <para>
            NeoMutt assumes that an empty file is not compressed. In this
            situation, unset <link linkend="save-empty">$save_empty</link>, so
            that the compressed file will be removed if you delete all of the
            messages.
          </para>
        </sect3>

        <sect3 id="compress-security">
          <title>Security</title>
          <para>
            Encrypted files are decrypted into temporary files which are stored
            in the <link linkend="tmp-dir">$tmp_dir</link> directory. This could
            be a security risk.
          </para>
        </sect3>
      </sect2>

      <sect2 id="compress-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the compress feature.</emphasis>

<emphasis role="comment"># This feature adds three hooks to NeoMutt which allow it to</emphasis>
<emphasis role="comment"># work with compressed, or encrypted, mailboxes.</emphasis>

<emphasis role="comment"># The hooks are of the form:</emphasis>
<emphasis role="comment">#       open-hook   regex "shell-command"</emphasis>
<emphasis role="comment">#       close-hook  regex "shell-command"</emphasis>
<emphasis role="comment">#       append-hook regex "shell-command"</emphasis>
<emphasis role="comment"># The 'append-hook' is optional.</emphasis>

<emphasis role="comment"># Handler for gzip compressed mailboxes</emphasis>
open-hook   '\.gz$' "gzip --stdout --decompress '%f' &gt;  '%t'"
close-hook  '\.gz$' "gzip --stdout              '%t' &gt;  '%f'"
append-hook '\.gz$' "gzip --stdout              '%t' &gt;&gt; '%f'"
<emphasis role="comment"># Handler for bzip2 compressed mailboxes</emphasis>
open-hook   '\.bz2$' "bzip2 --stdout --decompress '%f' &gt;  '%t'"
close-hook  '\.bz2$' "bzip2 --stdout              '%t' &gt;  '%f'"
append-hook '\.bz2$' "bzip2 --stdout              '%t' &gt;&gt; '%f'"
<emphasis role="comment"># Handler for xz compressed mailboxes</emphasis>
open-hook   '\.xz$' "xz --stdout --decompress '%f' &gt;  '%t'"
close-hook  '\.xz$' "xz --stdout              '%t' &gt;  '%f'"
append-hook '\.xz$' "xz --stdout              '%t' &gt;&gt; '%f'"
<emphasis role="comment"># Handler for pgp encrypted mailboxes</emphasis>
<emphasis role="comment"># PGP does not support appending to an encrypted file</emphasis>
open-hook   '\.pgp$' "pgp -f &lt; '%f' &gt; '%t'"
close-hook  '\.pgp$' "pgp -fe YourPgpUserIdOrKeyId &lt; '%t' &gt; '%f'"
<emphasis role="comment"># Handler for gpg encrypted mailboxes</emphasis>
<emphasis role="comment"># gpg does not support appending to an encrypted file</emphasis>
open-hook   '\.gpg$' "gpg --decrypt &lt; '%f' &gt; '%t'"
close-hook  '\.gpg$' "gpg --encrypt --recipient YourGpgUserIdOrKeyId &lt; '%t' &gt; '%f'"

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="compress-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="regex">Regular Expressions</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="tmp-dir">$tmp_dir</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="mbox-type">$mbox_type</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="save-empty">$save_empty</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="folder-hook">folder-hook</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="compress-credits">
        <title>Credits</title>
        <para>
          Roland Rosenfeld, Alain Penders, Christoph <quote>Myon</quote> Berg,
          Evgeni Golov, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="cond-date">
      <title>Conditional Dates Feature</title>
      <subtitle>Use rules to choose date format</subtitle>

      <sect2 id="cond-date-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <emphasis role="bold">Dependencies:</emphasis>
            </term>
            <listitem>
              <para>
                <link linkend="nested-if">nested-if feature</link>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="cond-date-intro">
        <title>Introduction</title>
        <para>
          The <quote>Conditional Dates</quote> feature allows you to construct
          <link linkend="index-format">$index_format</link> expressions based
          on the age of the email.
        </para>
        <para>
          NeoMutt's default <literal>$index_format</literal> displays email
          dates in the form: abbreviated-month day-of-month –
          <quote>Jan 14</quote>.
        </para>
        <para>
          The format is configurable but only per-mailbox. This feature allows
          you to configure the display depending on the age of the email.
        </para>

        <table id="table-cond-date-scheme">
          <title>Potential Formatting Scheme</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Email Sent</entry>
                <entry>Format</entry>
                <entry>Example</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>Today</entry>
                <entry><literal>%H:%M</literal></entry>
                <entry>13:23</entry>
              </row>
              <row>
                <entry>This Month</entry>
                <entry><literal>%a %d</literal></entry>
                <entry>Thu 17</entry>
              </row>
              <row>
                <entry>This Year</entry>
                <entry><literal>%b %d</literal></entry>
                <entry>Dec 10</entry>
              </row>
              <row>
                <entry>Older than 1 Year</entry>
                <entry><literal>%m/%y</literal></entry>
                <entry>06/14</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          For an explanation of the date formatting strings, see
          <literal>strftime(3).</literal>
        </para>
        <para>
          By carefully picking your formats, the dates can remain unambiguous
          and compact.
        </para>
        <para>
          NeoMutt's conditional format strings have the form: (whitespace
          introduced for clarity)
        </para>
        <screen>%&lt; TEST ? TRUE &amp; FALSE &gt;</screen>
        <para>
          The examples below use the test <quote>%[</quote> – the date of the
          message in the local timezone. They will also work with
          <quote>%(</quote> – the local time that the message arrived.
        </para>
        <para>
          The date tests are of the form:
        </para>
        <screen>%&lt;[nX? TRUE &amp; FALSE &gt;</screen>
        <itemizedlist>
          <listitem>
            <para>
              <quote>n</quote> is an optional count (defaults to 1 if missing)
            </para>
          </listitem>
          <listitem>
            <para>
              <quote>X</quote> is the time period
            </para>
          </listitem>
        </itemizedlist>

        <table id="table-cond-date-format-codes">
          <title>Date Formatting Codes</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Letter</entry>
                <entry>Time Period</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>y</entry>
                <entry>Years</entry>
              </row>
              <row>
                <entry>m</entry>
                <entry>Months</entry>
              </row>
              <row>
                <entry>w</entry>
                <entry>Weeks</entry>
              </row>
              <row>
                <entry>d</entry>
                <entry>Days</entry>
              </row>
              <row>
                <entry>H</entry>
                <entry>Hours</entry>
              </row>
              <row>
                <entry>M</entry>
                <entry>Minutes</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <table id="table-cond-date-example-tests">
          <title>Example Date Tests</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Test</entry>
                <entry>Meaning</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>%[y</literal></entry>
                <entry>This year</entry>
              </row>
              <row>
                <entry><literal>%[1y</literal></entry>
                <entry>This year</entry>
              </row>
              <row>
                <entry><literal>%[6m</literal></entry>
                <entry>In the last 6 months</entry>
              </row>
              <row>
                <entry><literal>%[w</literal></entry>
                <entry>This week</entry>
              </row>
              <row>
                <entry><literal>%[d</literal></entry>
                <entry>Today</entry>
              </row>
              <row>
                <entry><literal>%[4H</literal></entry>
                <entry>In the last 4 hours</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <sect3 id="cond-date-example1">
          <title>Example 1</title>
          <para>
            We start with a one-condition test.
          </para>

          <table id="table-cond-date-example1">
            <title>Example 1</title>
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>Test</entry>
                  <entry>Date Range</entry>
                  <entry>Format String</entry>
                  <entry>Example</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><literal>%[1m</literal></entry>
                  <entry>This month</entry>
                  <entry><literal>%[%b %d]</literal></entry>
                  <entry>Dec 10</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry>Older</entry>
                  <entry><literal>%[%Y-%m-%d]</literal></entry>
                  <entry>2015-04-23</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            The $index_format string would contain:
          </para>
          <screen>%&lt;[1m?%[%b %d]&amp;%[%Y-%m-%d]&gt;</screen>
          <para>
            Reparsed a little, for clarity, you can see the test condition and
            the two format strings.
          </para>

<screen>
%&lt;[1m?        &amp;           &gt;

      %[%b %d] %[%Y-%m-%d]
</screen>

        </sect3>

        <sect3 id="cond-date-example2">
          <title>Example 2</title>
          <para>
            This example contains three test conditions and four date formats.
          </para>

          <table id="table-cond-date-example2">
            <title>Example 2</title>
            <tgroup cols="4">
              <thead>
                <row>
                  <entry>Test</entry>
                  <entry>Date Range</entry>
                  <entry>Format String</entry>
                  <entry>Example</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><literal>%[d</literal></entry>
                  <entry>Today</entry>
                  <entry><literal>%[%H:%M ]</literal></entry>
                  <entry>12:34</entry>
                </row>
                <row>
                  <entry><literal>%[m</literal></entry>
                  <entry>This month</entry>
                  <entry><literal>%[%a %d]</literal></entry>
                  <entry>Thu 12</entry>
                </row>
                <row>
                  <entry><literal>%[y</literal></entry>
                  <entry>This year</entry>
                  <entry><literal>%[%b %d]</literal></entry>
                  <entry>Dec 10</entry>
                </row>
                <row>
                  <entry></entry>
                  <entry>Older</entry>
                  <entry><literal>%[%m/%y ]</literal></entry>
                  <entry>06/15</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>
            The $index_format string would contain:
          </para>

<screen>
%&lt;[y?%&lt;[m?%&lt;[d?%[%H:%M ]&amp;%[%a %d]&gt;&amp;%[%b %d]&gt;&amp;%[%m/%y ]&gt;
</screen>

          <para>
            Reparsed a little, for clarity, you can see the test conditions and
            the four format strings.
          </para>

<screen>
%&lt;[y?                                       &amp;%[%m/%y ]&gt;  Older
     %&lt;[m?                        &amp;%[%b %d]&gt;             This year
          %&lt;[d?         &amp;%[%a %d]&gt;                       This month
               %[%H:%M ]                                 Today
</screen>

          <para>
            This a another view of the same example, with some whitespace for
            clarity.
          </para>

<screen>
%&lt;[y? %&lt;[m? %&lt;[d? AAA &amp; BBB &gt; &amp; CCC &gt; &amp; DDD &gt;
</screen>

          <literallayout>AAA = %[%H:%M ] BBB = %[%a %d] CCC = %[%b %d] DDD = %[%m/%y ]</literallayout>
        </sect3>
      </sect2>

      <sect2 id="cond-date-variables">
        <title>Variables</title>
        <para>
          The <quote>Conditional Dates</quote> feature doesn't have any config
          of its own. It modifies the behavior of the format strings.
        </para>
      </sect2>

      <sect2 id="cond-date-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the cond-date feature.</emphasis>

<emphasis role="comment">#</emphasis>
<emphasis role="comment"># The default index_format is:</emphasis>
<emphasis role="comment">#       '%4C %Z %{%b %d} %-15.15L (%&lt;l?%4l&amp;%4c&gt;) %s'</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment"># We replace the date field '%{%b %d}', giving:</emphasis>
set index_format='%4C %Z %&lt;[y?%&lt;[m?%&lt;[d?%[%H:%M ]&amp;%[%a %d]&gt;&amp;%[%b %d]&gt;&amp;%[%m/%y ]&gt; %-15.15L (%&lt;l?%4l&amp;%4c&gt;) %s'
<emphasis role="comment"># Test  Date Range  Format String  Example</emphasis>
<emphasis role="comment"># --------------------------------------------</emphasis>
<emphasis role="comment"># %[d   Today       %[%H:%M ]      12:34</emphasis>
<emphasis role="comment"># %[m   This month  %[%a %d]       Thu 12</emphasis>
<emphasis role="comment"># %[y   This year   %[%b %d]       Dec 10</emphasis>
<emphasis role="comment">#  —    Older       %[%m/%y ]      06/15</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="cond-date-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="index-format">$index_format</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="nested-if">nested-if feature</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>strftime(3)</literal>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="cond-date-known-bugs">
        <title>Known Bugs</title>
        <para>
          Date parsing doesn't quite do what you expect. <quote>1w</quote>
          doesn't mean the <quote>in the last 7 days</quote>, but
          <quote><emphasis>this</emphasis> week</quote>. This doesn't match the
          normal NeoMutt behavior: for example <literal>~d&gt;1w</literal>
          means emails dated in the last 7 days.
        </para>
      </sect2>

      <sect2 id="cond-date-credits">
        <title>Credits</title>
        <para>
          Aaron Schrab, Eric Davis, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="encrypt-to-self">
      <title>Encrypt-to-Self Feature</title>
      <subtitle>Save a self-encrypted copy of emails</subtitle>

      <sect2 id="encrypt-to-self-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-07-23
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="encrypt-to-self-intro">
        <title>Introduction</title>
        <para>
          Once you encrypt an email to someone you cannot read it. This is good
          for security, but bad for record-keeping. If you wanted to keep
          a copy of an encrypted email you could set
          <link linkend="fcc-clear">$fcc_clear</link>.
        </para>
        <para>
          A better option is to enable
          <link linkend="smime-self-encrypt">$smime_self_encrypt</link>, then
          set <link linkend="smime-default-key">$smime_default_key</link> to
          your personal S/MIME key id.
        </para>

<screen>
set smime_self_encrypt = yes
set smime_default_key  = bb345e23.0
</screen>

        <para>
          Or, if you use PGP,
          <link linkend="pgp-self-encrypt">$pgp_self_encrypt</link>, then set
          <link linkend="pgp-default-key">$pgp_default_key</link> to your
          personal PGP key id.
        </para>

<screen>
set pgp_self_encrypt = yes
set pgp_default_key  = A4AF18C5582473BD35A1E9CE78BB3D480042198E
</screen>

        <para>
          If you have different key for signing, then you can set
          <link linkend="pgp-sign-as">$pgp_sign_as</link> or
          <link linkend="smime-sign-as">$smime_sign_as</link> respectively.
        </para>
      </sect2>

      <sect2 id="encrypt-to-self-variables">
        <title>Variables</title>

        <table id="table-encrypt-self-variables">
          <title>encrypt-self Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>pgp_default_key</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>pgp_self_encrypt</literal></entry>
                <entry>boolean</entry>
                <entry><literal>yes</literal></entry>
              </row>
              <row>
                <entry><literal>pgp_sign_as</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>smime_default_key</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>smime_self_encrypt</literal></entry>
                <entry>boolean</entry>
                <entry><literal>yes</literal></entry>
              </row>
              <row>
                <entry><literal>smime_sign_as</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="encrypt-to-self-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the encrypt-to-self feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Save a copy of outgoing email, encrypted to yourself</emphasis>
set pgp_self_encrypt = "yes"
set pgp_default_key = "PGP-KEY"
<emphasis role="comment"># set pgp_sign_as = "PGP-SIGNING-KEY"</emphasis>

<emphasis role="comment"># Save a copy of outgoing email, encrypted to yourself</emphasis>
set smime_self_encrypt = "yes"
set smime_default_key = "SMIME-KEY"
<emphasis role="comment"># set smime_sign_as = "SMIME-SIGNING-KEY"</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="encrypt-to-self-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="encrypt-to-self-credits">
        <title>Credits</title>
        <para>
          Omen Wild, Richard Russon, Guillaume Brogi
        </para>
      </sect2>
    </sect1>

    <sect1 id="encryption-info">
      <title>Encryption information block</title>
      <subtitle>Show a block of encryption information about a message
      </subtitle>

      <sect2 id="encryption-info-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2024-04-10
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> Gpgme
        </para>
      </sect2>

      <sect2 id="encryption-info-intro">
        <title>Introduction</title>
        <para>
          This feature shows a block of information that provides
          information about an encrypted message;
          mainly about its recipients.
          Here is an example of such a block:
        </para>
<screen>
[-- Begin encryption information --]
Recipient: RSA key, ID 00C14A7DBBDD521C
Recipient: RSA key, ID 0000000000000000
[-- End encryption information --]
</screen>
      </sect2>

      <sect2 id="encryption-info-usage">
        <title>Usage</title>
        <para>
          It's enabled by default.
          The variable to control it is
          <literal>crypt_encryption_info</literal>.
        </para>
      </sect2>

      <sect2 id="encryption-info-credits">
        <title>Credits</title>
        <para>
          Alejandro Colomar, Richard Russon, наб
        </para>
      </sect2>
    </sect1>

    <sect1 id="fmemopen">
      <title>Fmemopen Feature</title>
      <subtitle>Replace some temporary files with memory buffers</subtitle>

      <sect2 id="fmemopen-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <emphasis role="bold">Dependencies:</emphasis>
            </term>
            <listitem>
              <para>
                <literal>open_memstream()</literal>,
                <literal>fmemopen()</literal> from glibc
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          This feature can be enabled by running <literal>configure</literal>
          with the option <literal>--fmemopen</literal>
        </para>
      </sect2>

      <sect2 id="fmemopen-intro">
        <title>Introduction</title>
        <para>
          The <quote>fmemopen</quote> feature speeds up some searches.
        </para>
        <para>
          This feature changes a few places where NeoMutt creates temporary
          files. It replaces them with in-memory buffers. This should improve
          the performance when searching the header or body using the
          <link linkend="thorough-search">$thorough_search</link> option.
        </para>
        <para>
          There are no user-configurable parts.
        </para>
        <para>
          This feature depends on <literal>open_memstream()</literal> and
          <literal>fmemopen()</literal>. They are provided by glibc. Without
          them, NeoMutt will simply create temporary files.
        </para>
      </sect2>

      <sect2 id="fmemopen-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="compile-time-features">Compile-Time Features</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>fmemopen(3)</literal>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="fmemopen-known-bugs">
        <title>Known Bugs</title>
        <para>
          <ulink url="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=834408">debian bug 834408</ulink>
        </para>
      </sect2>

      <sect2 id="fmemopen-credits">
        <title>Credits</title>
        <para>
          Julius Plenz, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="forgotten-attachment">
      <title>Forgotten Attachment Feature</title>
      <subtitle>Alert user when (s)he forgets to attach a file to an outgoing
      email.</subtitle>

      <sect2 id="forgotten-attachment-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-09-10
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="forgotten-attachment-intro">
        <title>Introduction</title>
        <para>
          The <quote>forgotten-attachment</quote> feature provides a new
          setting for NeoMutt that alerts the user if the message body contains
          a certain keyword but there are no attachments added. This is meant
          to ensure that the user does not forget to attach a file after
          promising to do so in the mail. The attachment keyword will not be
          scanned in text matched by
          <link linkend="quote-regex">$quote_regex</link>.
        </para>
      </sect2>

      <sect2 id="forgotten-attachment-variables">
        <title>Variables</title>

        <table id="table-forgotten-attachment-variables">
          <title>forgotten-attachment Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>abort_noattach_regex</literal></entry>
                <entry>regular expression</entry>
                <entry><literal>\\&lt;(attach|attached|attachments?)\\&gt;</literal></entry>
              </row>
              <row>
                <entry><literal>abort_noattach</literal></entry>
                <entry>quadoption</entry>
                <entry>
                  <literal>no</literal>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="forgotten-attachment-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the forgotten-attachment feature.</emphasis>

<emphasis role="comment"># The 'forgotten-attachment' feature provides a new setting for NeoMutt that</emphasis>
<emphasis role="comment"># alerts the user if the message body contains a certain regular expression but there are</emphasis>
<emphasis role="comment"># no attachments added. This is meant to ensure that the user does not forget</emphasis>
<emphasis role="comment"># to attach a file after promising to do so in the mail.</emphasis>

<emphasis role="comment"># Ask if the user wishes to abort sending if $abort_noattach_regex is found in the</emphasis>
<emphasis role="comment"># body, but no attachments have been added</emphasis>
<emphasis role="comment"># It can be set to:</emphasis>
<emphasis role="comment">#    "yes"     : always abort</emphasis>
<emphasis role="comment">#    "ask-yes" : ask whether to abort</emphasis>
<emphasis role="comment">#    "no"      : send the mail</emphasis>
set abort_noattach = no
<emphasis role="comment"># Search for the following regular expression in the body of the email</emphasis>
<emphasis role="comment"># English: attach, attached, attachment, attachments</emphasis>
set abort_noattach_regex = "\\&lt;attach(|ed|ments?)\\&gt;"
<emphasis role="comment"># Nederlands:</emphasis>
<emphasis role="comment"># set abort_noattach_regex = "\\&lt;(bijvoegen|bijgevoegd|bijlage|bijlagen)\\&gt;"</emphasis>
<emphasis role="comment"># Deutsch:</emphasis>
<emphasis role="comment"># set abort_noattach_regex = "\\&lt;(anhängen|angehängt|anhang|anhänge|hängt an)\\&gt;"</emphasis>
<emphasis role="comment"># Français:</emphasis>
<emphasis role="comment"># set abort_noattach_regex = "\\&lt;(attaché|attachés|attache|attachons|joint|jointe|joints|jointes|joins|joignons)\\&gt;"</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="forgotten-attachment-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="attach-menu">The Attachment Menu</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="attachment-map">The Attachment Menu key mappings</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="forgotten-attachment-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="forgotten-attachment-credits">
        <title>Credits</title>
        <para>
          Darshit Shah, Richard Russon, Johannes Weißl, Steven Ragnarök
        </para>
      </sect2>
    </sect1>

    <sect1 id="global-hooks">
      <title>Global Hooks</title>
      <subtitle>Define actions to run globally within NeoMutt</subtitle>

      <sect2 id="global-hooks-intro">
        <title>Introduction</title>
        <para>
          These hooks are called when global events take place in NeoMutt.
        </para>
        <itemizedlist>
          <title>Run a command...</title>
          <listitem>
            <para>
              <emphasis role="bold">timeout-hook</emphasis> – periodically
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">startup-hook</emphasis> – when NeoMutt
              starts up, before opening the first mailbox
            </para>
          </listitem>
          <listitem>
            <para>
              <emphasis role="bold">shutdown-hook</emphasis> – NeoMutt shuts
              down, before closing the last mailbox
            </para>
          </listitem>
        </itemizedlist>
        <para>
          The commands are NeoMutt commands. If you want to run an external
          shell command, you need to run them like this:
        </para>
<screen>
startup-hook 'echo `action.sh ARGS`'
</screen>
        <para>
          The single quotes prevent the
          backticks from being expanded. The <literal>echo</literal> command
          prevents an empty command error.
        </para>

        <sect3 id="timeout-hook-intro">
          <title>Timeout Hook</title>
          <subtitle>Run a command periodically</subtitle>
          <para>
            <emphasis role="bold">Since:</emphasis> NeoMutt 2016-08-08
          </para>
          <para>
            This feature implements a new hook that is called periodically when
            NeoMutt checks for new mail. This hook is called every
            <literal>$timeout</literal> seconds.
          </para>
        </sect3>

        <sect3 id="startup-hook-intro">
          <title>Startup Hook</title>
          <subtitle>Run a command when NeoMutt starts up, before opening the
            first mailbox</subtitle>
          <para>
            <emphasis role="bold">Since:</emphasis> NeoMutt 2016-11-25
          </para>
          <para>
            This feature implements a new hook that is called when NeoMutt
            first starts up, but before opening the first mailbox. This is most
            likely to be useful to users of
            <link linkend="notmuch">notmuch</link>.
          </para>
        </sect3>

        <sect3 id="shutdown-hook">
          <title>Shutdown Hook</title>
          <subtitle>Run a command when NeoMutt shuts down, before closing the last
          mailbox</subtitle>
          <para>
            <emphasis role="bold">Since:</emphasis> NeoMutt 2016-11-25
          </para>
          <para>
            This feature implements a hook that is called when NeoMutt shuts
            down, but before closing the last mailbox. This is most likely to
            be useful to users of <link linkend="notmuch">notmuch</link>.
          </para>
        </sect3>
      </sect2>

      <sect2 id="global-hooks-commands">
        <title>Commands</title>
        <cmdsynopsis>
          <command>timeout-hook</command>
          <arg choice="plain">
            <replaceable class="parameter">command</replaceable>
          </arg>
        </cmdsynopsis>
        <cmdsynopsis>
          <command>startup-hook</command>
          <arg choice="plain">
            <replaceable class="parameter">command</replaceable>
          </arg>
        </cmdsynopsis>
        <cmdsynopsis>
          <command>shutdown-hook</command>
          <arg choice="plain">
            <replaceable class="parameter">command</replaceable>
          </arg>
        </cmdsynopsis>
      </sect2>

      <sect2 id="global-hooks-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the global hooks feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># COMMANDS – shown with an example argument</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># After $timeout seconds of inactivity, run this NeoMutt command</emphasis>
timeout-hook 'exec sync-mailbox'
<emphasis role="comment"># When NeoMutt first loads, run this NeoMutt command</emphasis>
startup-hook 'exec sync-mailbox'
<emphasis role="comment"># When NeoMutt quits, run this NeoMutt command</emphasis>
shutdown-hook 'exec sync-mailbox'

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="timeout-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="timeout">$timeout</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="global-hooks-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="global-hooks-credits">
        <title>Credits</title>
        <para>
          Armin Wolfermann, Richard Russon, Thomas Adam
        </para>
      </sect2>
    </sect1>

    <sect1 id="hccompress">
      <title>Header Cache Compression Feature</title>
      <subtitle>Options for compressing the header cache files</subtitle>

      <sect2 id="hccompress-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2020-02-22
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis>
          <link linkend="caching">header cache</link>
        </para>
      </sect2>

      <sect2 id="hccompress-intro">
        <title>Introduction</title>
        <para>
          The Header Cache Compression Feature can be used for speeding up the
          loading of large mailboxes.  Also the space used on disk can be shrunk
          by about 50% - depending on the compression method being used.
        </para>
        <para>
          The implementation sits on top of the header caching functions. So the
          header cache compression can be used together with all available
          database backends.
        </para>
      </sect2>

      <sect2 id="hccompress-variables">
        <title>Variables</title>
        <table id="table-hccompress-variables">
          <title>Header Cache Compression Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>header_cache_compress_method</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>header_cache_compress_level</literal></entry>
                <entry>number</entry>
                <entry><literal>1</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          The <literal>header_cache_compress_method</literal> can be
          <emphasis>(empty)</emphasis> - which means, that no header cache
          compression should be used. But when set to <emphasis>lz4</emphasis>,
          <emphasis>zlib</emphasis> or <emphasis>zstd</emphasis> - then the
          compression is turned on.
        </para>
        <para>
          The <literal>header_cache_compress_level</literal> defines the
          compression level, which should be used together with the selected
          <literal>header_cache_compress_method</literal>. Here is an overview
          of the possible settings:
          <table id="table-hccompress-variables-leveldefines">
            <title>Header Cache Compression Methods and it's Levels</title>
            <tgroup cols="3">
              <thead>
                <row>
                  <entry>Method Name</entry>
                  <entry>Min</entry>
                  <entry>Max</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><literal>lz4</literal></entry>
                  <entry>1</entry>
                  <entry>12</entry>
                </row>
                <row>
                  <entry><literal>zlib</literal></entry>
                  <entry>1</entry>
                  <entry>9</entry>
                </row>
                <row>
                  <entry><literal>zstd</literal></entry>
                  <entry>1</entry>
                  <entry>22</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
        </para>
      </sect2>
      <sect2 id="hccompress-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the header cache compression feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
set header_cache_compress_level = 1
set header_cache_compress_method = ""

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="hccompress-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="hccompress-credits">
        <title>Credits</title>
        <para>
          Tino Reichardt
        </para>
      </sect2>
  </sect1>

    <sect1 id="ifdef">
      <title>Ifdef Feature</title>
      <subtitle>Conditional config options</subtitle>

      <sect2 id="ifdef-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="ifdef-intro">
        <title>Introduction</title>
        <para>
          The <quote>ifdef</quote> feature introduces three new commands to
          NeoMutt and allows you to share one config file between versions of
          NeoMutt that may have different features compiled in.
        </para>

<screen>
ifdef  symbol "config-command [args...]"  <emphasis role="comment"># If a symbol is defined</emphasis>
ifndef symbol "config-command [args...]"  <emphasis role="comment"># If a symbol is not defined</emphasis>
finish                                    <emphasis role="comment"># Finish reading the current file</emphasis>
</screen>

        <table id="ifdef-symbols">
          <title>ifdef Symbols</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Example Symbol</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <literal>sidebar_format</literal>
                </entry>
                <entry>Config variable</entry>
              </row>
              <row>
                <entry>
                  <literal>status-color</literal>,
                  <literal>imap</literal>
                </entry>
                <entry>Compiled-in feature</entry>
              </row>
              <row>
                <entry>
                <literal>pgp-menu</literal>,
                <literal>group-related</literal></entry>
                <entry>Function</entry>
              </row>
              <row>
                <entry>
                <literal>index-format-hook</literal>,
                <literal>tag-transforms</literal></entry>
                <entry>Command</entry>
              </row>
              <row>
                <entry>
                  <literal>my_var</literal>
                </entry>
                <entry>My variable</entry>
              </row>
              <row>
                <entry>
                <literal>lmdb</literal>,
                <literal>tokyocabinet</literal></entry>
                <entry>Store (database)</entry>
              </row>
              <row>
                <entry>
                <literal>HOME</literal>,
                <literal>COLUMNS</literal></entry>
                <entry>Environment variable</entry>
              </row>
            </tbody>
          </tgroup>
        </table>

        <para>
          A list of compile-time symbols can be seen in the output of the
          command <screen>neomutt -v</screen> (in the
          <quote>Compile options</quote> section).
        </para>
        <para>
          <literal>finish</literal> is particularly useful when combined with
          <literal>ifndef</literal>. e.g.
        </para>

<screen>
<emphasis role="comment"># Sidebar config file</emphasis>
ifndef sidebar finish
</screen>

      </sect2>

      <sect2 id="ifdef-commands">
        <title>Commands</title>
        <cmdsynopsis>
          <command>ifdef</command>
          <arg choice="plain">
            <replaceable class="parameter">symbol</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">&quot;config-command [args...]&quot;</replaceable>
          </arg>
          <command>ifndef</command>
          <arg choice="plain">
            <replaceable class="parameter">symbol</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">&quot;config-command [args...]&quot;</replaceable>
          </arg>
          <command>finish</command>
        </cmdsynopsis>
      </sect2>

      <sect2 id="ifdef-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the ifdef feature.</emphasis>

<emphasis role="comment"># This feature introduces three useful commands which allow you to share</emphasis>
<emphasis role="comment"># one config file between versions of NeoMutt that may have different</emphasis>
<emphasis role="comment"># features compiled in.</emphasis>

<emphasis role="comment">#   ifdef  symbol "config-command [args...]"</emphasis>
<emphasis role="comment">#   ifndef symbol "config-command [args...]"</emphasis>
<emphasis role="comment">#   finish</emphasis>
<emphasis role="comment"># The 'ifdef' command tests whether NeoMutt understands the name of</emphasis>
<emphasis role="comment"># a variable, environment variable, function, command or compile-time symbol.</emphasis>

<emphasis role="comment"># If it does, then it executes a config command.</emphasis>

<emphasis role="comment"># The 'ifndef' command tests whether a symbol does NOT exist.</emphasis>

<emphasis role="comment"># The 'finish' command tells NeoMutt to stop reading current config file.</emphasis>

<emphasis role="comment"># If the 'trash' variable exists, set it.</emphasis>
ifdef trash 'set trash=~/Mail/trash'
<emphasis role="comment"># If the 'PS1' environment variable exists, source config file.</emphasis>
ifdef PS1 'source .neomutt/interactive.rc'
<emphasis role="comment"># If the 'tag-pattern' function exists, bind a key to it.</emphasis>
ifdef tag-pattern 'bind index &lt;F6&gt; tag-pattern'
<emphasis role="comment"># If the 'imap-fetch-mail' command exists, read my IMAP config.</emphasis>
ifdef imap-fetch-mail 'source ~/.neomutt/imap.rc'
<emphasis role="comment"># If the compile-time symbol 'sidebar' does not exist, then</emphasis>
<emphasis role="comment"># stop reading the current config file.</emphasis>
ifndef sidebar finish

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="ifdef-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="ifdef-credits">
        <title>Credits</title>
        <para>
          Cedric Duval, Matteo F. Vescovi, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="index-color">
      <title>Index Color Feature</title>
      <subtitle>Custom rules for theming the email index</subtitle>

      <sect2 id="index-color-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <emphasis role="bold">Dependencies:</emphasis>
            </term>
            <listitem>
              <para>
                <link linkend="status-color">status-color feature</link>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="index-color-intro">
        <title>Introduction</title>
        <para>
          The <quote>index-color</quote> feature allows you to specify colors
          for individual parts of the email index. e.g. Subject, Author, Flags.
        </para>
        <para>
          First choose which part of the index you'd like to color. Then, if
          needed, pick a pattern to match.
        </para>
        <para>
          Note: The pattern does not have to refer to the object you wish to
          color. e.g.
        </para>
        <screen>color index_author red default "~sneomutt"</screen>
        <para>
          The author appears red when the subject (~s) contains
          <quote>neomutt</quote>.
        </para>
      </sect2>

      <sect2 id="index-color-colors">
        <title>Colors</title>
        <para>
          All the colors default to <literal>default</literal>, i.e. unset.
        </para>
        <para>
          The index objects can be themed using the <literal>color</literal>
          command and an optional pattern. A missing pattern is equivalent to
          a match-all <literal>.*</literal> pattern.
        </para>

<screen>
color index-object foreground background [pattern]
</screen>

        <table id="table-index-color-colors">
          <title>Index Colors</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Object</entry>
                <entry>Highlights</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>index</literal></entry>
                <entry>Entire index line</entry>
              </row>
              <row>
                <entry><literal>index_author</literal></entry>
                <entry>Author name, %A %a %F %L %n</entry>
              </row>
              <row>
                <entry><literal>index_collapsed</literal></entry>
                <entry>Number of messages in a collapsed thread, %M</entry>
              </row>
              <row>
                <entry><literal>index_date</literal></entry>
                <entry>Date field</entry>
              </row>
              <row>
                <entry><literal>index_flags</literal></entry>
                <entry>Message flags, %S %Z</entry>
              </row>
              <row>
                <entry><literal>index_label</literal></entry>
                <entry>Message label, %y %Y</entry>
              </row>
              <row>
                <entry><literal>index_number</literal></entry>
                <entry>Message number, %C</entry>
              </row>
              <row>
                <entry><literal>index_size</literal></entry>
                <entry>Message size, %c %cr %l</entry>
              </row>
              <row>
                <entry><literal>index_subject</literal></entry>
                <entry>Subject, %s</entry>
              </row>
              <row>
                <entry><literal>index_tag</literal></entry>
                <entry>Message tags, <literal>%G</literal></entry>
              </row>
              <row>
                <entry><literal>index_tags</literal></entry>
                <entry>Transformed message tags, <literal>%g</literal> <literal>%J</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="index-color-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the index-color feature.</emphasis>

<emphasis role="comment"># Entire index line</emphasis>
color index white black '.*'
<emphasis role="comment"># Author name, %A %a %F %L %n</emphasis>
<emphasis role="comment"># Give the author column a dark grey background</emphasis>
color index_author default color234 '.*'
<emphasis role="comment"># Highlight a particular from (~f)</emphasis>
color index_author brightyellow color234 '~fRay Charles'
<emphasis role="comment"># Message flags, %S %Z</emphasis>
<emphasis role="comment"># Highlight the flags for flagged (~F) emails</emphasis>
color index_flags default red '~F'
<emphasis role="comment"># Subject, %s</emphasis>
<emphasis role="comment"># Look for a particular subject (~s)</emphasis>
color index_subject brightcyan default '~s\(closes #[0-9]+\)'
<emphasis role="comment"># Number of messages in a collapsed thread, %M</emphasis>
color index_collapsed default brightblue
<emphasis role="comment"># Date field</emphasis>
color index_date green default
<emphasis role="comment"># Message label, %y %Y</emphasis>
color index_label default brightgreen
<emphasis role="comment"># Message number, %C</emphasis>
color index_number red default
<emphasis role="comment"># Message size, %c %cr %l</emphasis>
color index_size cyan default

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="index-color-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="regex">Regular Expressions</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="patterns">Patterns</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="index-format">$index_format</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="color">Color command</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="status-color">Status-Color feature</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="index-color-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="index-color-credits">
        <title>Credits</title>
        <para>
          Christian Aichinger, Christoph <quote>Myon</quote> Berg,
          Elimar Riesebieter, Eric Davis, Vladimir Marek, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="initials">
      <title>Initials Expando Feature</title>
      <subtitle>Expando for author's initials</subtitle>

      <sect2 id="initials-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="initials-intro">
        <title>Introduction</title>
        <para>
          The <quote>initials</quote> feature adds an expando (%I) for an
          author's initials.
        </para>
        <para>
          The index panel displays a list of emails. Its layout is controlled
          by the <link linkend="index-format">$index_format</link> variable.
          Using this expando saves space in the index panel. This can be useful
          if you are regularly working with a small set of people.
        </para>
      </sect2>

      <sect2 id="initials-variables">
        <title>Variables</title>
        <para>
          This feature has no config of its own. It adds an expando which can
          be used in the <link linkend="index-format">$index_format</link>
          variable.
        </para>
      </sect2>

      <sect2 id="initials-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the initials feature.</emphasis>

<emphasis role="comment"># The 'initials' feature has no config of its own.</emphasis>

<emphasis role="comment"># It adds an expando for an author's initials,</emphasis>
<emphasis role="comment"># which can be used in the 'index_format' variable.</emphasis>

<emphasis role="comment"># The default 'index_format' is:</emphasis>
set index_format='%4C %Z %{%b %d} %-15.15L (%&lt;l?%4l&amp;%4c&gt;) %s'
<emphasis role="comment"># Where %L represents the author/recipient</emphasis>
<emphasis role="comment"># This might look like:</emphasis>
<emphasis role="comment">#       1   + Nov 17 David Bowie   Changesbowie    ( 689)</emphasis>
<emphasis role="comment">#       2   ! Nov 17 Stevie Nicks  Rumours         ( 555)</emphasis>
<emphasis role="comment">#       3   + Nov 16 Jimi Hendrix  Voodoo Child    ( 263)</emphasis>
<emphasis role="comment">#       4   + Nov 16 Debbie Harry  Parallel Lines  ( 540)</emphasis>
<emphasis role="comment"># Using the %I expando:</emphasis>
set index_format='%4C %Z %{%b %d} %I (%&lt;l?%4l&amp;%4c&gt;) %s'
<emphasis role="comment"># This might look like:</emphasis>
<emphasis role="comment">#       1   + Nov 17 DB Changesbowie    ( 689)</emphasis>
<emphasis role="comment">#       2   ! Nov 17 SN Rumours         ( 555)</emphasis>
<emphasis role="comment">#       3   + Nov 16 JH Voodoo Child    ( 263)</emphasis>
<emphasis role="comment">#       4   + Nov 16 DH Parallel Lines  ( 540)</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="initials-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="index-format">$index_format</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="index-color">index-color feature</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="folder-hook">folder-hook</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="initials-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="initials-credits">
        <title>Credits</title>
        <para>
          Vsevolod Volkov, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="kyoto-cabinet">
      <title>Kyoto Cabinet Feature</title>
      <subtitle>Kyoto Cabinet backend for the header cache</subtitle>

      <sect2 id="kyoto-cabinet-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-10-02
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <emphasis role="bold">Dependencies:</emphasis>
            </term>
            <listitem>
              <para>
                <ulink url="https://dbmx.net/kyotocabinet/">Kyoto Cabinet libraries</ulink>
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>
          To check if NeoMutt supports Kyoto Cabinet, look for
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <quote>kyoto</quote> in the NeoMutt version.
            </para>
          </listitem>
          <listitem>
            <para>
              <quote>+hcache</quote> in the compile options
            </para>
          </listitem>
          <listitem>
            <para>
              <quote>hcache backend: kyotocabinet</quote> in the NeoMutt
              version
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="kyoto-cabinet-intro">
        <title>Introduction</title>
        <para>
          This feature adds support for using Kyoto Cabinet, the successor to
          Tokyo Cabinet, as a storage backend for NeoMutt's header cache
          (hcache). It is enabled at configure time with the
          <emphasis>--with-kyotocabinet=&lt;path&gt;</emphasis> switch.
        </para>
      </sect2>

      <sect2 id="kyoto-cabinet-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="caching">Local Caching</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="https://dbmx.net/kyotocabinet/">Kyoto Cabinet</ulink>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="kyoto-cabinet-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="kyoto-cabinet-credits">
        <title>Credits</title>
        <para>
          Clemens Lang
        </para>
      </sect2>
    </sect1>

    <sect1 id="limit-current-thread">
      <title>Limit Current Thread Feature</title>
      <subtitle>Focus on one Email Thread</subtitle>

      <sect2 id="limit-current-thread-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-28
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="limit-current-thread-intro">
        <title>Introduction</title>
        <para>
          This feature adds a new way of using the
          <link linkend="tuning-search">Limit Command</link>. The
          <literal>&lt;limit-current-thread&gt;</literal> function restricts
          the view to just the current thread. Setting the limit (the
          <literal>l</literal> key) to <quote>all</quote> will restore the full
          email list.
        </para>
      </sect2>

      <sect2 id="limit-current-thread-functions">
        <title>Functions</title>
        <para>
          Limit-current-thread adds the following function to NeoMutt. By
          default, it is not bound to a key.
        </para>

        <table id="table-limit-current-thread-functions">
          <title>Limit-Current-Thread Functions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;limit-current-thread&gt;</literal></entry>
                <entry>Limit view to current thread</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="limit-current-thread-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the limit-current-thread feature.</emphasis>

<emphasis role="comment"># Limit view to current thread</emphasis>
bind index &lt;esc&gt;L limit-current-thread

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="limit-current-thread-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="limit-current-thread-credits">
        <title>Credits</title>
        <para>
          David Sterba, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="lmdb">
      <title>LMDB Feature</title>
      <subtitle>LMDB backend for the header cache</subtitle>

      <sect2 id="lmdb-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-07-23
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="lmdb-intro">
        <title>Introduction</title>
        <para>
          This feature adds support for using LMDB as a storage backend for
          NeoMutt's header cache (hcache). It is enabled at configure time with
          the <emphasis>--with-lmdb=&lt;path&gt;</emphasis> switch.
        </para>
        <note>
          <para>
            It is not recommended to store the lmdb database on a shared drive.
          </para>
        </note>
      </sect2>

      <sect2 id="lmdb-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="caching">Local Caching</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="lmdb-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="lmdb-credits">
        <title>Credits</title>
        <para>
          Pietro Cerutti, Jan-Piet Mens, Clemens Lang
        </para>
      </sect2>
    </sect1>

    <sect1 id="multiple-fcc">
      <title>Multiple FCC Feature</title>
      <subtitle>Save multiple copies of outgoing mail</subtitle>

      <sect2 id="multiple-fcc-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-08-08
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="multiple-fcc-intro">
        <title>Introduction</title>
        <para>
          This feature allows the user to save outgoing emails in multiple
          folders.
        </para>
        <para>
          Folders should be listed separated by commas,
          <emphasis role="bold">but no spaces</emphasis>.
        </para>
        <para>
          The <quote>fcc</quote> field of an email can be set in two ways:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              The &lt;edit-fcc&gt; command in the compose menu (default key:
              <quote>f</quote>)
            </para>
          </listitem>
          <listitem>
            <para>
              Creating a <literal>fcc-hook</literal> in your
              <literal>.neomuttrc</literal>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="multiple-fcc-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="record">$record</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="fcc-hook">fcc-hook</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="multiple-fcc-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="multiple-fcc-credits">
        <title>Credits</title>
        <para>
          Omen Wild, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="nested-if">
      <title>Nested If Feature</title>
      <subtitle>Allow complex nested conditions in format strings</subtitle>

      <sect2 id="nested-if-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="nested-if-intro">
        <title>Introduction</title>
        <para>
          NeoMutt's format strings can contain embedded if-then-else
          conditions. They are of the form:
        </para>
        <screen>%?VAR?TRUE&amp;FALSE?</screen>
        <para>
          If the variable <quote>VAR</quote> has a value greater than zero,
          print the <quote>TRUE</quote> string, otherwise print the
          <quote>FALSE</quote> string.
        </para>
        <para>
          e.g. <literal>%?S?Size: %S&amp;Empty?</literal>
        </para>
        <para>
          Which can be read as:
        </para>
        <literallayout>if (%S &gt; 0) { print "Size: %S" } else { print "Empty" }</literallayout>
        <para>
          These conditions are useful, but in NeoMutt they cannot be nested
          within one another. This feature uses the notation
          <literal>%&lt;VAR?TRUE&amp;FALSE&gt;</literal> and allows them to be
          nested.
        </para>
        <para>
          The <literal>%&lt;...&gt;</literal> notation was used to format the
          current local time. but that's not really very useful since NeoMutt
          has no means of refreshing the screen periodically.
        </para>
        <para>
          A simple nested condition might be: (Some whitespace has been
          introduced for clarity)
        </para>

<screen>
%&lt;x? %&lt;y? XY &amp; X &gt; &amp; %&lt;y? Y &amp; NONE &gt; &gt;  Conditions
     %&lt;y? XY &amp; X &gt;                      x&gt;0
          XY                            x&gt;0,y&gt;0
               X                        x&gt;0,y=0
</screen>

<screen>
%&lt;x? %&lt;y? XY &amp; X &gt; &amp; %&lt;y? Y &amp; NONE &gt; &gt;  Conditions
                     %&lt;y? Y &amp; NONE &gt;    x=0
                          Y             x=0,y&gt;0
                              NONE      x=0,y=0
</screen>

        <para>
          Equivalent to:
        </para>
        <literallayout>if (x &gt; 0) {
  if (y &gt; 0) {
    print 'XY'
  } else {
    print 'X'
  }
} else {
  if (y &gt; 0) {
    print 'Y'
  } else {
    print 'NONE'
  }
}</literallayout>
        <para>
          Examples:
        </para>

<screen>
set index_format='%4C %Z %{%b %d} %-25.25n %s%&gt; %&lt;M?%M Msgs &amp;%&lt;l?%l Lines&amp;%c Bytes&gt;&gt;'
</screen>

        <literallayout>if a thread is folded display the number of messages (%M)
else if we know how many lines in the message display lines in message (%l)
else display the size of the message in bytes (%c)</literallayout>

<screen>
set index_format='%4C %Z %{%b %d} %-25.25n %&lt;M?[%M] %s&amp;%s%* %&lt;l?%l&amp;%c&gt;&gt;'
</screen>

        <literallayout>if a thread is folded display the number of messages (%M) and the subject (%s)
else if we know how many lines are in the message display subject (%s) and the lines in message (%l)
else display the subject (%s) and the size of the message in bytes (%c)</literallayout>

        <note>
          <para>
            If you wish to use angle brackets <literal>&lt; &gt;</literal> in
            a nested condition, then it's necessary to escape them, e.g.
          </para>
          <screen>set index_format='%&lt;M?\&lt;%M\&gt;&amp;%s&gt;'</screen>
        </note>
      </sect2>

      <sect2 id="nested-if-variables">
        <title>Variables</title>
        <para>
          The <quote>nested-if</quote> feature doesn't have any config of its
          own. It modifies the behavior of the format strings.
        </para>
      </sect2>

      <sect2 id="nested-if-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the nested-if feature.</emphasis>

<emphasis role="comment"># This feature uses the format: '%&lt;VAR?TRUE&amp;FALSE&gt;' for conditional</emphasis>
<emphasis role="comment"># format strings that can be nested.</emphasis>

<emphasis role="comment"># Example 1</emphasis>
<emphasis role="comment"># if a thread is folded</emphasis>
<emphasis role="comment">#       display the number of messages (%M)</emphasis>
<emphasis role="comment"># else if we know how many lines in the message</emphasis>
<emphasis role="comment">#       display lines in message (%l)</emphasis>
<emphasis role="comment"># else display the size of the message in bytes (%c)</emphasis>
set index_format='%4C %Z %{%b %d} %-25.25n %s%&gt; %&lt;M?%M Msgs &amp;%&lt;l?%l Lines&amp;%c Bytes&gt;&gt;'

<emphasis role="comment"># Example 2</emphasis>
<emphasis role="comment"># if a thread is folded</emphasis>
<emphasis role="comment">#       display the number of messages (%M)</emphasis>
<emphasis role="comment">#       display the subject (%s)</emphasis>
<emphasis role="comment"># else if we know how many lines in the message</emphasis>
<emphasis role="comment">#       display lines in message (%l)</emphasis>
<emphasis role="comment"># else</emphasis>
<emphasis role="comment">#       display the size of the message in bytes (%c)</emphasis>
set index_format='%4C %Z %{%b %d} %-25.25n %&lt;M?[%M] %s&amp;%s%* %&lt;l?%l&amp;%c&gt;&gt;'

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="nested-if-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="cond-date">cond-date feature</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="index-format">$index_format</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="status-format">$status_format</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="nested-if-known-bugs">
        <title>Known Bugs</title>
        <para>
          This feature is hard to understand
        </para>
      </sect2>

      <sect2 id="nested-if-credits">
        <title>Credits</title>
        <para>
          David Champion, Richard Russon, Aleksa Sarai
        </para>
      </sect2>
    </sect1>

    <sect1 id="new-mail-hook">
      <title>New Mail Feature</title>
      <subtitle>Execute a command upon the receipt of new mail.</subtitle>

      <sect2 id="new-mail-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-07-23
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="new-mail-intro">
        <title>Introduction</title>
        <para>
          This feature enables the new_mail_command setting, which can be used
          to execute a custom script (e.g. a notification handler) upon
          receiving a new mail.
        </para>
        <para>
          The command string can contain expandos, such as
          <literal>%n</literal> for the number of new messages. For a complete
          list, see: <link linkend="status-format">$status_format</link>.
        </para>
        <note>
          <para>
            When the notification is sent, the folder of the new mail is no
            longer known. This is a limitation of NeoMutt. The `%f` expando
            will show the open folder.
          </para>
          <para>
            When using Maildir local mailboxes, you must set
            <link linkend="check-new">$check_new</link> config variable for
            this feature to work.
          </para>
        </note>
        <para>
          For example in Linux you can use (most distributions already provide
          notify-send):
        </para>

<screen>
set new_mail_command="notify-send --icon='/home/santiago/Pictures/neomutt.png' \
  'New Email' '%n new messages, %u unread.' &amp;"
</screen>

        <para>
          And in OS X you will need to install a command line interface for
          Notification Center, for example
          <ulink url="https://github.com/julienXX/terminal-notifier">terminal-notifier</ulink>:
        </para>

<screen>
set new_mail_command="terminal-notifier -title '%v' -subtitle 'New Mail' \
  -message '%n new messages, %u unread.' -activate 'com.apple.Terminal'"
</screen>

      </sect2>

      <sect2 id="new-mail-variables">
        <title>Variables</title>

        <table id="table-new-mail-variables">
          <title>New Mail Command Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>new_mail_command</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="new-mail-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the new-mail feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Set the command you want NeoMutt to execute upon the receipt of a new email</emphasis>
set new_mail_command = ""
<emphasis role="comment"># Linux example:</emphasis>
<emphasis role="comment"># set new_mail_command="notify-send --icon='/home/santiago/Pictures/neomutt.png' \</emphasis>
<emphasis role="comment">#   'New Email in %f' '%n new messages, %u unread.' &amp;"</emphasis>
<emphasis role="comment"># OS X example:</emphasis>
<emphasis role="comment"># set new_mail_command="terminal-notifier -title '%v' -subtitle 'New Mail in %f' \</emphasis>
<emphasis role="comment">#   -message '%n new messages, %u unread.' -activate 'com.apple.Terminal'"</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="new-mail-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="folder-hook">folder-hook</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="new-mail-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="new-mail-credits">
        <title>Credits</title>
        <para>
          Yoshiki Vazquez-Baeza, Santiago Torres-Arias, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="nntp">
      <title>NNTP Feature</title>
      <subtitle>Talk to a Usenet news server</subtitle>

      <sect2 id="nntp-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-05-30
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="nntp-intro">
        <title>Introduction</title>
        <para>
          Reading news via NNTP
        </para>
        <para>
          NeoMutt can read from a news server using NNTP.
        </para>
        <para>
          The default news server can be obtained from the
          <literal>$NNTPSERVER</literal> environment variable or from the
          <literal>/etc/nntpserver</literal> file. Like in other news readers,
          information about the subscribed newsgroups is saved in the file
          specified by the <link linkend="newsrc">$newsrc</link> variable. You
          can open a newsgroup with the function
          <literal>&lt;change-newsgroup&gt;</literal>
        </para>
        <para>
          When browsing the list of newsgroups on the server the function
          <literal>&lt;subscribe&gt;</literal> can be used to tell NeoMutt the
          groups of interest to you.  This list is stored in the
          <link linkend="newsrc">$newsrc</link> file, so NeoMutt remembers it
          across invocations (see also
          <link linkend="save-unsubscribed">$save_unsubscribed</link>).  With the
          <literal>&lt;unsubscribe&gt;</literal> function a group can be deleted
          from that list.  You can also specify the list of interesting groups
          with the <link linkend="mailboxes">mailboxes</link> command in your
          config file.
        </para>
        <para>
          When checking for new messages, NeoMutt only polls the subscribed
          newsgroups.
        </para>
        <para>
          The variable <link linkend="news-cache-dir">$news_cache_dir</link>
          can be used to point to a directory. NeoMutt will create a hierarchy
          of subdirectories named like the account and newsgroup the cache is
          for. The hierarchy is also used to store header cache if NeoMutt was
          compiled with <link linkend="header-caching">header cache</link>
          support.
        </para>
      </sect2>

      <sect2 id="nntp-variables">
        <title>Variables</title>

        <table id="table-nntp-variables">
          <title>NNTP Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>ask_followup_to</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>ask_x_comment_to</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>catchup_newsgroup</literal></entry>
                <entry>quad</entry>
                <entry><literal>ask-yes</literal></entry>
              </row>
              <row>
                <entry><literal>followup_to_poster</literal></entry>
                <entry>quad</entry>
                <entry><literal>ask-yes</literal></entry>
              </row>
              <row>
                <entry><literal>group_index_format</literal></entry>
                <entry>string</entry>
                <entry><literal>%4C %M%N %5s %-45.45f %d</literal></entry>
              </row>
              <row>
                <entry><literal>inews</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>newsgroups_charset</literal></entry>
                <entry>string</entry>
                <entry><literal>utf-8</literal></entry>
              </row>
              <row>
                <entry><literal>newsrc</literal></entry>
                <entry>string</entry>
                <entry><literal>~/.newsrc</literal></entry>
              </row>
              <row>
                <entry><literal>news_cache_dir</literal></entry>
                <entry>string</entry>
                <entry><literal>~/.neomutt</literal></entry>
              </row>
              <row>
                <entry><literal>news_server</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>nntp_authenticators</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>nntp_context</literal></entry>
                <entry>number</entry>
                <entry><literal>1000</literal></entry>
              </row>
              <row>
                <entry><literal>nntp_listgroup</literal></entry>
                <entry>boolean</entry>
                <entry><literal>yes</literal></entry>
              </row>
              <row>
                <entry><literal>nntp_load_description</literal></entry>
                <entry>boolean</entry>
                <entry><literal>yes</literal></entry>
              </row>
              <row>
                <entry><literal>nntp_pass</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>nntp_poll</literal></entry>
                <entry>number</entry>
                <entry><literal>60</literal></entry>
              </row>
              <row>
                <entry><literal>nntp_user</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
              </row>
              <row>
                <entry><literal>post_moderated</literal></entry>
                <entry>quad</entry>
                <entry><literal>ask-yes</literal></entry>
              </row>
              <row>
                <entry><literal>save_unsubscribed</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>show_new_news</literal></entry>
                <entry>boolean</entry>
                <entry><literal>yes</literal></entry>
              </row>
              <row>
                <entry><literal>show_only_unread</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>x_comment_to</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="nntp-functions">
        <title>Functions</title>
        <para>
          NNTP adds the following functions to NeoMutt. By default, none of
          them are bound to keys.
        </para>

        <table id="table-nntp-functions">
          <title>NNTP Functions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>browser,index</entry>
                <entry><literal>&lt;catchup&gt;</literal></entry>
                <entry>mark all articles in newsgroup as read</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;change-newsgroup&gt;</literal></entry>
                <entry>open a different newsgroup</entry>
              </row>
              <row>
                <entry>compose</entry>
                <entry><literal>&lt;edit-followup-to&gt;</literal></entry>
                <entry>edit the Followup-To field</entry>
              </row>
              <row>
                <entry>compose</entry>
                <entry><literal>&lt;edit-newsgroups&gt;</literal></entry>
                <entry>edit the newsgroups list</entry>
              </row>
              <row>
                <entry>compose</entry>
                <entry><literal>&lt;edit-x-comment-to&gt;</literal></entry>
                <entry>edit the X-Comment-To field</entry>
              </row>
              <row>
                <entry>attach,index,pager</entry>
                <entry><literal>&lt;followup-message&gt;</literal></entry>
                <entry>followup to newsgroup</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;post-message&gt;</literal></entry>
                <entry>post message to newsgroup</entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry><literal>&lt;reload-active&gt;</literal></entry>
                <entry>load list of all newsgroups from NNTP server</entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry><literal>&lt;subscribe&gt;</literal></entry>
                <entry>subscribe to current mbox (IMAP/NNTP only)</entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry><literal>&lt;subscribe-pattern&gt;</literal></entry>
                <entry>subscribe to newsgroups matching a pattern</entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry><literal>&lt;uncatchup&gt;</literal></entry>
                <entry>mark all articles in newsgroup as unread</entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry><literal>&lt;unsubscribe&gt;</literal></entry>
                <entry>unsubscribe from current mbox (IMAP/NNTP only)</entry>
              </row>
              <row>
                <entry>browser</entry>
                <entry><literal>&lt;unsubscribe-pattern&gt;</literal></entry>
                <entry>unsubscribe from newsgroups matching a pattern</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;change-newsgroup-readonly&gt;</literal></entry>
                <entry>open a different newsgroup in read only mode</entry>
              </row>
              <row>
                <entry>attach,index,pager</entry>
                <entry><literal>&lt;forward-to-group&gt;</literal></entry>
                <entry>forward to newsgroup</entry>
              </row>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;get-children&gt;</literal></entry>
                <entry>get all children of the current message</entry>
              </row>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;get-parent&gt;</literal></entry>
                <entry>get parent of the current message</entry>
              </row>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;reconstruct-thread&gt;</literal></entry>
                <entry>reconstruct thread containing current message</entry>
              </row>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;get-message&gt;</literal></entry>
                <entry>get message with Message-Id</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="nntp-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the nntp feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
set ask_followup_to = no
set ask_x_comment_to = no
set catchup_newsgroup = ask-yes
set followup_to_poster = ask-yes
set group_index_format = '%4C %M%N %5s  %-45.45f %d'
set inews = ''
set newsgroups_charset = utf-8
set newsrc = '~/.newsrc'
set news_cache_dir = '~/.neomutt'
set news_server = ''
set nntp_authenticators = ''
set nntp_context = 1000
set nntp_listgroup = yes
set nntp_load_description = yes
set nntp_pass = ''
set nntp_poll = 60
set nntp_user = ''
set post_moderated = ask-yes
set save_unsubscribed = no
set show_new_news = yes
set show_only_unread = no
set x_comment_to = no
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># FUNCTIONS – shown with an example mapping</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># mark all articles in newsgroup as read</emphasis>
bind browser,index y catchup
<emphasis role="comment"># open a different newsgroup</emphasis>
bind index,pager i change-newsgroup
<emphasis role="comment"># edit the Followup-To field</emphasis>
bind compose o edit-followup-to
<emphasis role="comment"># edit the newsgroups list</emphasis>
bind compose N edit-newsgroups
<emphasis role="comment"># edit the X-Comment-To field</emphasis>
bind compose x edit-x-comment-to
<emphasis role="comment"># followup to newsgroup</emphasis>
bind attach,index,pager F followup-message
<emphasis role="comment"># post message to newsgroup</emphasis>
bind index,pager P post-message
<emphasis role="comment"># load list of all newsgroups from NNTP server</emphasis>
bind browser g reload-active
<emphasis role="comment"># subscribe to current mbox (IMAP/NNTP only)</emphasis>
bind browser s subscribe
<emphasis role="comment"># subscribe to newsgroups matching a pattern</emphasis>
bind browser S subscribe-pattern
<emphasis role="comment"># mark all articles in newsgroup as unread</emphasis>
bind browser Y uncatchup
<emphasis role="comment"># unsubscribe from current mbox (IMAP/NNTP only)</emphasis>
bind browser u unsubscribe
<emphasis role="comment"># unsubscribe from newsgroups matching a pattern</emphasis>
bind browser U unsubscribe-pattern
<emphasis role="comment"># open a different newsgroup in read only mode</emphasis>
bind index,pager \ei change-newsgroup-readonly
<emphasis role="comment"># forward to newsgroup</emphasis>
bind attach,index,pager \eF forward-to-group
<emphasis role="comment"># get all children of the current message</emphasis>
<emphasis role="comment"># bind index ??? get-children</emphasis>
<emphasis role="comment"># get parent of the current message</emphasis>
bind index \eG get-parent
<emphasis role="comment"># reconstruct thread containing current message</emphasis>
<emphasis role="comment"># bind index ??? reconstruct-thread</emphasis>
<emphasis role="comment"># get message with Message-Id</emphasis>
bind index \CG get-message
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="nntp-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="nntp-credits">
        <title>Credits</title>
        <para>
          Vsevolod Volkov, Felix von Leitner, Richard Russon
        </para>
      </sect2>
  </sect1>

    <sect1 id="custom-tags">
      <title>Custom backend based Tags Feature</title>
      <subtitle>Implements Notmuch tags and Imap keywords</subtitle>

      <sect2 id="custom-tags-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2017-10-16
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="quasi-delete">quasi-delete feature</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="index-color">index-color feature</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="custom-tags-intro">
          <title>Introduction</title>
          <para>
            Some backends allow to index and tag mail without storing the tags
            within the mail envelope. Two backends are currently implementing
            this feature. Notmuch handles them natively and IMAP stores them in
            custom IMAP keywords.
          </para>
      </sect2>

      <sect2 id="custom-tags-variables">
        <title>Variables</title>

        <table id="table-custom-tags-variables">
          <title>Custom tags Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>hidden_tags</literal></entry>
                <entry>string</entry>
                <entry>
                  <literal>unread,draft,flagged,passed,replied,attachment,signed,encrypted</literal>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="custom-tags-functions">
        <title>Functions</title>
        <para>
          Notmuch adds the following functions to NeoMutt. By default, none of
          them are bound to keys.
        </para>

        <table id="table-custom-tags-functions">
          <title>Notmuch/IMAP Functions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;modify-labels&gt;</literal></entry>
                <entry>
                  add, remove, or toggle tags: IMAP: edit the tags list
                  Notmuch: [+]&lt;tag&gt; to add, -&lt;tag&gt; to remove,
                  !&lt;tag&gt; to toggle(notmuch) tags. Note: Tab completion
                  of tag names is available
                </entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;modify-labels-then-hide&gt;</literal></entry>
                <entry>
                  add, remove, or toggle tags IMAP: edit the tags list Notmuch:
                  [+]&lt;tag&gt; to add, -&lt;tag&gt; to remove, !&lt;tag&gt;
                  to toggle labels and then hide or unhide the message by
                  changing the "quasi-deleted" to match if it would be shown
                  when requerying. Normal redisplay rules apply here, so the
                  user must call &lt;sync-mailbox&gt; for the changes to be
                  displayed. Note: Tab completion of tag names is available.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="custom-tags-commands">
        <title>Commands</title>
        <cmdsynopsis>
          <command>tag-transforms</command>
          <arg choice="plain">
            <replaceable class="parameter">tag</replaceable>
            <arg choice="plain">
              <replaceable class="parameter">transformed-string</replaceable>
            </arg>
          </arg>
          <group choice="req" rep="repeat">
            <arg choice="plain">
              <replaceable class="parameter">tag</replaceable>
              <arg choice="plain">
                <replaceable class="parameter">transformed-string</replaceable>
              </arg>
            </arg>
          </group>
          <command>tag-formats</command>
          <arg choice="plain">
            <replaceable class="parameter">tag</replaceable>
            <arg choice="plain">
              <replaceable class="parameter">format-string</replaceable>
            </arg>
          </arg>
          <group choice="req" rep="repeat">
            <arg choice="plain">
              <replaceable class="parameter">tag</replaceable>
              <arg choice="plain">
                <replaceable class="parameter">format-string</replaceable>
              </arg>
            </arg>
          </group>
        </cmdsynopsis>
      </sect2>

      <sect2 id="custom-tags-colors">
        <title>Colors</title>
        <para>
          Adds the objects, below, to index-color feature.
          The objects can take an optional pattern.
        </para>

        <table id="table-custom-tags-colors">
          <title>Index Colors</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Object</entry>
                <entry>Highlights</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>index_tag</literal></entry>
                <entry>an individual message tag, %G, uses tag name</entry>
              </row>
              <row>
                <entry><literal>index_tags</literal></entry>
                <entry>the transformed message tags, %g or %J</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="custom-tags-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the custom tags feature.</emphasis>

<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># This variable specifies private notmuch tags which should not be printed</emphasis>
<emphasis role="comment"># on screen (index, pager).</emphasis>
set hidden_tags = "unread,draft,flagged,passed,replied,attachment,signed,encrypted"
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># FUNCTIONS – shown with an example mapping</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># modify (notmuch/imap) tags</emphasis>
bind index,pager \` modify-labels
<emphasis role="comment"># modify (notmuch/imap) tag non-interactively.</emphasis>
macro index,pager tt "&lt;modify-labels&gt;!todo\n" "Toggle the 'todo' tag"
<emphasis role="comment"># modify labels and then hide message</emphasis>
<emphasis role="comment"># bind index,pager ??? modify-labels-then-hide</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># COMMANDS – shown with an example</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Replace some tags with icons</emphasis>
<emphasis role="comment"># tag-transforms tag transformed-string { tag transformed-string ...}</emphasis>
<emphasis role="comment"># tag-transforms "inbox"   "i"   \</emphasis>
<emphasis role="comment">#                "unread"  "u"   \</emphasis>
<emphasis role="comment">#                "replied" "↻ "  \</emphasis>
<emphasis role="comment">#                "sent"    "➥ "  \</emphasis>
<emphasis role="comment">#                "todo"    "T"   \</emphasis>
<emphasis role="comment">#                "deleted" "DEL" \</emphasis>
<emphasis role="comment">#                "invites" "CAL"</emphasis>

<emphasis role="comment"># The formats must start with 'G' and the entire sequence is case sensitive.</emphasis>
<emphasis role="comment"># tag-formats tag format-string { tag format-string ...}</emphasis>
<emphasis role="comment"># tag-formats "inbox"   "GI" \</emphasis>
<emphasis role="comment">#             "unread"  "GU" \</emphasis>
<emphasis role="comment">#             "replied" "GR" \</emphasis>
<emphasis role="comment">#             "sent"    "GS" \</emphasis>
<emphasis role="comment">#             "todo"    "Gt" \</emphasis>
<emphasis role="comment">#             "deleted" "GD" \</emphasis>
<emphasis role="comment">#             "invites" "Gi"</emphasis>

<emphasis role="comment"># Now instead of using '%g' or '%J' in your $index_format, which lists all tags</emphasis>
<emphasis role="comment"># in a non-deterministic order, you can something like the following which puts</emphasis>
<emphasis role="comment"># a transformed tag name in a specific spot on the index line:</emphasis>
<emphasis role="comment"># set index_format='%4C %S %[%y.%m.%d] %-18.18n %&lt;GU?%GU&amp; &gt; %&lt;GR?%GR&amp; &gt; %&lt;GI?%GI&amp; &gt; %s'</emphasis>

<emphasis role="comment"># The %G formatting sequence may display all tags including tags hidden by</emphasis>
<emphasis role="comment"># hidden_tags.</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># COLORS – some unpleasant examples are given</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># These symbols are added to the index-color feature:</emphasis>
<emphasis role="comment"># an individual message tag, %G, uses tag name</emphasis>
color index_tag red white "inbox"
<emphasis role="comment"># the transformed message tags, %g</emphasis>
color index_tags green default
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>
      <sect2 id="custom-tags-credits">
        <title>Credits</title>
        <para>
          Mehdi Abaakouk, Richard Russon, Bernard 'Guyzmo' Pratz
        </para>
      </sect2>
    </sect1>

    <sect1 id="notmuch">
      <title>Notmuch Feature</title>
      <subtitle>Email search engine</subtitle>

      <sect2 id="notmuch-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-17
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis>
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="quasi-delete">quasi-delete feature</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="index-color">index-color feature</link>
            </para>
          </listitem>
          <listitem>
            <para>
              Notmuch libraries
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="notmuch-intro">
        <title>Introduction</title>
        <para>
          Notmuch is an email fulltext indexing and tagging engine.
        </para>
        <itemizedlist>
          <listitem>
            <para>
              For more information, see:
              <ulink url="https://notmuchmail.org">https://notmuchmail.org/</ulink>
            </para>
          </listitem>
          <listitem>
            <para>
              More examples:
              <ulink url="https://notmuchmail.org/mutttips/">https://notmuchmail.org/mutttips/</ulink>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="notmuch-using">
        <title>Using Notmuch</title>

        <sect3 id="notmuch-folder-url">
          <title>Folders URL</title>
          <para>
            <emphasis role="bold">notmuch://[&lt;path&gt;][?&lt;item&gt;=&lt;name&gt;[&amp; ...]]</emphasis>
          </para>
          <para>
            The &lt;path&gt; is an absolute path to the directory where the
            notmuch database is found as returned by
            <quote>notmuch config get database.path</quote> command. Note that
            the &lt;path&gt; should NOT include <literal>.notmuch</literal>
            directory name.
          </para>
          <para>
            If the "&lt;path&gt;" is not defined then
            <literal>$nm_default_url</literal> or <literal>$folder</literal> is
            used, for example:
          </para>

<screen>
set nm_default_url = "notmuch:///home/foo/maildir"
virtual-mailboxes "My INBOX" "notmuch://?query=tag:inbox"
</screen>

        </sect3>

        <sect3 id="notmuch-items">
          <title>Items</title>
          <para>
            <emphasis role="bold">query=&lt;string&gt;</emphasis>
          </para>
          <para>
            See SEARCH SYNTAX in notmuch man page. Don't forget to use
            operators (<quote>and</quote>/<quote>or</quote>) in your queries.
          </para>
          <para>
            Note that proper URL should not contain blank space and all
            <quote>bad</quote> chars should be encoded, for example
          </para>
          <para>
            <literal>tag:AAA and tag:BBB</literal> – encoding -&gt;
            <literal>tag:AAA%20and%20tag:BBB</literal>
          </para>
          <para>
            but NeoMutt config file parser is smart enough to accept space in
            quoted strings. It means that you can use
          </para>
          <para>
            <literal>notmuch:///foo?query=tag:AAA and tag:BBB</literal>
          </para>
          <para>
            in your config files to keep things readable.
          </para>
          <para>
            For more details about Xapian queries, see:
            <ulink url="https://xapian.org/docs/queryparser.html">https://xapian.org/docs/queryparser.html</ulink>
          </para>
          <para>
            <emphasis role="bold">limit=&lt;number&gt;</emphasis>
          </para>
          <para>
            Restricts number of messages/threads in the result. The default
            limit is nm_db_limit.
          </para>
          <para>
            Due to a limitation with <literal>libnotmuch</literal>, unread and
            flagged message count may be inaccurate with limit statements.
            <literal>libnotmuch</literal> cannot return a specific tag count
            within the first X messages of a query.
          </para>
          <para>
            <emphasis role="bold">type=&lt;threads|messages&gt;</emphasis>
          </para>
          <para>
            Reads all matching messages or whole-threads. The default is
            'messages' or nm_query_type.
          </para>
        </sect3>
      </sect2>

      <sect2 id="notmuch-variables">
        <title>Variables</title>

        <table id="table-notmuch-variables">
          <title>Notmuch Variables</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
                <entry>Note</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>nm_config_file</literal></entry>
                <entry>path</entry>
                <entry><literal>auto</literal></entry>
                <entry>
                  Configuration file for the notmuch database. Either a path,
                  <literal>auto</literal> for detecting a config. file, or
                  empty for no configuration file. Only useful for notmuch
                  0.32+.
                </entry>
              </row>
              <row>
                <entry><literal>nm_config_profile</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
                <entry>
                  Configuration profile for the notmuch database. Only useful
                  for notmuch 0.32+.
                </entry>
              </row>
              <row>
                <entry><literal>nm_db_limit</literal></entry>
                <entry>number</entry>
                <entry><literal>0</literal></entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>nm_default_url</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
                <entry>
                  Must use format: <literal>notmuch://&lt;absolute path&gt;</literal>
                </entry>
              </row>
              <row>
                <entry><literal>nm_exclude_tags</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>nm_flagged_tag</literal></entry>
                <entry>string</entry>
                <entry><literal>flagged</literal></entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>nm_open_timeout</literal></entry>
                <entry>number</entry>
                <entry><literal>5</literal></entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>nm_query_type</literal></entry>
                <entry>string</entry>
                <entry><literal>messages</literal></entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>nm_query_window_current_position</literal></entry>
                <entry>number</entry>
                <entry><literal>0</literal></entry>
                <entry>Position of current search window</entry>
              </row>
              <row>
                <entry><literal>nm_query_window_current_search</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
                <entry>Current search parameters</entry>
              </row>
              <row>
                <entry><literal>nm_query_window_duration</literal></entry>
                <entry>number</entry>
                <entry><literal>0</literal></entry>
                <entry>
                  Duration between start and end dates for windowed notmuch query.
                  This corresponds to a bounded notmuch <literal>date:</literal> query.
                  See <literal>notmuch-search-terms</literal> manual page for more info.

                  Value of <literal>0</literal> disables windowed queries unless
                  <literal>nm_query_window_enable=yes</literal>
                </entry>
              </row>
              <row>
                <entry><literal>nm_query_window_enable</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
                <entry>
                  Enables windowed notmuch queries for
                  <literal>nm_query_window_duration = 0</literal>
                </entry>
              </row>
              <row>
                <entry><literal>nm_query_window_or_terms</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
                <entry>
                  Additional notmuch search terms to always include in the
                  window even if they're outside the date range. This turns the
                  window from <literal>date:...</literal> to
                  <literal>date:... or (additional search terms.)</literal>

                  For example, to always include flagged, unread emails, set to
                  <literal>tag:flagged and tag:unread</literal>
                </entry>
              </row>
              <row>
                <entry><literal>nm_query_window_timebase</literal></entry>
                <entry>string</entry>
                <entry><literal>week</literal></entry>
                <entry>
                  Time base for windowed notmuch queries.

                  Must be one of: <literal>hour</literal>, <literal>day</literal>,
                  <literal>week</literal>, <literal>month</literal>, or
                  <literal>year</literal>
                </entry>
              </row>
              <row>
                <entry><literal>nm_record</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>nm_record_tags</literal></entry>
                <entry>string</entry>
                <entry>(empty)</entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>nm_unread_tag</literal></entry>
                <entry>string</entry>
                <entry><literal>unread</literal></entry>
                <entry></entry>
              </row>
              <row>
                <entry><literal>virtual_spool_file</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
                <entry>
                  Unnecessary since <link linkend="spool-file">$spool_file</link>
                  supports mailbox descriptions.
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          More variables about tags configuration can be found in
          <link linkend="custom-tags-variables">Custom backend Tags Feature</link>
        </para>
      </sect2>

      <sect2 id="notmuch-functions">
        <title>Functions</title>
        <para>
          Notmuch adds the following functions to NeoMutt. By default, none of
          them are bound to keys.
        </para>

        <table id="table-notmuch-functions">
          <title>Notmuch Functions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;change-vfolder&gt;</literal></entry>
                <entry>
                  switch to another virtual folder, a new folder maybe be
                  specified by vfolder description (see virtual-mailboxes) or
                  URL. the default is next vfolder with unread messages
                </entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;entire-thread&gt;</literal></entry>
                <entry>
                  read entire thread of the current message
                </entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-toggle-virtual&gt;</literal></entry>
                <entry>
                  toggle between mailboxes and virtual mailboxes
                </entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;vfolder-from-query&gt;</literal></entry>
                <entry>
                  generate virtual folder from notmuch search query. Note: TAB
                  completion of 'tag:' names is available.
                </entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;vfolder-from-query-readonly&gt;</literal></entry>
                <entry>
                  The same as <literal>&lt;vfolder-from-query&gt;</literal>; however, the mailbox
                  will be read-only.
                </entry>
              </row>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;vfolder-window-forward&gt;</literal></entry>
                <entry>
                  generate virtual folder by moving the query's time window
                  forward
                </entry>
              </row>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;vfolder-window-backward&gt;</literal></entry>
                <entry>
                  generate virtual folder by moving the query's time window
                  backward
                </entry>
              </row>
              <row>
                <entry>index</entry>
                <entry><literal>&lt;vfolder-window-reset&gt;</literal></entry>
                <entry>
                  generate virtual folder by moving the query's time window to
                  the present
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          More functions about tags can be found in
          <link linkend="custom-tags-functions">Custom backend Tags Feature</link>
        </para>
      </sect2>

      <sect2 id="notmuch-commands">
        <title>Commands</title>
        <cmdsynopsis>
          <command>virtual-mailboxes</command>
          <arg choice="plain">
            <replaceable class="parameter">description</replaceable>
            <arg choice="plain">
              <replaceable class="parameter">notmuch-URL</replaceable>
            </arg>
          </arg>
          <group choice="req" rep="repeat">
            <arg choice="plain">
              <replaceable class="parameter">description</replaceable>
              <arg choice="plain">
                <replaceable class="parameter">notmuch-URL</replaceable>
              </arg>
            </arg>
          </group>
          <command>unvirtual-mailboxes</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable class="parameter">*</replaceable>
            </arg>
            <arg choice="plain" rep="repeat">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>
          <literal>virtual-mailboxes</literal> is like the
          <link linkend="mailboxes">mailboxes</link> command, except that it
          takes a description.  The mailbox will be watched for new mail and
          will appear in the sidebar.
        </para>
        <para>
          <literal>unvirtual-mailboxes</literal> is identical to the
          <literal>unmailboxes</literal> command.
        </para>
        <para>
          More commands about tags can be found in
          <link linkend="custom-tags-commands">Custom backend Tags Feature</link>
        </para>
      </sect2>

      <sect2 id="notmuch-colors">
        <title>Colors</title>
        <para>
          See
          <link linkend="custom-tags-colors">Custom backend Tags colors</link>
        </para>
      </sect2>

      <sect2 id="notmuch-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the notmuch feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># This variable specifies notmuch query limit.</emphasis>
set nm_db_limit = 0
<emphasis role="comment"># This variable specifies the default Notmuch database in format:</emphasis>
<emphasis role="comment"># notmuch://&lt;absolute path&gt;</emphasis>
set nm_default_url = ""
<emphasis role="comment"># The messages tagged with these tags are excluded and not loaded</emphasis>
<emphasis role="comment"># from notmuch DB to NeoMutt unless specified explicitly.</emphasis>
set nm_exclude_tags = ""
<emphasis role="comment"># This option specifies timeout for Notmuch database. Default is 5 seconds.</emphasis>
set nm_open_timeout = 5
<emphasis role="comment"># This variable specifies notmuch query type, supported types: 'threads' and</emphasis>
<emphasis role="comment"># 'messages'.</emphasis>
set nm_query_type = messages
<emphasis role="comment"># When writing a message in the NeoMutt record (see $record in the NeoMutt docs),</emphasis>
<emphasis role="comment"># also add it to the notmuch DB. Replies inherit the tags from the original email.</emphasis>
set nm_record = no
<emphasis role="comment"># Tags modifications to the messages stored in the NeoMutt record.</emphasis>
<emphasis role="comment"># example:</emphasis>
<emphasis role="comment">#   set record = "~/sent-mails"</emphasis>
<emphasis role="comment">#   set nm_record = yes</emphasis>
<emphasis role="comment">#   set nm_record_tags = "-inbox,archive,me"</emphasis>
set nm_record_tags = ""
<emphasis role="comment"># This variable specifies the notmuch tag used for unread messages.</emphasis>
set nm_unread_tag = unread
<emphasis role="comment"># When set, NeoMutt will use the first virtual mailbox (see virtual-mailboxes)</emphasis>
<emphasis role="comment"># as a spool_file.</emphasis>
set virtual_spool_file = no
<emphasis role="comment"># setup time window preferences</emphasis>
<emphasis role="comment"># first setup the duration, and then the time unit of that duration</emphasis>
<emphasis role="comment"># when set to 0 (the default) the search window feature is disabled</emphasis>
<emphasis role="comment"># unless explicitly enabled with nm_query_window_enable.</emphasis>
set nm_query_window_enable=yes
set nm_query_window_duration=2
set nm_query_window_timebase="week" # or "hour", "day", "week", "month", "year"
<emphasis role="comment"># Extend query window to always show mail matching these terms.</emphasis>
set nm_query_window_or_terms="tag:unread and tag:flagged"
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># FUNCTIONS – shown with an example mapping</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># open a different virtual folder</emphasis>
bind index,pager X change-vfolder
<emphasis role="comment"># read entire thread of the current message</emphasis>
bind index,pager + entire-thread
<emphasis role="comment"># generate virtual folder from query</emphasis>
bind index,pager \eX vfolder-from-query
<emphasis role="comment"># generate virtual folder from query with time window</emphasis>
bind index &lt; vfolder-window-backward
bind index &gt; vfolder-window-forward
<emphasis role="comment"># toggle between mailboxes and virtual mailboxes</emphasis>
<emphasis role="comment"># bind index,pager ??? sidebar-toggle-virtual</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># COMMANDS – shown with an example</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># virtual-mailboxes description notmuch-URL { description notmuch-URL ...}</emphasis>
<emphasis role="comment"># virtual-mailboxes "Climbing" "notmuch://?query=climbing"</emphasis>
<emphasis role="comment"># unvirtual-mailboxes { * | mailbox ...}</emphasis>
<emphasis role="comment">#</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="notmuch-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="compile-time-features">Compile-Time Features</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="notmuch-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="notmuch-credits">
        <title>Credits</title>
        <para>
          Karel Zak, Chris Mason, Christoph Rissner, David Riebenbauer,
          David Sterba, David Wilson, Don Zickus, Eric Davis, Jan Synacek,
          Jeremiah C. Foster, Josh Poimboeuf, Kirill A. Shutemov, Luke Macken,
          Mantas Mikulėnas, Patrick Brisbin, Philippe Le Brouster,
          Raghavendra D Prabhu, Sami Farin, Stefan Assmann, Stefan Kuhn,
          Tim Stoakes, Vladimir Marek, Víctor Manuel Jáquez Leal,
          Richard Russon, Bernard 'Guyzmo' Pratz
        </para>
      </sect2>
    </sect1>

    <sect1 id="pager-read-delay-feature">
      <title>Pager Read Delay Feature</title>
      <subtitle>Delay when the pager marks a previewed message as
      read</subtitle>

      <sect2 id="pager-read-delay-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2021-06-16
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="pager-read-delay-intro">
        <title>Introduction</title>
        <para>
          The <quote>Pager Read Delay</quote> feature adds a new
          config variable to allow the pager to operate in a preview
          mode.  A new message is not marked as read merely because
          the pager opened it, but only after the pager remains on the
          message for a given length of time.
        </para>
      </sect2>

      <sect2 id="pager-read-delay-functions">
        <title>Functions</title>
        <para>
          The <quote>Pager Read Delay</quote> feature adds no new
          functions to NeoMutt.  Existing pager functions for navigating
          to a different message now check whether to mark a message
          as read.
        </para>
      </sect2>

      <sect2 id="pager-read-delay-variables">
        <title>Variables</title>
        <para>
          The <quote>Pager Read Delay</quote> feature adds one new
          config variable,
          <link linkend="pager-read-delay">$pager_read_delay</link>, which
          is an integer for how many seconds the pager must remain on
          a given message before marking it as read.  The variable
          defaults to 0 for the original behavior of marking a message
          as read the moment the pager visits it.
        </para>
      </sect2>

      <sect2 id="pager-read-delay-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the pager-read-delay feature.</emphasis>

<emphasis role="comment"># Stay at least 5 seconds on a message before the pager marks it as read</emphasis>
set pager_read_delay = 5

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="pager-read-delay-known-bugs">
        <title>Known Bugs</title>
        <para>
          When <link linkend="pager-index-lines">$pager_index_lines</link> is
          non-zero, the <quote>N</quote> status indicator from the
          <quote>%Z</quote> expando of <link
          linkend="index-format">$index_format</link> does not
          actively reflect the current new/read status of the message.
        </para>
      </sect2>

      <sect2 id="pager-read-delay-credits">
        <title>Credits</title>
        <para>
          Eric Blake
        </para>
      </sect2>
    </sect1>

    <sect1 id="progress">
      <title>Progress Bar Feature</title>
      <subtitle>Show a visual progress bar on slow operations</subtitle>

      <sect2 id="progress-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="progress-intro">
        <title>Introduction</title>
        <para>
          The <quote>progress</quote> feature shows a visual progress bar on
          slow tasks, such as indexing a large folder over the net.
        </para>
      </sect2>

      <sect2 id="progress-colors">
        <title>Colors</title>

        <table id="table-progress-colors">
          <title>Progress Colors</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Default Color</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>progress</literal></entry>
                <entry>default</entry>
                <entry>Visual progress bar</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="progress-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the progress feature.</emphasis>

<emphasis role="comment"># The 'progress' feature provides clear visual feedback for</emphasis>
<emphasis role="comment"># slow tasks, such as indexing a large folder over the net.</emphasis>

<emphasis role="comment"># Set the color of the progress bar</emphasis>
<emphasis role="comment"># White text on a red background</emphasis>
color progress white red

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="progress-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="color">Color command</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="progress-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="progress-credits">
        <title>Credits</title>
        <para>
          Rocco Rutte, Vincent Lefevre, Stefan Kuhn, Karel Zak, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="quasi-delete">
      <title>Quasi-Delete Feature</title>
      <subtitle>Mark emails that should be hidden, but not deleted</subtitle>

      <sect2 id="quasi-delete-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="quasi-delete-intro">
        <title>Introduction</title>
        <para>
          The <quote>quasi-delete</quote> function marks an email that should
          be hidden from the index, but NOT deleted. The email will disappear
          from the index when
          <link linkend="index-map">&lt;sync-mailbox&gt;</link> is called.
        </para>
        <para>
          On its own, this feature isn't very useful. It forms a useful part of
          the notmuch plugin.
        </para>
      </sect2>

      <sect2 id="quasi-delete-functions">
        <title>Functions</title>

        <table id="table-quasi-delete-functions">
          <title>Quasi-Delete Functions</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Default Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>index,pager</entry>
                <entry>(none)</entry>
                <entry><literal>&lt;quasi-delete&gt;</literal></entry>
                <entry>delete from NeoMutt, don't touch on disk</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="quasi-delete-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the quasi-delete feature.</emphasis>

<emphasis role="comment"># The 'quasi-delete' function marks an email that should be hidden</emphasis>
<emphasis role="comment"># from the index, but NOT deleted.</emphasis>
bind index,pager Q quasi-delete

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="quasi-delete-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="notmuch">notmuch feature</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="quasi-delete-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="quasi-delete-credits">
        <title>Credits</title>
        <para>
          Karel Zak, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="reply-with-xorig-patch">
      <title>Reply With X-Original-To Feature</title>
      <subtitle>Direct reply to email using X-Original-To header</subtitle>

      <sect2 id="reply-with-xorig-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-09-10
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="reply-with-xorig-intro">
        <title>Introduction</title>
        <para>
          Adds a reply_with_xorig for NeoMutt configuration files. If enabled,
          allows to reply to an email using the email address in the first
          X-Original-To: header of a mail as the From: header of the answer.
        </para>
      </sect2>

      <sect2 id="reply-with-xorig-variables">
        <title>Variables</title>

        <table id="table-reply-with-xorig-variables">
          <title>Reply With X-Original-To Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>reply_with_xorig</literal></entry>
                <entry>Boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="reply-with-xorig-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the reply-with-xorig feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Use X-Original-To header to reply when reverse is disabled or no alternate</emphasis>
<emphasis role="comment"># is found.</emphasis>
set reply_with_xorig = "yes"

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="reply-with-xorig-credits">
        <title>Credits</title>
        <para>
          Pierre-Elliott Bécue
        </para>
      </sect2>
    </sect1>

    <sect1 id="sensible-browser">
      <title>Sensible Browser Feature</title>
      <subtitle>Make the file browser behave</subtitle>

      <sect2 id="sensible-browser-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-09-10
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="sensible-browser-intro">
        <title>Introduction</title>
        <para>
          The <quote>sensible browser</quote> is a set of small changes to
          NeoMutt's mailbox browser which make the browser behave in a more
          predictable way.
        </para>
        <para>
          The behavior is divided into two use cases: Fixed Order; Variable
          Order.
        </para>

        <sect3 id="sensible-browser-sort-fixed">
          <title>A Fixed Order of Mailboxes</title>
          <para>
            This is for users who like their mailboxes in a fixed order, e.g.
            alphabetical, or unsorted (in the order of the config file).
          </para>

<screen>
<emphasis role="comment"># Fixed order</emphasis>
set sort_browser="alpha"
set sort_browser="unsorted"
</screen>

          <para>
            When you first start the browser, e.g. <literal>c?</literal> your
            current mailbox will be highlighted.
          </para>
          <para>
            When you navigate to a parent mailbox (<quote>..</quote>) your old
            mailbox will be highlighted.
          </para>
          <para>
            <quote>..</quote> will always be listed at the top, however the
            rest of the list is sorted.
          </para>
        </sect3>

        <sect3 id="sensible-browser-sort-variable">
          <title>A Variable Order of Mailboxes</title>
          <para>
            This is for users who like their mailboxes sorted by
            a characteristic that changes, e.g. count of new mail, or the size
            of mailbox.
          </para>

<screen>
<emphasis role="comment"># Variable order</emphasis>
set sort_browser="reverse-count"
set sort_browser="reverse-size"
</screen>

          <para>
            When you first start the browser, e.g. <literal>c?</literal> the
            highlight will be on the first mailbox, e.g. the one with the most
            new mail.
          </para>
          <para>
            When you navigate to a parent mailbox (<quote>..</quote>) your old
            mailbox will be highlighted.
          </para>
          <para>
            <quote>..</quote> will always be listed at the top, however the
            rest of the list is sorted.
          </para>
        </sect3>
      </sect2>

      <sect2 id="sensible-browser-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="folder-format">$folder_format</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="sensible-browser-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="sensible-browser-credits">
        <title>Credits</title>
        <para>
          Pierre-Elliott Bécue, Haakon Riiser, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="sidebar">
      <title>Sidebar Feature</title>
      <subtitle>Overview of mailboxes</subtitle>

      <sect2 id="sidebar-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-09-10, NeoMutt
          1.7.0
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="sidebar-intro">
        <title>Introduction</title>
        <para>
          The Sidebar shows a list of all your mailboxes. The list can be
          turned on and off, it can be themed and the list style can be
          configured.
        </para>
        <para>
          This part of the manual is a reference guide. If you want a simple
          introduction with examples see the
          <link linkend="intro-sidebar">Sidebar Howto</link>. If you just want
          to get started, you could use the sample
          <link linkend="sidebar-neomuttrc">Sidebar neomuttrc</link>.
        </para>
      </sect2>

      <sect2 id="sidebar-variables">
        <title>Variables</title>

        <table id="table-sidebar-variables">
          <title>Sidebar Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>sidebar_component_depth</literal></entry>
                <entry>number</entry>
                <entry><literal>0</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_delim_chars</literal></entry>
                <entry>string</entry>
                <entry><literal>/.</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_divider_char</literal></entry>
                <entry>string</entry>
                <entry><literal>|</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_folder_indent</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_format</literal></entry>
                <entry>string</entry>
                <entry><literal>%D%* %n</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_indent_string</literal></entry>
                <entry>string</entry>
                <entry><literal>&#160;&#160;</literal> (two spaces)</entry></row>
              <row>
                <entry><literal>sidebar_new_mail_only</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_next_new_wrap</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_non_empty_mailbox_only</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_on_right</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_short_path</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_sort_method</literal></entry>
                <entry>enum</entry>
                <entry><literal>unsorted</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_visible</literal></entry>
                <entry>boolean</entry>
                <entry><literal>no</literal></entry>
              </row>
              <row>
                <entry><literal>sidebar_width</literal></entry>
                <entry>number</entry>
                <entry><literal>20</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          For more details, and examples, about the
          <literal>$sidebar_format</literal>, see the
          <link linkend="intro-sidebar-format">Sidebar Intro</link>.
        </para>
      </sect2>

      <sect2 id="sidebar-functions">
        <title>Functions</title>
        <para>
          Sidebar adds the following functions to NeoMutt. By default, none of
          them are bound to keys.
        </para>

        <table id="table-sidebar-functions">
          <title>Sidebar Functions</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-next&gt;</literal></entry>
                <entry>Move the highlight to next mailbox</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-next-new&gt;</literal></entry>
                <entry>Move the highlight to next mailbox with new mail</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-open&gt;</literal></entry>
                <entry>Open highlighted mailbox</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-page-down&gt;</literal></entry>
                <entry>Scroll the Sidebar down 1 page</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-page-up&gt;</literal></entry>
                <entry>Scroll the Sidebar up 1 page</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-prev&gt;</literal></entry>
                <entry>Move the highlight to previous mailbox</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-prev-new&gt;</literal></entry>
                <entry>Move the highlight to previous mailbox with new mail</entry>
              </row>
              <row>
                <entry>index,pager</entry>
                <entry><literal>&lt;sidebar-toggle-visible&gt;</literal></entry>
                <entry>Make the Sidebar (in)visible</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="sidebar-commands">
        <title>Commands</title>
        <anchor id="sidebar-pin" />
        <anchor id="sidebar-unpin" />
        <cmdsynopsis>
          <command>sidebar_pin</command>
          <arg choice="plain">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
          <arg choice="opt" rep="repeat">
            <replaceable class="parameter">mailbox</replaceable>
          </arg>
          <command>sidebar_unpin</command>
          <group choice="req">
            <arg choice="plain">
              <replaceable class="parameter">*</replaceable>
            </arg>
            <arg choice="plain" rep="repeat">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </group>
        </cmdsynopsis>
        <para>
          This command specifies mailboxes that will always be displayed in the
          sidebar, even if
          <link linkend="sidebar-new-mail-only">$sidebar_new_mail_only</link>
          is set and the mailbox does not contain new mail.
        </para>
        <para>
          The <quote>sidebar_unpin</quote> command is used to remove
          a mailbox from the list of always displayed mailboxes. Use
          <quote>sidebar_unpin&#160;*</quote> to remove all mailboxes.
        </para>
      </sect2>

      <sect2 id="sidebar-colors">
        <title>Colors</title>

        <table id="table-sidebar-colors">
          <title>Sidebar Colors</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Default Color</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>sidebar_background</literal></entry>
                <entry>default</entry>
                <entry>
                  The entire sidebar panel
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_divider</literal></entry>
                <entry>default</entry>
                <entry>
                  The dividing line between the Sidebar and the Index/Pager
                  panels
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_flagged</literal></entry>
                <entry>default</entry>
                <entry>
                  Mailboxes containing flagged mail
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_highlight</literal></entry>
                <entry>underline</entry>
                <entry>
                  Cursor to select a mailbox
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_indicator</literal></entry>
                <entry>neomutt <literal>indicator</literal></entry>
                <entry>
                  The mailbox open in the Index panel
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_new</literal></entry>
                <entry>default</entry>
                <entry>
                  Mailboxes containing new mail
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_ordinary</literal></entry>
                <entry>default</entry>
                <entry>
                  Mailboxes that have no new/flagged mails, etc.
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_spool_file</literal></entry>
                <entry>default</entry>
                <entry>
                  Mailbox that receives incoming mail
                </entry>
              </row>
              <row>
                <entry><literal>sidebar_unread</literal></entry>
                <entry>default</entry>
                <entry>
                  Mailboxes containing unread mail
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>
          If the <literal>sidebar_indicator</literal> color isn't set, then the
          default NeoMutt indicator color will be used (the color used in the
          index panel).
        </para>
      </sect2>

      <sect2 id="sidebar-sort">
        <title>Sort</title>

        <table id="table-sidebar-sort">
          <title>Sidebar Sort</title>
          <tgroup cols="2">
            <thead>
              <row>
                <entry>Sort</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>alpha</literal></entry>
                <entry>Alphabetically by path or label</entry>
              </row>
              <row>
                <entry><literal>count</literal></entry>
                <entry>Total number of messages</entry>
              </row>
              <row>
                <entry><literal>desc</literal></entry>
                <entry>Descriptive name of the mailbox</entry>
              </row>
              <row>
                <entry><literal>flagged</literal></entry>
                <entry>Number of flagged messages</entry>
              </row>
              <row>
                <entry><literal>name</literal></entry>
                <entry>Alphabetically by path or label</entry>
              </row>
              <row>
                <entry><literal>new</literal></entry>
                <entry>Number of unread messages</entry>
              </row>
              <row>
                <entry><literal>path</literal></entry>
                <entry>Alphabetically by path (ignores label)</entry>
              </row>
              <row>
                <entry><literal>unread</literal></entry>
                <entry>Number of unread messages</entry>
              </row>
              <row>
                <entry><literal>unsorted</literal></entry>
                <entry>Order of the <literal>mailboxes</literal> command</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="sidebar-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the sidebar feature.</emphasis>

<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># VARIABLES – shown with their default values</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Should the Sidebar be shown?</emphasis>
set sidebar_visible = no
<emphasis role="comment"># How wide should the Sidebar be in screen columns?</emphasis>

<emphasis role="comment"># Note: Some characters, e.g. Chinese, take up two columns each.</emphasis>
set sidebar_width = 20
<emphasis role="comment"># Should the mailbox paths be abbreviated?</emphasis>
set sidebar_short_path = no
<emphasis role="comment"># Number of top-level mailbox path subdirectories to truncate for display</emphasis>
set sidebar_component_depth = 0
<emphasis role="comment"># When abbreviating mailbox path names, use any of these characters as path</emphasis>
<emphasis role="comment"># separators. Only the part after the last separators will be shown.</emphasis>
<emphasis role="comment"># For file folders '/' is good. For IMAP folders, often '.' is useful.</emphasis>
set sidebar_delim_chars = '/.'
<emphasis role="comment"># If the mailbox path is abbreviated, should it be indented?</emphasis>
set sidebar_folder_indent = no
<emphasis role="comment"># Indent mailbox paths with this string.</emphasis>
set sidebar_indent_string = '  '
<emphasis role="comment"># Make the Sidebar only display mailboxes that contain new, or flagged,</emphasis>
<emphasis role="comment"># mail.</emphasis>
set sidebar_new_mail_only = no
<emphasis role="comment"># Any mailboxes that are pinned will always be visible, even if the</emphasis>
<emphasis role="comment"># sidebar_new_mail_only option is enabled.</emphasis>
set sidebar_non_empty_mailbox_only = no
<emphasis role="comment"># Only show mailboxes that contain some mail</emphasis>
sidebar_pin '/home/user/mailbox1'
sidebar_pin '/home/user/mailbox2'
<emphasis role="comment"># When searching for mailboxes containing new mail, should the search wrap</emphasis>
<emphasis role="comment"># around when it reaches the end of the list?</emphasis>
set sidebar_next_new_wrap = no
<emphasis role="comment"># Show the Sidebar on the right-hand side of the screen</emphasis>
set sidebar_on_right = no
<emphasis role="comment"># The character to use as the divider between the Sidebar and the other NeoMutt</emphasis>
<emphasis role="comment"># panels.</emphasis>
set sidebar_divider_char = '|'
<emphasis role="comment"># Enable extended mailbox mode to calculate total, new, and flagged</emphasis>
<emphasis role="comment"># message counts for each mailbox.</emphasis>
set mail_check_stats
<emphasis role="comment"># Display the Sidebar mailboxes using this format string.</emphasis>
set sidebar_format = '%B%&lt;F? [%F]&gt;%* %&lt;N?%N/&gt;%S'
<emphasis role="comment"># Sort the mailboxes in the Sidebar using this method:</emphasis>
<emphasis role="comment">#       count    – total number of messages</emphasis>
<emphasis role="comment">#       flagged  – number of flagged messages</emphasis>
<emphasis role="comment">#       unread   – number of unread messages</emphasis>
<emphasis role="comment">#       path     – mailbox path</emphasis>
<emphasis role="comment">#       unsorted – do not sort the mailboxes</emphasis>
set sidebar_sort_method = 'unsorted'
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># FUNCTIONS – shown with an example mapping</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Move the highlight to the previous mailbox</emphasis>
bind index,pager \Cp sidebar-prev
<emphasis role="comment"># Move the highlight to the next mailbox</emphasis>
bind index,pager \Cn sidebar-next
<emphasis role="comment"># Open the highlighted mailbox</emphasis>
bind index,pager \Co sidebar-open
<emphasis role="comment"># Move the highlight to the previous page</emphasis>
<emphasis role="comment"># This is useful if you have a LOT of mailboxes.</emphasis>
bind index,pager &lt;F3&gt; sidebar-page-up
<emphasis role="comment"># Move the highlight to the next page</emphasis>
<emphasis role="comment"># This is useful if you have a LOT of mailboxes.</emphasis>
bind index,pager &lt;F4&gt; sidebar-page-down
<emphasis role="comment"># Move the highlight to the previous mailbox containing new, or flagged,</emphasis>
<emphasis role="comment"># mail.</emphasis>
bind index,pager &lt;F5&gt; sidebar-prev-new
<emphasis role="comment"># Move the highlight to the next mailbox containing new, or flagged, mail.</emphasis>
bind index,pager &lt;F6&gt; sidebar-next-new
<emphasis role="comment"># Toggle the visibility of the Sidebar.</emphasis>
bind index,pager B sidebar-toggle-visible
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># COLORS – some unpleasant examples are given</emphasis>
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>
<emphasis role="comment"># Note: All color operations are of the form:</emphasis>
<emphasis role="comment">#       color OBJECT FOREGROUND BACKGROUND</emphasis>
<emphasis role="comment"># Color of the current, open, mailbox</emphasis>
<emphasis role="comment"># Note: This is a general NeoMutt option which colors all selected items.</emphasis>
color indicator cyan black
<emphasis role="comment"># Sidebar-specific color of the selected item</emphasis>
color sidebar_indicator cyan black
<emphasis role="comment"># Color of the highlighted, but not open, mailbox.</emphasis>
color sidebar_highlight black color8
<emphasis role="comment"># Color of the entire Sidebar panel</emphasis>
color sidebar_background default black
<emphasis role="comment"># Color of the divider separating the Sidebar from NeoMutt panels</emphasis>
color sidebar_divider color8 black
<emphasis role="comment"># Color to give mailboxes containing flagged mail</emphasis>
color sidebar_flagged red black
<emphasis role="comment"># Color to give mailboxes containing new mail</emphasis>
color sidebar_new green black
<emphasis role="comment"># Color to give mailboxes containing no new/flagged mail, etc.</emphasis>
color sidebar_ordinary color245 default
<emphasis role="comment"># Color to give the spool_file mailbox</emphasis>
color sidebar_spool_file color207 default
<emphasis role="comment"># Color to give mailboxes containing no unread mail</emphasis>
color sidebar_unread color136 default
<emphasis role="comment"># --------------------------------------------------------------------------</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="sidebar-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="regex">Regular Expressions</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="patterns">Patterns</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="color">Color command</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="notmuch">notmuch feature</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="sidebar-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="sidebar-credits">
        <title>Credits</title>
            <para>
              Justin Hibbits, Thomer M. Gil, David Sterba, Evgeni Golov,
              Fabian Groffen, Jason DeTiberus, Stefan Assmann, Steve Kemp,
              Terry Chan, Tyler Earnest, Richard Russon
            </para>
      </sect2>
    </sect1>

    <sect1 id="skip-quoted-patch">
      <title>Skip Quoted Feature</title>
      <subtitle>Managing quoted text in the pager</subtitle>

      <sect2 id="skip-quoted-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis>
          <literal>$skip_quoted_offset</literal> in NeoMutt
          2016-03-28, <literal>$toggle_quoted_show_levels</literal> in
          NeoMutt 2019-10-25, <literal>&lt;skip-headers&gt;</literal>
          in NeoMutt 2021-02-05
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="skip-quoted-intro">
        <title>Introduction</title>
        <para>
          When viewing an email, the
          <literal>&lt;skip-quoted&gt;</literal> function (by default
          the <literal>S</literal> key) will scroll past any email
          headers or quoted text. Sometimes, a little context is
          useful.  By setting the
          <literal>$skip_quoted_offset</literal> variable, you can
          select how much of the quoted text is left visible.
        </para>
        <para>
          When using the <literal>&lt;toggle-quoted&gt;</literal>
          function (by default the <literal>T</literal> key), it can
          be convenient to hide text that has been quoted multiple
          times while still leaving quoted text that is relevant to
          the unquoted reply intact.  This can be done by setting the
          <literal>$toggle_quoted_show_levels</literal> variable.
        </para>
        <para>
          Also, it can be handy to jump directly to the start of the
          email body with the <literal>&lt;skip-headers&gt;</literal>
          function (by default the <literal>H</literal> key).
        </para>
      </sect2>

      <sect2 id="skip-quoted-functions">
        <title>Functions</title>

        <table id="table-quoted-functions">
          <title>Skip Quoted Functions</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Default Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>pager</entry>
                <entry>H</entry>
                <entry><literal>&lt;skip-headers&gt;</literal></entry>
                <entry>
                  jump to first line after headers
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="skip-quoted-variables">
        <title>Variables</title>

        <table id="table-skip-quoted-variables">
          <title>Skip-Quoted Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>pager_skip_quoted_context</literal></entry>
                <entry>number</entry>
                <entry>0</entry>
              </row>
              <row>
                <entry><literal>skip_quoted_offset</literal></entry>
                <entry>synonym</entry>
                <entry>pager_skip_quoted_context</entry>
              </row>
              <row>
                <entry><literal>toggle_quoted_show_levels</literal></entry>
                <entry>number</entry>
                <entry>0</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="skip-quoted-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the skip-quoted feature.</emphasis>

<emphasis role="comment"># The 'S' (skip-quoted) command scrolls the pager past the quoted text (usually</emphasis>
<emphasis role="comment"># indented with '&gt; '. Setting 'pager_skip_quoted_context leaves some lines</emphasis>
<emphasis role="comment"># of quoted text on screen for context.</emphasis>

<emphasis role="comment"># Show three quoted lines before the reply</emphasis>
set pager_skip_quoted_context = 3

<emphasis role="comment"># The 'T' (toggle-quoted) command hides quoted text, but can</emphasis>
<emphasis role="comment"># be limited to only hiding deeply-nested quotes.</emphasis>

<emphasis role="comment"># Preserve the first level of quoted text</emphasis>
set toggle_quoted_show_levels = 1

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="skip-quoted-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="skip-quoted-credits">
        <title>Credits</title>
        <para>
          David Sterba, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="status-color">
      <title>Status Color Feature</title>
      <subtitle>Custom rules for theming the status bar</subtitle>

      <sect2 id="status-color-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="status-color-intro">
        <title>Introduction</title>
        <para>
          The <quote>status-color</quote> feature allows you to theme different
          parts of the status bar (also when it's used by the index).
        </para>
        <para>
          Unlike normal color commands, <literal>color status</literal> can now
          take up to 2 extra parameters (regex, num).
        </para>
      </sect2>

      <sect2 id="status-color-commands">
        <title>Commands</title>
        <cmdsynopsis>
          <command>color</command>
          <arg choice="plain">
            <option>status</option>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">foreground</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable class="parameter">background</replaceable>
          </arg>
          <group choice="opt">
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <group choice="opt">
              <arg choice="plain">
                <replaceable class="parameter">num</replaceable>
              </arg>
            </group>
          </group>
        </cmdsynopsis>
        <para>
          With zero parameters, NeoMutt will set the default color for the
          entire status bar.
        </para>
        <para>
          With one parameter, NeoMutt will only color the parts matching the
          regex.
        </para>
        <para>
          With two parameters, NeoMutt will only color the num'th sub-match of
          the regex.
        </para>
      </sect2>

      <sect2 id="status-color-colors">
        <title>Colors</title>

        <table id="table-status-color-colors">
          <title>Status Colors</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Default Color</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>status</entry>
                <entry><literal>reverse</literal></entry>
                <entry>Status bar</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="status-color-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the status-color feature.</emphasis>

<emphasis role="comment"># The 'status-color' feature allows you to theme different parts of</emphasis>
<emphasis role="comment"># the status bar (also when it's used by the index).</emphasis>

<emphasis role="comment"># For the examples below, set some defaults</emphasis>
set status_format='-%r-NeoMutt: %f [Msgs:%&lt;M?%M/&gt;%m%&lt;n? New:%n&gt;%&lt;o? Old:%o&gt;%&lt;d? Del:%d&gt;\
%&lt;F? Flag:%F&gt;%&lt;t? Tag:%t&gt;%&lt;p? Post:%p&gt;%&lt;b? Inc:%b&gt;%&lt;l? %l&gt;]---(%s/%S)-%&gt;-(%P)---'
set index_format='%4C %Z %{%b %d} %-15.15L (%&lt;l?%4l&amp;%4c&gt;) %s'
set use_threads=yes
set sort=last-date-received
set sort_aux=date
<emphasis role="comment"># 'status color' can take up to 2 extra parameters</emphasis>
<emphasis role="comment"># color status foreground background [ regex [ num ]]</emphasis>
<emphasis role="comment"># 0 extra parameters</emphasis>
<emphasis role="comment"># Set the default color for the entire status line</emphasis>
color status blue white
<emphasis role="comment"># 1 extra parameter</emphasis>
<emphasis role="comment"># Set the color for a matching pattern</emphasis>
<emphasis role="comment"># color status foreground background regex</emphasis>
<emphasis role="comment"># Highlight New, Deleted, or Flagged emails</emphasis>
color status brightred white '(New|Del|Flag):[0-9]+'
<emphasis role="comment"># Highlight mailbox ordering if it's different from the default</emphasis>
<emphasis role="comment"># First, highlight anything (*/*)</emphasis>
color status brightred default '\([^)]+/[^)]+\)'
<emphasis role="comment"># Then override the color for one specific case</emphasis>
color status default default '\(threads/last-date-received\)'
<emphasis role="comment"># 2 extra parameters</emphasis>
<emphasis role="comment"># Set the color for the nth submatch of a pattern</emphasis>
<emphasis role="comment"># color status foreground background regex num</emphasis>
<emphasis role="comment"># Highlight the contents of the []s but not the [] themselves</emphasis>
color status red default '\[([^]]+)\]' 1
<emphasis role="comment"># The '1' refers to the first regex submatch, which is the inner</emphasis>
<emphasis role="comment"># part in ()s</emphasis>
<emphasis role="comment"># Highlight the mailbox</emphasis>
color status brightwhite default 'NeoMutt: ([^ ]+)' 1
<emphasis role="comment"># Search for 'NeoMutt: ' but only highlight what comes after it</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="status-color-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="compile-time-features">Compile-Time Features</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="regex">Regular Expressions</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="patterns">Patterns</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="index-color">index-color feature</link>
            </para>
          </listitem>
          <listitem>
            <para>
              <link linkend="color">Color command</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="status-color-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="status-color-credits">
        <title>Credits</title>
        <para>
          David Sterba, Thomas Glanzmann, Kirill A. Shutemov, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="tls-sni">
      <title>TLS-SNI Feature</title>
      <subtitle>Negotiate with a server for a TLS/SSL certificate</subtitle>

      <sect2 id="tls-sni-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-03-07
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <emphasis role="bold">Dependencies:</emphasis>
            </term>
            <listitem>
              <para>
                OpenSSL
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="tls-sni-intro">
        <title>Introduction</title>
        <para>
          The <quote>TLS-SNI</quote> feature adds support for TLS virtual
          hosting. If your mail server doesn't support this everything will
          still work normally.
        </para>
        <para>
          TLS supports sending the expected server hostname during the
          handshake, via the SNI extension. This can be used to select a server
          certificate to issue to the client, permitting virtual-hosting
          without requiring multiple IP addresses.
        </para>
        <para>
          This has been tested against Exim 4.80, which optionally logs SNI and
          can perform vhosting.
        </para>
        <para>
          To verify TLS SNI support by a server, you can use:
        </para>

<screen>
openssl s_client -host &lt;imap server&gt; -port &lt;port&gt; -tls1 -servername &lt;imap server&gt;
</screen>

      </sect2>

      <sect2 id="tls-sni-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="tls-sni-credits">
        <title>Credits</title>
        <para>
          Jeremy Katz, Phil Pennock, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="trash-folder">
      <title>Trash Folder Feature</title>
      <subtitle>Automatically move deleted emails to a trash bin</subtitle>

      <sect2 id="trash-folder-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2016-09-10, NeoMutt
          1.7.0
        </para>
        <variablelist>
          <varlistentry>
            <term>
              <emphasis role="bold">Dependencies:</emphasis>
            </term>
            <listitem>
              <para>
                If IMAP is enabled, the trash folder will use it wisely
              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </sect2>

      <sect2 id="trash-folder-intro">
        <title>Introduction</title>
        <para>
          In NeoMutt, when you <quote>delete</quote> an email it is first
          marked deleted. The email isn't really gone until
          <link linkend="index-map">&lt;sync-mailbox&gt;</link> is called. This
          happens when the user leaves the folder, or the function is called
          manually.
        </para>
        <para>
          After <literal>&lt;sync-mailbox&gt;</literal> has been called the
          email is gone forever.
        </para>
        <para>
          The <link linkend="trash">$trash</link> variable defines a folder in
          which to keep old emails. As before, first you mark emails for
          deletion. When &lt;sync-mailbox&gt; is called the emails are moved to
          the trash folder.
        </para>
        <para>
          The <literal>$trash</literal> path can be either a full directory, or
          be relative to the <link linkend="folder">$folder</link> variable,
          like the <literal>mailboxes</literal> command.
        </para>
        <note>
          <para>
            Emails deleted from the trash folder are gone forever.
          </para>
        </note>
      </sect2>

      <sect2 id="trash-folder-variables">
        <title>Variables</title>

        <table id="table-trash-variables">
          <title>Trash Variables</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>trash</entry>
                <entry>string</entry>
                <entry>(none)</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="trash-folder-functions">
        <title>Functions</title>

        <table id="table-trash-functions">
          <title>Trash Functions</title>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Menus</entry>
                <entry>Default Key</entry>
                <entry>Function</entry>
                <entry>Description</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>index,pager</entry>
                <entry>(none)</entry>
                <entry><literal>&lt;purge-message&gt;</literal></entry>
                <entry>
                  really delete the current entry, bypassing the trash folder
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="trash-folder-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the 'trash' feature.</emphasis>

<emphasis role="comment"># This feature defines a new 'trash' folder.</emphasis>

<emphasis role="comment"># When mail is deleted it will be moved to this folder.</emphasis>

<emphasis role="comment"># Folder in which to put deleted emails</emphasis>
set trash='+Trash'
set trash='/home/flatcap/Mail/Trash'
<emphasis role="comment"># The default delete key 'd' will move an email to the 'trash' folder</emphasis>
<emphasis role="comment"># Bind 'D' to REALLY delete an email</emphasis>
bind index D purge-message
<emphasis role="comment"># Note: Deleting emails from the 'trash' folder will REALLY delete them.</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="trash-folder-see-also">
        <title>See Also</title>
        <itemizedlist>
          <listitem>
            <para>
              <link linkend="folder-hook">folder-hook</link>
            </para>
          </listitem>
        </itemizedlist>
      </sect2>

      <sect2 id="trash-folder-known-bugs">
        <title>Known Bugs</title>
        <para>
          None
        </para>
      </sect2>

      <sect2 id="trash-folder-credits">
        <title>Credits</title>
        <para>
          Cedric Duval, Benjamin Kuperman, Paul Miller, Richard Russon
        </para>
      </sect2>
    </sect1>

    <sect1 id="use-threads-feature">
      <title>Use Threads Feature</title>
      <subtitle>Improve the experience with viewing threads in the
      index</subtitle>

      <sect2 id="use-threads-support">
        <title>Support</title>
        <para>
          <emphasis role="bold">Since:</emphasis> NeoMutt 2021-08-01
        </para>
        <para>
          <emphasis role="bold">Dependencies:</emphasis> None
        </para>
      </sect2>

      <sect2 id="use-threads-intro">
        <title>Introduction</title>
        <para>
          The <quote>Use Threads</quote> feature adds a new config
          variable to allow more precise control of how threads are
          displayed in the index.  Whether threads are in use is now
          orthogonal from how messages are sorted.
        </para>
      </sect2>

      <sect2 id="use-thread-functions">
        <title>Functions</title>
        <para>
          The <quote>Use Threads</quote> feature adds no new functions
          to NeoMutt.  The existing functions
          <literal>&lt;sort-mailbox&gt;</literal> and
          <literal>&lt;sort-reverse&gt;</literal> are updated to
          toggle the state of <literal>$use_threads</literal> once it
          has been set, while preserving backwards-compatible behavior
          on <literal>$sort</literal> if this feature is not used.
        </para>
      </sect2>

      <sect2 id="use-threads-variables">
        <title>Variables</title>
        <para>
          The <quote>Use Threads</quote> feature adds one new config
          variable, <link linkend="use-threads">$use_threads</link>,
          which is an enumeration of possible thread views.  The
          variable defaults to unset for the original behavior of
          overloading <link linkend="sort">$sort=threads</link> to
          enable sorting.  It can be set to <literal>flat</literal>
          (or <literal>no</literal>) for an unthreaded view based on
          <literal>$sort</literal>, to <literal>threads</literal> (or
          <literal>yes</literal>) for a threaded view where roots
          appear above children, or to <literal>reverse</literal> for
          a threaded view where children appear above roots.
        </para>
        <para>
          When sorting by threads, the value of <link
          linkend="sort">$sort</link> determines which thread floats
          to the top.  If <literal>$sort</literal> does not contain
          <literal>reverse-</literal>, the latest thread goes to the
          bottom for <literal>use_threads=threads</literal> and to the
          top for <literal>use_threads=reverse</literal>; the
          direction of float is swapped if <literal>$sort</literal>
          also uses <literal>reverse-</literal>.  If
          <literal>$sort</literal> includes <literal>last-</literal>,
          the overall thread is sorted by its descendant at any depth
          which would sort last in a flat view; otherwise, the overall
          thread is sorted solely by the thread root.  The
          <literal>last-</literal> prefix is ignored when
          <literal>use_threads=flat</literal>.
        </para>
        <para>
          Within a single thread, the value of <link
          linkend="sort-aux">$sort_aux</link> determines how siblings
          are sorted.  The same prefixes apply as for
          <literal>$sort</literal>, although it is less common to use
          the <literal>last-</literal> prefix.
        </para>
        <para>
          The <quote>Use Threads</quote> feature also modifies the
          existing config variable <link
          linkend="status-format">$status_format</link>, adding the
          <literal>%T</literal> expando which shows the current
          threading method.
        </para>
      </sect2>

      <sect2 id="use-threads-value">
        <title>Use Threads</title>

        <table>
          <title>Use Threads</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>Name</entry>
                <entry>Type</entry>
                <entry>Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><literal>use_threads</literal></entry>
                <entry>enum</entry>
                <entry><literal>unset</literal></entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </sect2>

      <sect2 id="use-threads-neomuttrc">
        <title>neomuttrc</title>

<screen>
<emphasis role="comment"># Example NeoMutt config file for the use-threads feature.</emphasis>

<emphasis role="comment"># ------------------------------------------------------------</emphasis>
<emphasis role="comment"># Default configuration: flat view sorted by date</emphasis>
<emphasis role="comment"># selecting threads with &lt;sort-mailbox&gt; changes $sort</emphasis>
<emphasis role="comment">#set use_threads=unset sort=date sort_aux=date</emphasis>
<emphasis role="comment"># Modern configuration: explicit flat view sorted by date</emphasis>
<emphasis role="comment"># selecting threads with &lt;sort-mailbox&gt; changes $use_threads</emphasis>
<emphasis role="comment">set use_threads=no sort=date sort_aux=date</emphasis>
<emphasis role="comment">#   Anne     12:01  cover letter for thread 1</emphasis>
<emphasis role="comment">#   Anne     12:02  part 1 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:03  part 2 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:04  part 3 of thread 1</emphasis>
<emphasis role="comment">#   Barbara  12:05  thread 2</emphasis>
<emphasis role="comment">#   Claire   12:06  thread 3</emphasis>
<emphasis role="comment">#   Diane    12:07  re: part 2 of thread 1</emphasis>
<emphasis role="comment">#   Erica    12:08  re: thread 2</emphasis>

<emphasis role="comment"># ------------------------------------------------------------</emphasis>
<emphasis role="comment"># Legacy configuration: sorting threads by date started</emphasis>
<emphasis role="comment">#set sort=threads sort_aux=date</emphasis>
<emphasis role="comment"># Modern configuration for the same</emphasis>
<emphasis role="comment"># Latest root message sorts last</emphasis>
set use_threads=yes sort=date sort_aux=date
<emphasis role="comment">#   Anne     12:01  cover letter for thread 1</emphasis>
<emphasis role="comment">#   Anne     12:02  |-&gt;part 1 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:03  |-&gt;part 2 of thread 1</emphasis>
<emphasis role="comment">#   Diane    12:07  | `-&gt;re: part 2 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:04  `-&gt;part 3 of thread 1</emphasis>
<emphasis role="comment">#   Barbara  12:05  thread 2</emphasis>
<emphasis role="comment">#   Erica    12:08  `-&gt;re: thread 2</emphasis>
<emphasis role="comment">#   Claire   12:06  thread 3</emphasis>

<emphasis role="comment"># ------------------------------------------------------------</emphasis>
<emphasis role="comment"># Legacy configuration: display threads upside-down</emphasis>
<emphasis role="comment">#set sort=reverse-threads sort_aux=date</emphasis>
<emphasis role="comment"># Modern configuration for the same</emphasis>
<emphasis role="comment"># Latest root message sorts first</emphasis>
set use_threads=reverse sort=date sort_aux=date
<emphasis role="comment">#   Claire   12:06  thread 3</emphasis>
<emphasis role="comment">#   Erica    12:08  ,-&gt;re: thread 2</emphasis>
<emphasis role="comment">#   Barbara  12:05  thread 2</emphasis>
<emphasis role="comment">#   Anne     12:04  ,-&gt;part 3 of thread 1</emphasis>
<emphasis role="comment">#   Diane    12:07  | ,-&gt;re: part 2 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:03  |-&gt;part 2 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:02  |-&gt;part 1 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:01  cover letter for thread 1</emphasis>

<emphasis role="comment"># ------------------------------------------------------------</emphasis>
<emphasis role="comment"># Legacy configuration: recently active thread/subthread first</emphasis>
<emphasis role="comment">#set sort=threads sort_aux=reverse-last-date</emphasis>
<emphasis role="comment"># Modern configuration for the same</emphasis>
<emphasis role="comment"># Note that subthreads are also rearranged</emphasis>
set use_threads=threads sort=reverse-last-date sort_aux=reverse-last-date
<emphasis role="comment">#   Barbara  12:05  thread 2</emphasis>
<emphasis role="comment">#   Erica    12:08  `-&gt;re: thread 2</emphasis>
<emphasis role="comment">#   Anne     12:01  cover letter for thread 1</emphasis>
<emphasis role="comment">#   Anne     12:03  |-&gt;part 2 of thread 1</emphasis>
<emphasis role="comment">#   Diane    12:07  | `-&gt;re: part 2 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:04  |-&gt;part 3 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:02  `-&gt;part 1 of thread 1</emphasis>
<emphasis role="comment">#   Claire   12:06  thread 3</emphasis>

<emphasis role="comment"># ------------------------------------------------------------</emphasis>
<emphasis role="comment"># Modern configuration: threads keep date order, recently active thread last</emphasis>
<emphasis role="comment"># (not possible with legacy configuration)</emphasis>
set use_threads=threads sort=last-date sort_aux=date
<emphasis role="comment">#   Claire   12:06  thread 3</emphasis>
<emphasis role="comment">#   Anne     12:01  cover letter for thread 1</emphasis>
<emphasis role="comment">#   Anne     12:02  |-&gt;part 1 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:03  |-&gt;part 2 of thread 1</emphasis>
<emphasis role="comment">#   Diane    12:07  | `-&gt;re: part 2 of thread 1</emphasis>
<emphasis role="comment">#   Anne     12:04  `-&gt;part 3 of thread 1</emphasis>
<emphasis role="comment">#   Barbara  12:05  thread 2</emphasis>
<emphasis role="comment">#   Erica    12:08  `-&gt;re: thread 2</emphasis>

<emphasis role="comment"># vim: syntax=neomuttrc</emphasis>
</screen>

      </sect2>

      <sect2 id="use-threads-known-bugs">
        <title>Known Bugs</title>
        <para>
          Even though <literal>use_threads</literal> accepts the
          values <literal>yes</literal> and <literal>no</literal>, it
          does not behave like a boolean or quad-option variable.  A
          bare <literal>set use_threads</literal> performs a query
          rather than setting it to <literal>yes</literal>, and the
          variable is not usable with <literal>toggle</literal>.
        </para>
      </sect2>

      <sect2 id="use-threads-credits">
        <title>Credits</title>
        <para>
          Eric Blake
        </para>
      </sect2>
    </sect1>

    <sect1 id="autocryptdoc">
      <title>Autocrypt</title>

      <para>
        NeoMutt can be compiled with Autocrypt support by running
        <literal>configure</literal> with the
        <literal>--autocrypt</literal> flag.  Autocrypt provides
        easy to use, passive protection against data collection.  Keys are
        distributed via an <literal>Autocrypt:</literal> header added to
        emails.  It does <emphasis>not</emphasis> protect against active
        adversaries, and so should not be considered a substitute for
        normal encryption via your keyring, using key signing and the web
        of trust to verify identities.  With an understanding of these
        limitations, Autocrypt still provides an easy way to minimize
        cleartext emails sent between common correspondents, without
        having to explicitly exchange keys.  More information can be found
        at <ulink url="https://autocrypt.org/">https://autocrypt.org/</ulink>.
      </para>

      <sect2 id="autocryptdoc-requirements">
        <title>Requirements</title>
        <para>
          Autocrypt requires support for ECC cryptography, and NeoMutt by
          default will generate ECC keys.  Therefore GnuPG 2.1 or greater
          is required.  Additionally, NeoMutt's Autocrypt implementation uses
          GPGME and requires at least version 1.8.0.
        </para>
        <para>
          Account and peer information is stored in a sqlite3 database, and
          so NeoMutt must be configured with the <literal>--with-sqlite</literal>
          flag when autocrypt is enabled.
        </para>
        <para>
          It is highly recommended that NeoMutt be configured with
          <literal>--idn2</literal> (enabled by default)
          so that Autocrypt can properly deal with international domain names.
        </para>
        <para>
          While NeoMutt uses GPGME for Autocrypt, normal keyring operations
          can still be performed via classic mode (i.e. with
          <link linkend="crypt-use-gpgme">$crypt_use_gpgme</link> unset).
          However, to avoid unnecessary prompts, it is recommended gpg not
          be configured in <literal>loopback pinentry</literal> mode, and
          that <link linkend="pgp-use-gpg-agent">$pgp_use_gpg_agent</link>
          remain set (the default).
        </para>
      </sect2>

      <sect2 id="autocryptdoc-init">
        <title>First Run</title>
        <para>
          To enable Autocrypt, set <link
          linkend="autocrypt">$autocrypt</link>, and if desired change the
          value of <link linkend="autocrypt-dir">$autocrypt_dir</link> in
          your muttrc.  The first time NeoMutt is run after that, you will be
          prompted to create
          <link linkend="autocrypt-dir">$autocrypt_dir</link>.  NeoMutt will then
          automatically create an sqlite3 database and GPG keyring in that
          directory.  Note since these files should be considered private,
          NeoMutt will create this directory with mode
          <literal>700</literal>.  If you create the directory manually,
          you should do the same.
        </para>
        <para>
          NeoMutt recommends keeping the <link
          linkend="autocrypt-dir">$autocrypt_dir</link> directory set
          differently from your GnuPG keyring directory
          (e.g. <literal>~/.gnupg</literal>).  Keys are automatically
          imported into the keyring from <literal>Autocrypt:</literal>
          headers.  Compared to standard <quote>web of trust</quote> keys,
          Autocrypt keys are somewhat ephemeral, and the autocrypt
          database is used to track when keys change or fall out of use.
          Having these keys mixed in with your normal keyring will make it
          more difficult to use features such as
          <link linkend="crypt-opportunistic-encrypt">$crypt_opportunistic_encrypt</link>
          and Autocrypt at the same time.
        </para>
        <para>
          The <link linkend="autocrypt-dir">$autocrypt_dir</link> variable
          is not designed to be changed while NeoMutt is running.  The
          database is created (if necessary) and connected to during
          startup.  Changing the variable can result in a situation where
          NeoMutt is looking in one place for the database and a different
          place for the GPG keyring, resulting in strange behavior.
        </para>
        <para>
          Once the directory, keyring, and database are created, NeoMutt will
          ask whether you would like to create an account.  In order to
          use Autocrypt, each sending address needs an account.  As a
          convenience you can create an account during the first run.  If
          you would like to add additional accounts later, this can be
          done via the <literal>&lt;autocrypt-acct-menu&gt;</literal>
          function in the index, by default bound to <literal>A</literal>.
        </para>
        <para>
          Account creation will first ask you for an email address.  Next,
          it will ask whether you want to create a new key or select an
          existing key.  (Note key selection takes place from the <link
          linkend="autocrypt-dir">$autocrypt_dir</link> keyring, which
          will normally be empty during first run).  Finally, it will ask
          whether this address should prefer encryption or not.  Autocrypt
          1.1 allows automatically enabling encryption if
          <emphasis>both</emphasis> sender and receiver have set
          <quote>prefer encryption</quote>.  Otherwise, you will need to
          manually enable autocrypt encryption in the compose menu.  For
          more details, see the compose menu section below.
        </para>
        <para>
          After optionally creating an account, NeoMutt will prompt you to
          scan mailboxes for Autocrypt headers.  This step occurs because
          header cached messages are not re-scanned for Autocrypt headers.
          Scanning during this step will temporarily disable the header
          cache while opening each mailbox.  If you wish to do this
          manually later, you can simulate the same thing by unsetting
          <link linkend="header-cache">$header_cache</link> and opening a
          mailbox.
        </para>
        <para>
          A final technical note: the first run process takes place
          between reading the muttrc and opening the initial mailbox.
          Some muttrc files will <link linkend="push">push</link> macros
          to be run after opening the mailbox.  To prevent this from
          interfering with the first run prompts, NeoMutt disables all macros
          during the first run.
        </para>
      </sect2>

      <sect2 id="autocryptdoc-compose">
        <title>Compose Menu</title>
        <para>
          When enabled, Autocrypt will add a line to the compose menu with
          two fields: <literal>Autocrypt:</literal> and
          <literal>Recommendation:</literal>.
        </para>
        <para>
          The <literal>Autocrypt:</literal> field shows whether the
          message will be encrypted by Autocrypt when sent.  It has two
          values: <literal>Encrypt</literal> and <literal>Off</literal>.
          <literal>Encrypt</literal> can be enabled using the
          <literal>&lt;autocrypt-menu&gt;</literal> function, by default
          bound to <literal>o</literal>.
        </para>
        <para>
          The <literal>Recommendation:</literal> field shows the output of
          the Autocrypt recommendation engine.  This can have one of five
          values:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              <literal>Off</literal> means the engine is disabled.  This
              can happen if the From address doesn't have an autocrypt
              account, or if the account has been manually disabled.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>No</literal> means one or more recipients are
              missing an autocrypt key, or the key found is unusable
              (i.e. expired, revoked, disabled, invalid, or not usable for
              encryption.)
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>Discouraged</literal> means a key was found for
              every recipient, but the engine is not confident the message
              will be decryptable by the recipient.  This can happen if
              the key hasn't been used recently (compared to their last
              seen email).
            </para>
            <para>
              It can also happen if the key wasn't seen first-hand from
              the sender.  Autocrypt has a feature where recipient keys
              can be included in group-encrypted emails.  This allows you
              to reply to a conversation where you don't have a key
              first-hand from one of the other recipients.  However, those
              keys are not trusted as much as from first-hand emails, so
              the engine warns you with a <literal>Discouraged</literal>
              status.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>Available</literal> means a key was found for every
              recipient, and the engine believes all keys are recent and
              seen from the recipient first hand.  However, either you or
              one of the recipients chose not to specify <quote>prefer
              encryption</quote>.
            </para>
          </listitem>
          <listitem>
            <para>
              <literal>Yes</literal> is the same as
              <literal>Available</literal>, with the addition that you and
              all recipients have specified <quote>prefer encryption</quote>.
              This value will automatically enable
              encryption, unless you have manually switched it off or
              enabled regular encryption or signing via the
              <literal>&lt;pgp-menu&gt;</literal>.
            </para>
          </listitem>
        </itemizedlist>
        <para>
          As mentioned above the <literal>&lt;autocrypt-menu&gt;</literal>
          function, by default bound to <literal>o</literal>, can be used
          to change the <literal>Encrypt:</literal> field value.
          <literal>(e)ncrypt</literal> will toggle encryption on.
          <literal>(c)lear</literal> will toggle encryption off.  If
          either of these are chosen, the field will remain in that state
          despite what the <literal>Recommendation:</literal> field shows.
          Lastly, <literal>(a)utomatic</literal> will set the value based
          on the recommendation engine's output.
        </para>
        <para>
          Autocrypt encryption defers to normal encryption or signing.
          <emphasis>Anything</emphasis> that enables normal encryption or
          signing will cause autocrypt encryption to turn off.  The only
          exception is when replying to an autocrypt-encrypted email
          (i.e. an email decrypted from the <link
          linkend="autocrypt-dir">$autocrypt_dir</link> keyring).  Then,
          if <link linkend="autocrypt-reply">$autocrypt_reply</link> is
          <emphasis>set</emphasis>, autocrypt mode will be forced on,
          overriding the settings
          <link linkend="crypt-auto-sign">$crypt_auto_sign</link>,
          <link linkend="crypt-auto-encrypt">$crypt_auto_encrypt</link>,
          <link linkend="crypt-reply-encrypt">$crypt_reply_encrypt</link>,
          <link linkend="crypt-reply-sign">$crypt_reply_sign</link>,
          <link linkend="crypt-reply-sign-encrypted">$crypt_reply_sign_encrypted</link>, and
          <link linkend="crypt-opportunistic-encrypt">$crypt_opportunistic_encrypt</link>.
        </para>
        <para>
          When postponing a message, autocrypt will respect
          <link linkend="postpone-encrypt">$postpone_encrypt</link>, but will
          use the autocrypt account key to encrypt the message.  Be sure
          to set <link linkend="postpone-encrypt">$postpone_encrypt</link>
          to ensure postponed messages marked for autocrypt encryption are
          encrypted.
        </para>
      </sect2>

      <sect2 id="autocryptdoc-acctmgmt">
        <title>Account Management</title>
        <para>
          The Autocrypt Account Menu is available from the index via
          <literal>&lt;autocrypt-acct-menu&gt;</literal>, by default bound
          to <literal>A</literal>.  See <link
          linkend="autocrypt-account-map">Autocrypt Account Menu</link> for the
          list of functions and their default keybindings.
        </para>
        <para>
          In this menu, you can create new accounts, delete accounts,
          toggle an account active/inactive, and toggle the <quote>prefer
          encryption</quote> flag for an account.
        </para>
        <para>
          Deleting an account only removes the account from the database.
          The GPG key is kept, to ensure you still have the ability to
          read past encrypted emails.
        </para>
        <para>
          The Autocrypt 1.1 <quote>Setup Message</quote> feature is not
          available yet, but will be added in the future.
        </para>
      </sect2>

      <sect2 id="autocryptdoc-keyrings">
        <title>Alternative Key and Keyring Strategies</title>
        <para>
          NeoMutt by default partitions Autocrypt from normal keyring
          encryption/signing.  It does this by using a separate GPG
          keyring (in <link linkend="autocrypt-dir">$autocrypt_dir</link>)
          and creating a new ECC key in that keyring for accounts.  There
          are good reasons for doing this by default.  It keeps random
          keys found inside email headers out of your normal keyring.  ECC
          keys are compact and better suited for email headers.  Autocrypt
          key selection is completely different from <quote>web of
          trust</quote> key selection, based on last-seen rules as opposed
          to trust and validity.  It also allows NeoMutt to distinguish
          Autocrypt encrypted emails from regular encrypted emails, and
          set the mode appropriately when replying to each type of email.
        </para>
        <para>
          Still, some users may want to use an existing key from their
          normal keyring for Autocrypt too.  There are two ways this can
          be accomplished.  The <emphasis>recommended</emphasis> way is to
          set <link linkend="autocrypt-dir">$autocrypt_dir</link> to your
          normal keyring directory (e.g. <literal>~/.gnupg</literal>).
          During account creation, choosing <quote>(s)elect existing GPG
          key</quote> will then list and allow selecting your existing key
          for the new account.
        </para>
        <para>
          An alternative is to copy your key over to the Autocrypt keyring,
          but there is a severe downside.  NeoMutt <emphasis>first</emphasis>
          tries to decrypt messages using the Autocrypt keyring, and if
          that fails tries the normal keyring second.  This means all
          encrypted emails to that key will be decrypted, and have
          signatures verified from, the Autocrypt keyring.  Keys signatures
          and web of trust from your normal keyring will no longer show up
          in signatures when decrypting.
        </para>
        <para>
          For that reason, if you want to use an existing key from your
          normal keyring, it is recommended to just set <link
          linkend="autocrypt-dir">$autocrypt_dir</link> to
          <literal>~/.gnupg</literal>.  This allows <quote>web of
          trust</quote> to show an appropriate signature message for
          verified messages.  Autocrypt header keys will be imported into
          your keyring, but if you don't want them mixed you should
          strongly consider using a separate autocrypt key and keyring
          instead.
        </para>
        <para>
          Both methods have a couple additional caveats:
        </para>
        <itemizedlist>
          <listitem>
            <para>
              Replying to an Autocrypt decrypted message by default forces
              Autocrypt mode on.  By sharing the same key, all replies
              will then start in Autocrypt mode, even if a message wasn't
              sent by one of your Autocrypt peers.  <link
              linkend="autocrypt-reply">$autocrypt_reply</link> can be
              <emphasis>unset</emphasis> to allow manual control of the
              mode when replying.
            </para>
          </listitem>
          <listitem>
            <para>
              When NeoMutt creates an account from a GPG key, it exports the
              public key, base64 encodes it, and stores that value in the
              sqlite3 database.  The value is then used in the Autocrypt
              header added to outgoing emails.  The ECC keys NeoMutt creates
              don't change, but if you use external keys that expire, when
              you resign to extend the expiration you will need to
              recreate the Autocrypt account using the <link
              linkend="autocryptdoc-acctmgmt">account menu</link>.
              Otherwise the Autocrypt header will contain the old expired
              exported keydata.
            </para>
          </listitem>
        </itemizedlist>
      </sect2>
    </sect1>
  </chapter>

  <chapter id="security">
    <title>Security Considerations</title>
    <para>
      First of all, NeoMutt contains no security holes included by intention
      but may contain unknown security holes. As a consequence, please run
      NeoMutt only with as few permissions as possible. Especially, do not run
      NeoMutt as the super user.
    </para>
    <para>
      When configuring NeoMutt, there're some points to note about secure
      setups so please read this chapter carefully.
    </para>

    <sect1 id="security-passwords">
      <title>Passwords</title>
      <para>
        Although NeoMutt can be told the various passwords for accounts, please
        never store passwords in configuration files. Besides the fact that the
        system's operator can always read them, you could forget to mask it out
        when reporting a bug or asking for help via a mailing list. Even worse,
        your mail including your password could be archived by internet search
        engines, mail-to-news gateways etc. It may already be too late before
        you notice your mistake.
      </para>
    </sect1>

    <sect1 id="security-tempfiles">
      <title>Temporary Files</title>
      <para>
        NeoMutt uses many temporary files for viewing messages, verifying
        digital signatures, etc. As long as being used, these files are visible
        by other users and maybe even readable in case of misconfiguration.
        Also, a different location for these files may be desired which can be
        changed via the <link linkend="tmp-dir">$tmp_dir</link> variable.
      </para>
    </sect1>

    <sect1 id="security-leaks">
      <title>Information Leaks</title>

      <sect2 id="security-leaks-mid">
        <title>Message-Id: headers</title>
        <para>
          Since 2023-02-18 NeoMutt generates random Message-Id: headers, which
          do not leak any information beyond their randomness.
        </para>
      </sect2>

      <sect2 id="security-leaks-mailto">
        <title><literal>mailto:</literal>-style Links</title>
        <para>
          As NeoMutt be can be set up to be the mail client to handle
          <literal>mailto:</literal> style links in websites, there're security
          considerations, too. Arbitrary header fields can be embedded in these
          links which could override existing header fields or attach arbitrary
          files using
          <link linkend="attach-header">the Attach: pseudoheader</link>. This
          may be problematic if the
          <link linkend="edit-headers">$edit-headers</link> variable is
          <emphasis>unset</emphasis>, i.e. the user doesn't want to see header
          fields while editing the message and doesn't pay enough attention to
          the compose menu's listing of attachments.
        </para>
        <para>
          For example, following a link like
        </para>
        <screen>mailto:joe@host?Attach=~/.gnupg/secring.gpg</screen>
        <para>
          will send out the user's private gnupg keyring to
          <literal>joe@host</literal> if the user doesn't follow the
          information on screen carefully enough.
        </para>
        <para>
          To prevent these issues, NeoMutt by default only accepts the
          <literal>Subject</literal>, <literal>Body</literal>,
          <literal>Cc</literal>, <literal>In-Reply-To</literal>, and
          <literal>References</literal> headers.
          Allowed headers can be adjusted with the
          <link linkend="mailto-allow"><command>mailto_allow</command></link>
          and
          <link linkend="mailto-allow"><command>unmailto_allow</command></link>
          commands.
        </para>
      </sect2>
    </sect1>

    <sect1 id="security-external">
      <title>External Applications</title>
      <para>
        NeoMutt in many places has to rely on external applications or for
        convenience supports mechanisms involving external applications.
      </para>
      <para>
        One of these is the <literal>mailcap</literal> mechanism as defined by
        RFC1524. Details about a secure use of the mailcap mechanisms is given
        in <xref linkend="secure-mailcap" />.
      </para>
      <para>
        Besides the mailcap mechanism, NeoMutt uses a number of other external
        utilities for operation, for example to provide crypto support, in
        backtick expansion in configuration files or format string filters. The
        same security considerations apply for these as for tools involved via
        mailcap.
      </para>
    </sect1>
  </chapter>

  <chapter id="tuning">
    <title>Performance Tuning</title>

    <sect1 id="tuning-mailboxes">
      <title>Reading and Writing Mailboxes</title>
      <para>
        NeoMutt's performance when reading mailboxes can be improved in two
        ways:
      </para>
      <orderedlist>
        <listitem>
          <para>
            For remote folders (IMAP and POP) as well as folders using
            one-file-per message storage (Maildir and MH), NeoMutt's
            performance can be greatly improved using
            <link linkend="header-caching">header caching</link>. using
            a single database per folder.
          </para>
        </listitem>
        <listitem>
          <para>
            NeoMutt provides the <link linkend="read-inc">$read_inc</link> and
            <link linkend="write-inc">$write_inc</link> variables to specify at
            which rate to update progress counters. If these values are too
            low, NeoMutt may spend more time on updating the progress counter
            than it spends on actually reading/writing folders.
          </para>
          <para>
            For example, when opening a maildir folder with a few thousand
            messages, the default value for
            <link linkend="read-inc">$read_inc</link> may be too low. It can be
            tuned on on a folder-basis using
            <link linkend="folder-hook"><command>folder-hook</command>s</link>:
          </para>

<screen>
<emphasis role="comment"># use very high $read_inc to speed up reading hcache'd maildirs</emphasis>
folder-hook . 'set read_inc=1000'
<emphasis role="comment"># use lower value for reading slower remote IMAP folders</emphasis>
folder-hook ^imap 'set read_inc=100'
<emphasis role="comment"># use even lower value for reading even slower remote POP folders</emphasis>
folder-hook ^pop 'set read_inc=1'
</screen>

        </listitem>
      </orderedlist>
      <para>
        These settings work on a per-message basis. However, as messages may
        greatly differ in size and certain operations are much faster than
        others, even per-folder settings of the increment variables may not be
        desirable as they produce either too few or too much progress updates.
        Thus, NeoMutt allows to limit the number of progress updates per second
        it'll actually send to the terminal using the
        <link linkend="time-inc">$time_inc</link> variable.
      </para>
    </sect1>

    <sect1 id="tuning-messages">
      <title>Reading Messages from Remote Folders</title>
      <para>
        Reading messages from remote folders such as IMAP an POP can be slow
        especially for large mailboxes since NeoMutt only caches a very limited
        number of recently viewed messages (usually 10) per session (so that it
        will be gone for the next session.)
      </para>
      <para>
        To improve performance and permanently cache whole messages and
        headers, please refer to <link linkend="body-caching">body caching</link>
        and <link linkend="header-caching">header caching</link> for details.
      </para>
      <para>
        Additionally, it may be worth trying some of NeoMutt's experimental
        features.  <link linkend="imap-qresync">$imap_qresync</link> (which
        requires header caching) can provide a huge speed boost opening
        mailboxes if your IMAP server supports it.
        <link linkend="imap-deflate">$imap_deflate</link> enables compression,
        which can also noticeably reduce download time for large mailboxes and
        messages.
      </para>
    </sect1>

    <sect1 id="tuning-search">
      <title>Searching and Limiting</title>
      <para>
        When searching mailboxes either via a search or a limit action, for
        some patterns NeoMutt distinguishes between regular expression and
        string searches. For regular expressions, patterns are prefixed with
        <quote>~</quote> and with <quote>=</quote> for string searches.
      </para>
      <para>
        Even though a regular expression search is fast, it's several times
        slower than a pure string search which is noticeable especially on
        large folders. As a consequence, a string search should be used instead
        of a regular expression search if the user already knows enough about
        the search pattern.
      </para>
      <para>
        For example, when limiting a large folder to all messages sent to or by
        an author, it's much faster to search for the initial part of an e-mail
        address via <literal>=Luser@</literal> instead of
        <literal>~Luser@</literal>. This is especially true for searching
        message bodies since a larger amount of input has to be searched.
      </para>
      <para>
        As for regular expressions, a lower case string search pattern makes
        NeoMutt perform a case-insensitive search except for IMAP (because for
        IMAP NeoMutt performs server-side searches which don't support
        case-insensitivity).
      </para>
    </sect1>
  </chapter>

  <chapter id="reference">
    <title>Reference</title>

    <sect1 id="commandline">
      <title>Command-Line Options</title>
      <para>
        Running <literal>neomutt</literal> with no arguments will make NeoMutt
        attempt to read your spool mailbox. However, it is possible to read
        other mailboxes and to send messages from the command line as well.
      </para>

      <table id="tab-commandline-options">
        <title>Command line options</title>
        <tgroup cols="2">
          <thead>
            <row>
              <entry>Option</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>--</entry>
              <entry>
                Special argument forces NeoMutt to stop option parsing and
                treat remaining arguments as <literal>address</literal>es even
                if they start with a dash
              </entry>
            </row>
            <row>
              <entry>-A <literal>alias</literal></entry>
              <entry>
                Print an expanded version of the given <literal>alias</literal>
                to stdout and exit
              </entry>
            </row>
            <row>
              <entry>-a <literal>file</literal></entry>
              <entry>
                Attach one or more <literal>file</literal>s to a message (must
                be the last option). Add any addresses after the
                &apos;<emphasis role="bold">--</emphasis>&apos; argument, e.g.:

<screen>
neomutt -a image.jpg -- address1
neomutt -a image.jpg *.png -- address1 address2
</screen>

              </entry>
            </row>
            <row>
              <entry>-B</entry>
              <entry>
                Run in batch mode (do not start the ncurses UI)
              </entry>
            </row>
            <row>
              <entry>-b <literal>address</literal></entry>
              <entry>
                Specify a blind carbon copy (Bcc) recipient
              </entry>
            </row>
            <row>
              <entry>-C</entry>
              <entry>
                Enable cryptographic operations in the cases in which they're
                disabled by default. Those include batch mode, sending a
                postponed message, and resending a message.
              </entry>
            </row>
            <row>
              <entry>-c <literal>address</literal></entry>
              <entry>
                Specify a carbon copy (Cc) recipient
              </entry>
            </row>
            <row>
              <entry>-D</entry>
              <entry>
                Dump all config variables as
                &apos;<emphasis role="bold">name=value</emphasis>&apos; pairs
                to stdout
              </entry>
            </row>
            <row>
              <entry>-D -O</entry>
              <entry>
                Like <emphasis role="bold">-D</emphasis>, but show one-liner documentation
              </entry>
            </row>
            <row>
              <entry>-D -S</entry>
              <entry>
                Like <emphasis role="bold">-D</emphasis>, but hide the value of
                sensitive variables
              </entry>
            </row>
            <row>
              <entry>-d <literal>level</literal></entry>
              <entry>
                Log debugging output to a file (default is
                &quot;<literal>~/.neomuttdebug0</literal>&quot;).
                The <literal>level</literal> can range from 1&ndash;5 and
                affects verbosity (a value of 2 is recommended). Using this
                option along with <emphasis role="bold">-l</emphasis> is useful
                to log the early startup process (before reading any
                configuration and hence
                <link linkend="debug-level">$debug_level</link> and
                <link linkend="debug-file">$debug_file</link>)
              </entry>
            </row>
            <row>
              <entry>-E</entry>
              <entry>
                Edit
                <literal>draft</literal> (<emphasis role="bold">-H</emphasis>) or
                <literal>include</literal> (<emphasis role="bold">-i</emphasis>)
                file during message composition
              </entry>
            </row>
            <row>
              <entry>-e <literal>command</literal></entry>
              <entry>
                Specify a <literal>command</literal> to be run after reading
                the config files
              </entry>
            </row>
            <row>
              <entry>-F <literal>config</literal></entry>
              <entry>
                Specify an alternative initialization file to read, see section
                <link linkend="configuration-files">Location of Initialization Files</link>
                for a list of regular configuration files
              </entry>
            </row>
            <row>
              <entry>-f <literal>mailbox</literal></entry>
              <entry>
                Specify a <literal>mailbox</literal> (as defined with
                <link linkend="mailboxes"><command>mailboxes</command> command</link>)
                to load
              </entry>
            </row>
            <row>
              <entry>-G</entry>
              <entry>
                Start NeoMutt with a listing of subscribed newsgroups
              </entry>
            </row>
            <row>
              <entry>-g <literal>server</literal></entry>
              <entry>
                Like <emphasis role="bold">-G</emphasis>, but start at
                specified news <literal>server</literal>
              </entry>
            </row>
            <row>
              <entry>-H <literal>draft</literal></entry>
              <entry>
                Specify a <literal>draft</literal> file with header and body
                for message composing
              </entry>
            </row>
            <row>
              <entry>-h</entry>
              <entry>
                Print this help message and exit
              </entry>
            </row>
            <row>
              <entry>-i <literal>include</literal></entry>
              <entry>
                Specify an <literal>include</literal> file to be embedded in
                the body of a message
              </entry>
            </row>
            <row>
              <entry>-l <literal>file</literal></entry>
              <entry>
                Specify a <literal>file</literal> for debugging output (default
                &quot;<literal>~/.neomuttdebug0</literal>&quot;). This
                overrules <link linkend="debug-file">$debug_file</link>
                setting and NeoMutt keeps up to five debug logs ({
                <literal>file</literal> |
                <link linkend="debug-file">$debug_file</link> |
                <literal>~/.neomuttdebug</literal> }[<literal>0-4</literal>])
                before override the oldest file
              </entry>
            </row>
            <row>
              <entry>-m <literal>type</literal></entry>
              <entry>
                Specify a default mailbox format <literal>type</literal> for
                newly created folders. The <literal>type</literal> is either
                MH, MMDF, Maildir or mbox (case-insensitive)
              </entry>
            </row>
            <row>
              <entry>-n</entry>
              <entry>
                Do not read the system-wide configuration file
              </entry>
            </row>
            <row>
              <entry>-p</entry>
              <entry>
                Resume a prior postponed message, if any
              </entry>
            </row>
            <row>
              <entry>-Q <literal>variable</literal></entry>
              <entry>
                Query a configuration <literal>variable</literal> and print its
                value to stdout (after the config has been read and any
                commands executed).  Adding <literal>-O</literal> will display
                one-liner documentation.
              </entry>
            </row>
            <row>
              <entry>-R</entry>
              <entry>
                Open mailbox in read-only mode
              </entry>
            </row>
            <row>
              <entry>-s <literal>subject</literal></entry>
              <entry>
                Specify a <literal>subject</literal> (must be enclosed in
                quotes if it has spaces)
              </entry>
            </row>
            <row>
              <entry>-v</entry>
              <entry>
                Print the NeoMutt version and compile-time definitions and exit
              </entry>
            </row>
            <row>
              <entry>-vv</entry>
              <entry>
                Print the NeoMutt license and copyright information and exit
              </entry>
            </row>
            <row>
              <entry>-y</entry>
              <entry>
                Start NeoMutt with a listing of all defined mailboxes
              </entry>
            </row>
            <row>
              <entry>-Z</entry>
              <entry>
                Open the first mailbox with new message or exit immediately
                with exit code 1 if none is found in all defined mailboxes
              </entry>
            </row>
            <row>
              <entry>-z</entry>
              <entry>
                Open the first or specified
                (<emphasis role="bold">-f</emphasis>) mailbox if it holds any
                message or exit immediately with exit code 1 otherwise
              </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <para>
        To read messages in a mailbox or exit immediately
      </para>
      <cmdsynopsis>
        <command>neomutt</command>
        <arg choice="opt">
          <option>-nz</option>
        </arg>
        <arg choice="opt">
          <option>-F</option>
          <replaceable>config</replaceable>
        </arg>
        <arg choice="opt">
          <option>-m</option>
          <replaceable>type</replaceable>
        </arg>
        <arg choice="opt">
          <option>-f</option>
          <replaceable>mailbox</replaceable>
        </arg>
      </cmdsynopsis>
      <para>
        To compose a new message
      </para>
      <cmdsynopsis>
        <command>neomutt</command>
        <arg choice="opt">
          <option>-Enx</option>
        </arg>
        <arg choice="opt">
          <option>-F</option>
          <replaceable>config</replaceable>
        </arg>
        <arg choice="opt">
          <option>-b</option>
          <replaceable>address</replaceable>
        </arg>
        <arg choice="opt">
          <option>-c</option>
          <replaceable>address</replaceable>
        </arg>
        <arg choice="opt">
          <option>-H</option>
          <replaceable>draft</replaceable>
        </arg>
        <arg choice="opt">
          <option>-i</option>
          <replaceable>include</replaceable>
        </arg>
        <arg choice="opt">
          <option>-s</option>
          <replaceable>subject</replaceable>
        </arg>
        <arg choice="opt">
          <option>-a</option>
          <replaceable>file</replaceable>
          <arg choice="opt" rep="repeat" />
          <option>--</option>
        </arg>
        <group choice="req" rep="repeat">
          <arg choice="plain">
            <replaceable>address</replaceable>
          </arg>
          <arg choice="plain">
            <replaceable>mailto_url</replaceable>
          </arg>
        </group>
      </cmdsynopsis>
      <para>
        NeoMutt also supports a <quote>batch</quote> mode to send prepared
        messages. Simply redirect input from the file you wish to send. For
        example,
      </para>

<screen>
neomutt -s "data set for run #2" professor@bigschool.edu &lt; ~/run2.dat
</screen>

      <para>
        will send a message to
        <literal>&lt;professor@bigschool.edu&gt;</literal> with a subject of
        <quote>data set for run #2</quote>. In the body of the message will be
        the contents of the file <quote>~/run2.dat</quote>.
      </para>
      <para>
        An include file passed with <literal>-i</literal> will be used as the
        body of the message. When combined with <literal>-E</literal>, the
        include file will be directly edited during message composition. The
        file will be modified regardless of whether the message is sent or
        aborted.
      </para>
      <para>
        A draft file passed with <literal>-H</literal> will be used as the
        initial header and body for the message. Multipart messages can be
        used as a draft file, and are processed the same in interactive and
        batch mode; they are not passed through untouched.  For example,
        encrypted draft files will be decrypted.  When combined with
        <literal>-E</literal>, the draft file will be updated to the final
        state of the message after composition, regardless of whether the
        message is sent, aborted, or even postponed.  Note that if the message
        is sent encrypted or signed, the draft file will be saved that way too.
      </para>
      <para>
        All files passed with <literal>-a</literal> <emphasis>file</emphasis>
        will be attached as a MIME part to the message. To attach a single or
        several files, use <literal>--</literal> to separate files and
        recipient addresses:
      </para>
      <screen>neomutt -a image.png -- some@one.org</screen>
      <para>
        or
      </para>
      <screen>neomutt -a *.png -- some@one.org</screen>
      <note>
        <para>
          The <literal>-a</literal> option must be last in the option list.
        </para>
      </note>
      <para>
        In addition to accepting a list of email addresses, NeoMutt also
        accepts a URL with the <literal>mailto:</literal> schema as specified
        in RFC2368. This is useful when configuring a web browser to launch
        NeoMutt when clicking on mailto links.
      </para>

<screen>
neomutt mailto:some@one.org?subject=test&amp;cc=other@one.org
</screen>

    </sect1>

    <sect1 id="commands">
      <title>Configuration Commands</title>
      <para>
        The following are the commands understood by NeoMutt:
      </para>
      <itemizedlist>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="account-hook">account-hook</link>
            </command>
            <arg choice="plain">
              <replaceable>regex</replaceable>
              <replaceable>command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="alias">alias</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">key</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">address</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">, address</replaceable>
            </arg>
            <command>
              <link linkend="alias">unalias</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">key</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="alternates">alternates</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable>regex</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable>regex</replaceable>
            </arg>
            <command>
              <link linkend="alternates">unalternates</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>regex</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="alternative-order">alternative_order</link>
            </command>
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable>/mime-subtype</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <arg choice="plain">
                <replaceable>mime-type</replaceable>
              </arg>
              <arg choice="opt">
                <replaceable>/mime-subtype</replaceable>
              </arg>
            </arg>
            <command>
              <link linkend="alternative-order">unalternative_order</link>
            </command>
            <group choice="req">
              <arg choice="plain">*</arg>
              <arg choice="opt" rep="repeat">
                <arg choice="plain">
                  <replaceable>mime-type</replaceable>
                </arg>
                <arg choice="opt">
                  <replaceable>/mime-subtype</replaceable>
                </arg>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="attachments">attachments</link>
            </command>
            <group choice="req">
              <arg choice="plain">+</arg>
              <arg choice="plain">-</arg>
            </group>
            <arg choice="plain">
              <replaceable>disposition</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable>mime-type</replaceable>
            </arg>
            <command>
              <link linkend="attachments">unattachments</link>
            </command>
            <group choice="req">
              <arg choice="plain">+</arg>
              <arg choice="plain">-</arg>
            </group>
            <arg choice="plain">
              <replaceable>disposition</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable>mime-type</replaceable>
            </arg>
            <command>
              <link linkend="attachments">attachments</link>
            </command>
            <arg choice="plain">
              <option>?</option>
            </arg>
            <command>
              <link linkend="attachments">unattachments</link>
            </command>
            <arg choice="plain">
              <option>*</option>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="auto-view">auto_view</link>
            </command>
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable>/mime-subtype</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <arg choice="plain">
                <replaceable>mime-type</replaceable>
              </arg>
              <arg choice="opt">
                <replaceable>/mime-subtype</replaceable>
              </arg>
            </arg>
            <command>
              <link linkend="auto-view">unauto_view</link>
            </command>
            <group choice="req">
              <arg choice="plain">*</arg>
              <arg choice="opt" rep="repeat">
                <arg choice="plain">
                  <replaceable>mime-type</replaceable>
                </arg>
                <arg choice="opt">
                  <replaceable>/mime-subtype</replaceable>
                </arg>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="bind">bind</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">map</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">,map</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">key</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">function</replaceable>
            </arg>
            <command>
              <link linkend="unbind">unbind</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <arg choice="plain">
                  <replaceable class="parameter">map</replaceable>
                </arg>
                <arg choice="opt" rep="repeat">
                  <replaceable class="parameter">,map</replaceable>
                </arg>
              </arg>
            </group>
            <group choice="opt">
              <arg choice="plain">
                <replaceable class="parameter">key</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command><link linkend="cd">cd</link></command>
            <arg choice="plain">
              <replaceable class="parameter">directory</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="charset-hook">charset-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">alias</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">charset</replaceable>
            </arg>
            <command>
              <link linkend="charset-hook">iconv-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">charset</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">local-charset</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="color">color</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">object</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">foreground</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">background</replaceable>
            </arg>
            <command>
              <link linkend="color">color</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">foreground</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">background</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <command>
              <link linkend="color">color</link>
            </command>
            <arg choice="plain">
              <option>index</option>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">foreground</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">background</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <command>
              <link linkend="color">uncolor</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>index</option>
              </arg>
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="crypt-hook">crypt-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">keyid</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="exec">exec</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">function</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">function</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="default-save-mailbox">fcc-save-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <command>
              <link linkend="default-save-mailbox">fcc-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <command>
              <link linkend="default-save-mailbox">save-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="folder-hook">folder-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="addrgroup">group</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain" rep="repeat">
                <option>-rx</option>
                <replaceable class="parameter">regex</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <option>-addr</option>
                <replaceable class="parameter">address</replaceable>
              </arg>
            </group>
            <command>
              <link linkend="addrgroup">ungroup</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <option>-rx</option>
                <replaceable class="parameter">regex</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <option>-addr</option>
                <replaceable class="parameter">address</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="hdr-order">hdr_order</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">header</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">header</replaceable>
            </arg>
            <command>
              <link linkend="hdr-order">unhdr_order</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>header</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="ifdef">ifdef</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">symbol</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">&quot;config-command [args...]&quot;</replaceable>
            </arg>
            <command>
              <link linkend="ifdef">ifndef</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">symbol</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">&quot;config-command [args...]&quot;</replaceable>
            </arg>
            <command>
              <link linkend="ifdef">finish</link>
            </command>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="ignore">ignore</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">string</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">string</replaceable>
            </arg>
            <command>
              <link linkend="ignore">unignore</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>string</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="index-format-hook">index-format-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">[!]pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">format-string</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="lists">lists</link>
            </command>
            <arg>
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <command>
              <link linkend="lists">unlists</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable>*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable>regex</replaceable>
              </arg>
            </group>
            <command>
              <link linkend="lists">subscribe</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable class="parameter">name</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <command>
              <link linkend="lists">unsubscribe</link>
            </command>
            <arg choice="opt" rep="repeat">
              <option>-group</option>
              <replaceable>name</replaceable>
            </arg>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">regex</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="macro">macro</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">menu</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">,menu</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">key</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">sequence</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable class="parameter">description</replaceable>
            </arg>
            <command>
              <link linkend="unmacro">unmacro</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <arg choice="plain">
                  <replaceable class="parameter">map</replaceable>
                </arg>
                <arg choice="opt" rep="repeat">
                  <replaceable class="parameter">,map</replaceable>
                </arg>
              </arg>
            </group>
            <group choice="opt">
              <arg choice="plain">
                <replaceable class="parameter">key</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mailboxes">mailboxes</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <command>
              <link linkend="mailboxes">named-mailboxes</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">description</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <group choice="opt" rep="repeat">
              <arg choice="plain">
                <replaceable class="parameter">description mailbox</replaceable>
              </arg>
            </group>
            <command>
              <link linkend="mailboxes">unmailboxes</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">mailbox</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mailto-allow">mailto_allow</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">header-field</replaceable>
              </arg>
            </group>
            <command>
              <link linkend="mailto-allow">unmailto_allow</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">header-field</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mbox-hook">mbox-hook</link>
            </command>
            <arg choice="opt">
              <replaceable class="parameter">-noregex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="message-hook">message-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="mime-lookup">mime_lookup</link>
            </command>
            <arg choice="plain">
              <replaceable>mime-type</replaceable>
            </arg>
            <arg choice="opt">
              <replaceable>/mime-subtype</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <arg choice="plain">
                <replaceable>mime-type</replaceable>
              </arg>
              <arg choice="opt">
                <replaceable>/mime-subtype</replaceable>
              </arg>
            </arg>
            <command>
              <link linkend="mime-lookup">unmime_lookup</link>
            </command>
            <group choice="req">
              <arg choice="plain">*</arg>
              <arg choice="opt" rep="repeat">
                <arg choice="plain">
                  <replaceable>mime-type</replaceable>
                </arg>
                <arg choice="opt">
                  <replaceable>/mime-subtype</replaceable>
                </arg>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="color-mono">mono</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">object</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <command>
              <link linkend="color-mono">mono</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <arg choice="plain">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <command>
              <link linkend="color-mono">mono</link>
            </command>
            <arg choice="plain">
              <option>index-object</option>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">attribute</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <command>
              <link linkend="color-mono">unmono</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <option>index-object</option>
              </arg>
              <arg choice="plain">
                <option>header</option>
              </arg>
              <arg choice="plain">
                <option>body</option>
              </arg>
            </group>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="my-hdr">my_hdr</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">string</replaceable>
            </arg>
            <command>
              <link linkend="my-hdr">unmy_hdr</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">field</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="open-hook">open-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">&quot;shell-command&quot;</replaceable>
            </arg>
            <command>
              <link linkend="close-hook">close-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">&quot;shell-command&quot;</replaceable>
            </arg>
            <command>
              <link linkend="append-hook">append-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">&quot;shell-command&quot;</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="push">push</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">string</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="send-hook">reply-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
            <command>
              <link linkend="send-hook">send-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
            <command>
              <link linkend="send-hook">send2-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="score-command">score</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">pattern</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">value</replaceable>
            </arg>
            <command>
              <link linkend="score-command">unscore</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">pattern</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="set">set</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <group choice="opt">
                  <arg choice="plain">
                    <option>no</option>
                  </arg>
                  <arg choice="plain">
                    <option>inv</option>
                  </arg>
                  <arg choice="plain">
                    <option>&amp;</option>
                  </arg>
                  <arg choice="plain">
                    <option>?</option>
                  </arg>
                </group>
                <replaceable class="parameter">variable</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">variable=value</replaceable>
              </arg>
            </group>
            <arg choice="opt" rep="repeat"></arg>
            <command>
              <link linkend="set">unset</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <command>
              <link linkend="set">reset</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <command>
              <link linkend="set">toggle</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">variable</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="setenv">setenv</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">?variable</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">variable value</replaceable>
              </arg>
            </group>
            <command>
              <link linkend="setenv">unsetenv</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">variable</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="sidebar-pin">sidebar_pin</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <arg choice="opt" rep="repeat">
              <replaceable class="parameter">mailbox</replaceable>
            </arg>
            <command>
              <link linkend="sidebar-pin">sidebar_unpin</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain" rep="repeat">
                <replaceable class="parameter">mailbox</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="source">source</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">filename</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="spam">spam</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">format</replaceable>
            </arg>
            <command>
              <link linkend="spam">nospam</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">regex</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="display-munging">subjectrx</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">regex</replaceable>
            </arg>
            <arg choice="plain">
              <replaceable class="parameter">replacement</replaceable>
            </arg>
            <command>
              <link linkend="display-munging">unsubjectrx</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">regex</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="imap">subscribe-to</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">imap-folder-uri</replaceable>
            </arg>
            <command>
              <link linkend="imap">unsubscribe-from</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">imap-folder-uri</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="global-hooks">timeout-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
            <command>
              <link linkend="global-hooks">startup-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
            <command>
              <link linkend="global-hooks">shutdown-hook</link>
            </command>
            <arg choice="plain">
              <replaceable class="parameter">command</replaceable>
            </arg>
          </cmdsynopsis>
        </listitem>
        <listitem>
          <cmdsynopsis>
            <command>
              <link linkend="unhook">unhook</link>
            </command>
            <group choice="req">
              <arg choice="plain">
                <replaceable class="parameter">*</replaceable>
              </arg>
              <arg choice="plain">
                <replaceable class="parameter">hook-type</replaceable>
              </arg>
            </group>
          </cmdsynopsis>
        </listitem>
      </itemizedlist>
    </sect1>

    <sect1 id="variables">
      <title>Configuration Variables</title>
